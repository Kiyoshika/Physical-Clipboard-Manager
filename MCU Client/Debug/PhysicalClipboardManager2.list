
PhysicalClipboardManager2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007df8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  08007f90  08007f90  00017f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800844c  0800844c  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800844c  0800844c  0001844c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008454  08008454  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008454  08008454  00018454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008458  08008458  00018458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800845c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c4c  200000fc  08008558  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d48  08008558  00021d48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f545  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003030  00000000  00000000  0002f671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d08  00000000  00000000  000326a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00018c32  00000000  00000000  000333b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010fa3  00000000  00000000  0004bfe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000881ff  00000000  00000000  0005cf85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000e5184  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000b88  00000000  00000000  000e51d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003594  00000000  00000000  000e5d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007f78 	.word	0x08007f78

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	08007f78 	.word	0x08007f78

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__gedf2>:
 8000560:	f04f 3cff 	mov.w	ip, #4294967295
 8000564:	e006      	b.n	8000574 <__cmpdf2+0x4>
 8000566:	bf00      	nop

08000568 <__ledf2>:
 8000568:	f04f 0c01 	mov.w	ip, #1
 800056c:	e002      	b.n	8000574 <__cmpdf2+0x4>
 800056e:	bf00      	nop

08000570 <__cmpdf2>:
 8000570:	f04f 0c01 	mov.w	ip, #1
 8000574:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000578:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800057c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000580:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000584:	bf18      	it	ne
 8000586:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800058a:	d01b      	beq.n	80005c4 <__cmpdf2+0x54>
 800058c:	b001      	add	sp, #4
 800058e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000592:	bf0c      	ite	eq
 8000594:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000598:	ea91 0f03 	teqne	r1, r3
 800059c:	bf02      	ittt	eq
 800059e:	ea90 0f02 	teqeq	r0, r2
 80005a2:	2000      	moveq	r0, #0
 80005a4:	4770      	bxeq	lr
 80005a6:	f110 0f00 	cmn.w	r0, #0
 80005aa:	ea91 0f03 	teq	r1, r3
 80005ae:	bf58      	it	pl
 80005b0:	4299      	cmppl	r1, r3
 80005b2:	bf08      	it	eq
 80005b4:	4290      	cmpeq	r0, r2
 80005b6:	bf2c      	ite	cs
 80005b8:	17d8      	asrcs	r0, r3, #31
 80005ba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005be:	f040 0001 	orr.w	r0, r0, #1
 80005c2:	4770      	bx	lr
 80005c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005cc:	d102      	bne.n	80005d4 <__cmpdf2+0x64>
 80005ce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005d2:	d107      	bne.n	80005e4 <__cmpdf2+0x74>
 80005d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005dc:	d1d6      	bne.n	800058c <__cmpdf2+0x1c>
 80005de:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005e2:	d0d3      	beq.n	800058c <__cmpdf2+0x1c>
 80005e4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <__aeabi_cdrcmple>:
 80005ec:	4684      	mov	ip, r0
 80005ee:	4610      	mov	r0, r2
 80005f0:	4662      	mov	r2, ip
 80005f2:	468c      	mov	ip, r1
 80005f4:	4619      	mov	r1, r3
 80005f6:	4663      	mov	r3, ip
 80005f8:	e000      	b.n	80005fc <__aeabi_cdcmpeq>
 80005fa:	bf00      	nop

080005fc <__aeabi_cdcmpeq>:
 80005fc:	b501      	push	{r0, lr}
 80005fe:	f7ff ffb7 	bl	8000570 <__cmpdf2>
 8000602:	2800      	cmp	r0, #0
 8000604:	bf48      	it	mi
 8000606:	f110 0f00 	cmnmi.w	r0, #0
 800060a:	bd01      	pop	{r0, pc}

0800060c <__aeabi_dcmpeq>:
 800060c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000610:	f7ff fff4 	bl	80005fc <__aeabi_cdcmpeq>
 8000614:	bf0c      	ite	eq
 8000616:	2001      	moveq	r0, #1
 8000618:	2000      	movne	r0, #0
 800061a:	f85d fb08 	ldr.w	pc, [sp], #8
 800061e:	bf00      	nop

08000620 <__aeabi_dcmplt>:
 8000620:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000624:	f7ff ffea 	bl	80005fc <__aeabi_cdcmpeq>
 8000628:	bf34      	ite	cc
 800062a:	2001      	movcc	r0, #1
 800062c:	2000      	movcs	r0, #0
 800062e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000632:	bf00      	nop

08000634 <__aeabi_dcmple>:
 8000634:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000638:	f7ff ffe0 	bl	80005fc <__aeabi_cdcmpeq>
 800063c:	bf94      	ite	ls
 800063e:	2001      	movls	r0, #1
 8000640:	2000      	movhi	r0, #0
 8000642:	f85d fb08 	ldr.w	pc, [sp], #8
 8000646:	bf00      	nop

08000648 <__aeabi_dcmpge>:
 8000648:	f84d ed08 	str.w	lr, [sp, #-8]!
 800064c:	f7ff ffce 	bl	80005ec <__aeabi_cdrcmple>
 8000650:	bf94      	ite	ls
 8000652:	2001      	movls	r0, #1
 8000654:	2000      	movhi	r0, #0
 8000656:	f85d fb08 	ldr.w	pc, [sp], #8
 800065a:	bf00      	nop

0800065c <__aeabi_dcmpgt>:
 800065c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000660:	f7ff ffc4 	bl	80005ec <__aeabi_cdrcmple>
 8000664:	bf34      	ite	cc
 8000666:	2001      	movcc	r0, #1
 8000668:	2000      	movcs	r0, #0
 800066a:	f85d fb08 	ldr.w	pc, [sp], #8
 800066e:	bf00      	nop

08000670 <__aeabi_d2iz>:
 8000670:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000674:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000678:	d215      	bcs.n	80006a6 <__aeabi_d2iz+0x36>
 800067a:	d511      	bpl.n	80006a0 <__aeabi_d2iz+0x30>
 800067c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000680:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000684:	d912      	bls.n	80006ac <__aeabi_d2iz+0x3c>
 8000686:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800068a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800068e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000692:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000696:	fa23 f002 	lsr.w	r0, r3, r2
 800069a:	bf18      	it	ne
 800069c:	4240      	negne	r0, r0
 800069e:	4770      	bx	lr
 80006a0:	f04f 0000 	mov.w	r0, #0
 80006a4:	4770      	bx	lr
 80006a6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80006aa:	d105      	bne.n	80006b8 <__aeabi_d2iz+0x48>
 80006ac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80006b6:	4770      	bx	lr
 80006b8:	f04f 0000 	mov.w	r0, #0
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop

080006c0 <__aeabi_uldivmod>:
 80006c0:	b953      	cbnz	r3, 80006d8 <__aeabi_uldivmod+0x18>
 80006c2:	b94a      	cbnz	r2, 80006d8 <__aeabi_uldivmod+0x18>
 80006c4:	2900      	cmp	r1, #0
 80006c6:	bf08      	it	eq
 80006c8:	2800      	cmpeq	r0, #0
 80006ca:	bf1c      	itt	ne
 80006cc:	f04f 31ff 	movne.w	r1, #4294967295
 80006d0:	f04f 30ff 	movne.w	r0, #4294967295
 80006d4:	f000 b974 	b.w	80009c0 <__aeabi_idiv0>
 80006d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80006dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006e0:	f000 f806 	bl	80006f0 <__udivmoddi4>
 80006e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006ec:	b004      	add	sp, #16
 80006ee:	4770      	bx	lr

080006f0 <__udivmoddi4>:
 80006f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006f4:	9d08      	ldr	r5, [sp, #32]
 80006f6:	4604      	mov	r4, r0
 80006f8:	468e      	mov	lr, r1
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d14d      	bne.n	800079a <__udivmoddi4+0xaa>
 80006fe:	428a      	cmp	r2, r1
 8000700:	4694      	mov	ip, r2
 8000702:	d969      	bls.n	80007d8 <__udivmoddi4+0xe8>
 8000704:	fab2 f282 	clz	r2, r2
 8000708:	b152      	cbz	r2, 8000720 <__udivmoddi4+0x30>
 800070a:	fa01 f302 	lsl.w	r3, r1, r2
 800070e:	f1c2 0120 	rsb	r1, r2, #32
 8000712:	fa20 f101 	lsr.w	r1, r0, r1
 8000716:	fa0c fc02 	lsl.w	ip, ip, r2
 800071a:	ea41 0e03 	orr.w	lr, r1, r3
 800071e:	4094      	lsls	r4, r2
 8000720:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000724:	0c21      	lsrs	r1, r4, #16
 8000726:	fbbe f6f8 	udiv	r6, lr, r8
 800072a:	fa1f f78c 	uxth.w	r7, ip
 800072e:	fb08 e316 	mls	r3, r8, r6, lr
 8000732:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000736:	fb06 f107 	mul.w	r1, r6, r7
 800073a:	4299      	cmp	r1, r3
 800073c:	d90a      	bls.n	8000754 <__udivmoddi4+0x64>
 800073e:	eb1c 0303 	adds.w	r3, ip, r3
 8000742:	f106 30ff 	add.w	r0, r6, #4294967295
 8000746:	f080 811f 	bcs.w	8000988 <__udivmoddi4+0x298>
 800074a:	4299      	cmp	r1, r3
 800074c:	f240 811c 	bls.w	8000988 <__udivmoddi4+0x298>
 8000750:	3e02      	subs	r6, #2
 8000752:	4463      	add	r3, ip
 8000754:	1a5b      	subs	r3, r3, r1
 8000756:	b2a4      	uxth	r4, r4
 8000758:	fbb3 f0f8 	udiv	r0, r3, r8
 800075c:	fb08 3310 	mls	r3, r8, r0, r3
 8000760:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000764:	fb00 f707 	mul.w	r7, r0, r7
 8000768:	42a7      	cmp	r7, r4
 800076a:	d90a      	bls.n	8000782 <__udivmoddi4+0x92>
 800076c:	eb1c 0404 	adds.w	r4, ip, r4
 8000770:	f100 33ff 	add.w	r3, r0, #4294967295
 8000774:	f080 810a 	bcs.w	800098c <__udivmoddi4+0x29c>
 8000778:	42a7      	cmp	r7, r4
 800077a:	f240 8107 	bls.w	800098c <__udivmoddi4+0x29c>
 800077e:	4464      	add	r4, ip
 8000780:	3802      	subs	r0, #2
 8000782:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000786:	1be4      	subs	r4, r4, r7
 8000788:	2600      	movs	r6, #0
 800078a:	b11d      	cbz	r5, 8000794 <__udivmoddi4+0xa4>
 800078c:	40d4      	lsrs	r4, r2
 800078e:	2300      	movs	r3, #0
 8000790:	e9c5 4300 	strd	r4, r3, [r5]
 8000794:	4631      	mov	r1, r6
 8000796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800079a:	428b      	cmp	r3, r1
 800079c:	d909      	bls.n	80007b2 <__udivmoddi4+0xc2>
 800079e:	2d00      	cmp	r5, #0
 80007a0:	f000 80ef 	beq.w	8000982 <__udivmoddi4+0x292>
 80007a4:	2600      	movs	r6, #0
 80007a6:	e9c5 0100 	strd	r0, r1, [r5]
 80007aa:	4630      	mov	r0, r6
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	fab3 f683 	clz	r6, r3
 80007b6:	2e00      	cmp	r6, #0
 80007b8:	d14a      	bne.n	8000850 <__udivmoddi4+0x160>
 80007ba:	428b      	cmp	r3, r1
 80007bc:	d302      	bcc.n	80007c4 <__udivmoddi4+0xd4>
 80007be:	4282      	cmp	r2, r0
 80007c0:	f200 80f9 	bhi.w	80009b6 <__udivmoddi4+0x2c6>
 80007c4:	1a84      	subs	r4, r0, r2
 80007c6:	eb61 0303 	sbc.w	r3, r1, r3
 80007ca:	2001      	movs	r0, #1
 80007cc:	469e      	mov	lr, r3
 80007ce:	2d00      	cmp	r5, #0
 80007d0:	d0e0      	beq.n	8000794 <__udivmoddi4+0xa4>
 80007d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80007d6:	e7dd      	b.n	8000794 <__udivmoddi4+0xa4>
 80007d8:	b902      	cbnz	r2, 80007dc <__udivmoddi4+0xec>
 80007da:	deff      	udf	#255	; 0xff
 80007dc:	fab2 f282 	clz	r2, r2
 80007e0:	2a00      	cmp	r2, #0
 80007e2:	f040 8092 	bne.w	800090a <__udivmoddi4+0x21a>
 80007e6:	eba1 010c 	sub.w	r1, r1, ip
 80007ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007ee:	fa1f fe8c 	uxth.w	lr, ip
 80007f2:	2601      	movs	r6, #1
 80007f4:	0c20      	lsrs	r0, r4, #16
 80007f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80007fa:	fb07 1113 	mls	r1, r7, r3, r1
 80007fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000802:	fb0e f003 	mul.w	r0, lr, r3
 8000806:	4288      	cmp	r0, r1
 8000808:	d908      	bls.n	800081c <__udivmoddi4+0x12c>
 800080a:	eb1c 0101 	adds.w	r1, ip, r1
 800080e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000812:	d202      	bcs.n	800081a <__udivmoddi4+0x12a>
 8000814:	4288      	cmp	r0, r1
 8000816:	f200 80cb 	bhi.w	80009b0 <__udivmoddi4+0x2c0>
 800081a:	4643      	mov	r3, r8
 800081c:	1a09      	subs	r1, r1, r0
 800081e:	b2a4      	uxth	r4, r4
 8000820:	fbb1 f0f7 	udiv	r0, r1, r7
 8000824:	fb07 1110 	mls	r1, r7, r0, r1
 8000828:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800082c:	fb0e fe00 	mul.w	lr, lr, r0
 8000830:	45a6      	cmp	lr, r4
 8000832:	d908      	bls.n	8000846 <__udivmoddi4+0x156>
 8000834:	eb1c 0404 	adds.w	r4, ip, r4
 8000838:	f100 31ff 	add.w	r1, r0, #4294967295
 800083c:	d202      	bcs.n	8000844 <__udivmoddi4+0x154>
 800083e:	45a6      	cmp	lr, r4
 8000840:	f200 80bb 	bhi.w	80009ba <__udivmoddi4+0x2ca>
 8000844:	4608      	mov	r0, r1
 8000846:	eba4 040e 	sub.w	r4, r4, lr
 800084a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800084e:	e79c      	b.n	800078a <__udivmoddi4+0x9a>
 8000850:	f1c6 0720 	rsb	r7, r6, #32
 8000854:	40b3      	lsls	r3, r6
 8000856:	fa22 fc07 	lsr.w	ip, r2, r7
 800085a:	ea4c 0c03 	orr.w	ip, ip, r3
 800085e:	fa20 f407 	lsr.w	r4, r0, r7
 8000862:	fa01 f306 	lsl.w	r3, r1, r6
 8000866:	431c      	orrs	r4, r3
 8000868:	40f9      	lsrs	r1, r7
 800086a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800086e:	fa00 f306 	lsl.w	r3, r0, r6
 8000872:	fbb1 f8f9 	udiv	r8, r1, r9
 8000876:	0c20      	lsrs	r0, r4, #16
 8000878:	fa1f fe8c 	uxth.w	lr, ip
 800087c:	fb09 1118 	mls	r1, r9, r8, r1
 8000880:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000884:	fb08 f00e 	mul.w	r0, r8, lr
 8000888:	4288      	cmp	r0, r1
 800088a:	fa02 f206 	lsl.w	r2, r2, r6
 800088e:	d90b      	bls.n	80008a8 <__udivmoddi4+0x1b8>
 8000890:	eb1c 0101 	adds.w	r1, ip, r1
 8000894:	f108 3aff 	add.w	sl, r8, #4294967295
 8000898:	f080 8088 	bcs.w	80009ac <__udivmoddi4+0x2bc>
 800089c:	4288      	cmp	r0, r1
 800089e:	f240 8085 	bls.w	80009ac <__udivmoddi4+0x2bc>
 80008a2:	f1a8 0802 	sub.w	r8, r8, #2
 80008a6:	4461      	add	r1, ip
 80008a8:	1a09      	subs	r1, r1, r0
 80008aa:	b2a4      	uxth	r4, r4
 80008ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80008b0:	fb09 1110 	mls	r1, r9, r0, r1
 80008b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80008bc:	458e      	cmp	lr, r1
 80008be:	d908      	bls.n	80008d2 <__udivmoddi4+0x1e2>
 80008c0:	eb1c 0101 	adds.w	r1, ip, r1
 80008c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80008c8:	d26c      	bcs.n	80009a4 <__udivmoddi4+0x2b4>
 80008ca:	458e      	cmp	lr, r1
 80008cc:	d96a      	bls.n	80009a4 <__udivmoddi4+0x2b4>
 80008ce:	3802      	subs	r0, #2
 80008d0:	4461      	add	r1, ip
 80008d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008d6:	fba0 9402 	umull	r9, r4, r0, r2
 80008da:	eba1 010e 	sub.w	r1, r1, lr
 80008de:	42a1      	cmp	r1, r4
 80008e0:	46c8      	mov	r8, r9
 80008e2:	46a6      	mov	lr, r4
 80008e4:	d356      	bcc.n	8000994 <__udivmoddi4+0x2a4>
 80008e6:	d053      	beq.n	8000990 <__udivmoddi4+0x2a0>
 80008e8:	b15d      	cbz	r5, 8000902 <__udivmoddi4+0x212>
 80008ea:	ebb3 0208 	subs.w	r2, r3, r8
 80008ee:	eb61 010e 	sbc.w	r1, r1, lr
 80008f2:	fa01 f707 	lsl.w	r7, r1, r7
 80008f6:	fa22 f306 	lsr.w	r3, r2, r6
 80008fa:	40f1      	lsrs	r1, r6
 80008fc:	431f      	orrs	r7, r3
 80008fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000902:	2600      	movs	r6, #0
 8000904:	4631      	mov	r1, r6
 8000906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090a:	f1c2 0320 	rsb	r3, r2, #32
 800090e:	40d8      	lsrs	r0, r3
 8000910:	fa0c fc02 	lsl.w	ip, ip, r2
 8000914:	fa21 f303 	lsr.w	r3, r1, r3
 8000918:	4091      	lsls	r1, r2
 800091a:	4301      	orrs	r1, r0
 800091c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000920:	fa1f fe8c 	uxth.w	lr, ip
 8000924:	fbb3 f0f7 	udiv	r0, r3, r7
 8000928:	fb07 3610 	mls	r6, r7, r0, r3
 800092c:	0c0b      	lsrs	r3, r1, #16
 800092e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000932:	fb00 f60e 	mul.w	r6, r0, lr
 8000936:	429e      	cmp	r6, r3
 8000938:	fa04 f402 	lsl.w	r4, r4, r2
 800093c:	d908      	bls.n	8000950 <__udivmoddi4+0x260>
 800093e:	eb1c 0303 	adds.w	r3, ip, r3
 8000942:	f100 38ff 	add.w	r8, r0, #4294967295
 8000946:	d22f      	bcs.n	80009a8 <__udivmoddi4+0x2b8>
 8000948:	429e      	cmp	r6, r3
 800094a:	d92d      	bls.n	80009a8 <__udivmoddi4+0x2b8>
 800094c:	3802      	subs	r0, #2
 800094e:	4463      	add	r3, ip
 8000950:	1b9b      	subs	r3, r3, r6
 8000952:	b289      	uxth	r1, r1
 8000954:	fbb3 f6f7 	udiv	r6, r3, r7
 8000958:	fb07 3316 	mls	r3, r7, r6, r3
 800095c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000960:	fb06 f30e 	mul.w	r3, r6, lr
 8000964:	428b      	cmp	r3, r1
 8000966:	d908      	bls.n	800097a <__udivmoddi4+0x28a>
 8000968:	eb1c 0101 	adds.w	r1, ip, r1
 800096c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000970:	d216      	bcs.n	80009a0 <__udivmoddi4+0x2b0>
 8000972:	428b      	cmp	r3, r1
 8000974:	d914      	bls.n	80009a0 <__udivmoddi4+0x2b0>
 8000976:	3e02      	subs	r6, #2
 8000978:	4461      	add	r1, ip
 800097a:	1ac9      	subs	r1, r1, r3
 800097c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000980:	e738      	b.n	80007f4 <__udivmoddi4+0x104>
 8000982:	462e      	mov	r6, r5
 8000984:	4628      	mov	r0, r5
 8000986:	e705      	b.n	8000794 <__udivmoddi4+0xa4>
 8000988:	4606      	mov	r6, r0
 800098a:	e6e3      	b.n	8000754 <__udivmoddi4+0x64>
 800098c:	4618      	mov	r0, r3
 800098e:	e6f8      	b.n	8000782 <__udivmoddi4+0x92>
 8000990:	454b      	cmp	r3, r9
 8000992:	d2a9      	bcs.n	80008e8 <__udivmoddi4+0x1f8>
 8000994:	ebb9 0802 	subs.w	r8, r9, r2
 8000998:	eb64 0e0c 	sbc.w	lr, r4, ip
 800099c:	3801      	subs	r0, #1
 800099e:	e7a3      	b.n	80008e8 <__udivmoddi4+0x1f8>
 80009a0:	4646      	mov	r6, r8
 80009a2:	e7ea      	b.n	800097a <__udivmoddi4+0x28a>
 80009a4:	4620      	mov	r0, r4
 80009a6:	e794      	b.n	80008d2 <__udivmoddi4+0x1e2>
 80009a8:	4640      	mov	r0, r8
 80009aa:	e7d1      	b.n	8000950 <__udivmoddi4+0x260>
 80009ac:	46d0      	mov	r8, sl
 80009ae:	e77b      	b.n	80008a8 <__udivmoddi4+0x1b8>
 80009b0:	3b02      	subs	r3, #2
 80009b2:	4461      	add	r1, ip
 80009b4:	e732      	b.n	800081c <__udivmoddi4+0x12c>
 80009b6:	4630      	mov	r0, r6
 80009b8:	e709      	b.n	80007ce <__udivmoddi4+0xde>
 80009ba:	4464      	add	r4, ip
 80009bc:	3802      	subs	r0, #2
 80009be:	e742      	b.n	8000846 <__udivmoddi4+0x156>

080009c0 <__aeabi_idiv0>:
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <clear_flash>:
#include "flash_memory.h"
#include "addresses.h"

void clear_flash(uint32_t write_address)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	f5ad 6d86 	sub.w	sp, sp, #1072	; 0x430
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80009d0:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 80009d4:	6018      	str	r0, [r3, #0]
	const size_t n_addresses = 4;
 80009d6:	2304      	movs	r3, #4
 80009d8:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424

	uint32_t addresses[4] = {
 80009dc:	4b60      	ldr	r3, [pc, #384]	; (8000b60 <clear_flash+0x19c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 80009e4:	4b5f      	ldr	r3, [pc, #380]	; (8000b64 <clear_flash+0x1a0>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 80009ec:	4b5e      	ldr	r3, [pc, #376]	; (8000b68 <clear_flash+0x1a4>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 80009f4:	4b5d      	ldr	r3, [pc, #372]	; (8000b6c <clear_flash+0x1a8>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
			CLIPBOARD2_BEGIN_ADDRESS,
			CLIPBOARD3_BEGIN_ADDRESS,
			CLIPBOARD4_BEGIN_ADDRESS
	};

	char copy_buffers[4][255] = {{0}, {0}, {0}, {0}};
 80009fc:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8000a00:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8000a04:	4a5a      	ldr	r2, [pc, #360]	; (8000b70 <clear_flash+0x1ac>)
 8000a06:	4618      	mov	r0, r3
 8000a08:	4611      	mov	r1, r2
 8000a0a:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 8000a0e:	461a      	mov	r2, r3
 8000a10:	f007 f9de 	bl	8007dd0 <memcpy>
	size_t buffer_lengths[4] = {0, 0, 0, 0};
 8000a14:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8000a18:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	2300      	movs	r3, #0
 8000a20:	6013      	str	r3, [r2, #0]
 8000a22:	6053      	str	r3, [r2, #4]
 8000a24:	6093      	str	r3, [r2, #8]
 8000a26:	60d3      	str	r3, [r2, #12]

	for (size_t i = 0; i < n_addresses; ++i)
 8000a28:	2300      	movs	r3, #0
 8000a2a:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 8000a2e:	e036      	b.n	8000a9e <clear_flash+0xda>
	{
		if (addresses[i] == write_address)
 8000a30:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8000a3a:	443b      	add	r3, r7
 8000a3c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000a40:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 8000a44:	f2a2 422c 	subw	r2, r2, #1068	; 0x42c
 8000a48:	6812      	ldr	r2, [r2, #0]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d021      	beq.n	8000a92 <clear_flash+0xce>
			continue;
		else // note: metadata address is always 4 bytes before the begin address
			read_string_from_flash(copy_buffers[i], &buffer_lengths[i], addresses[i] - 0x04, addresses[i]);
 8000a4e:	f107 0118 	add.w	r1, r7, #24
 8000a52:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 8000a56:	4613      	mov	r3, r2
 8000a58:	021b      	lsls	r3, r3, #8
 8000a5a:	1a9b      	subs	r3, r3, r2
 8000a5c:	18c8      	adds	r0, r1, r3
 8000a5e:	f107 0208 	add.w	r2, r7, #8
 8000a62:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	18d1      	adds	r1, r2, r3
 8000a6a:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8000a74:	443b      	add	r3, r7
 8000a76:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000a7a:	1f1a      	subs	r2, r3, #4
 8000a7c:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8000a86:	443b      	add	r3, r7
 8000a88:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000a8c:	f000 f8dd 	bl	8000c4a <read_string_from_flash>
 8000a90:	e000      	b.n	8000a94 <clear_flash+0xd0>
			continue;
 8000a92:	bf00      	nop
	for (size_t i = 0; i < n_addresses; ++i)
 8000a94:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8000a98:	3301      	adds	r3, #1
 8000a9a:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 8000a9e:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 8000aa2:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d3c2      	bcc.n	8000a30 <clear_flash+0x6c>
	}

	HAL_FLASH_Unlock();
 8000aaa:	f000 fd89 	bl	80015c0 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 8000aae:	4b31      	ldr	r3, [pc, #196]	; (8000b74 <clear_flash+0x1b0>)
 8000ab0:	22f3      	movs	r2, #243	; 0xf3
 8000ab2:	60da      	str	r2, [r3, #12]
	FLASH_Erase_Sector(FLASH_SECTOR_7, VOLTAGE_RANGE_3);
 8000ab4:	2102      	movs	r1, #2
 8000ab6:	2007      	movs	r0, #7
 8000ab8:	f000 fef4 	bl	80018a4 <FLASH_Erase_Sector>
	HAL_FLASH_Lock();
 8000abc:	f000 fda2 	bl	8001604 <HAL_FLASH_Lock>
	// after erasing flash, copy the other addresses (besides the one we're about to write to via copy)
	for (size_t i = 0; i < n_addresses; ++i)
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 8000ac6:	e03e      	b.n	8000b46 <clear_flash+0x182>
	{
		if (addresses[i] == write_address)
 8000ac8:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8000ad2:	443b      	add	r3, r7
 8000ad4:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000ad8:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 8000adc:	f2a2 422c 	subw	r2, r2, #1068	; 0x42c
 8000ae0:	6812      	ldr	r2, [r2, #0]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d029      	beq.n	8000b3a <clear_flash+0x176>
			continue;
		else
		{
			write_metadata_to_flash(buffer_lengths[i], addresses[i] - 0x04);
 8000ae6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8000aea:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8000aee:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8000af2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000af6:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8000b00:	443b      	add	r3, r7
 8000b02:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000b06:	3b04      	subs	r3, #4
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	f000 f886 	bl	8000c1c <write_metadata_to_flash>
			write_string_to_flash(copy_buffers[i], addresses[i]);
 8000b10:	f107 0118 	add.w	r1, r7, #24
 8000b14:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8000b18:	4613      	mov	r3, r2
 8000b1a:	021b      	lsls	r3, r3, #8
 8000b1c:	1a9b      	subs	r3, r3, r2
 8000b1e:	18ca      	adds	r2, r1, r3
 8000b20:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8000b2a:	443b      	add	r3, r7
 8000b2c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000b30:	4619      	mov	r1, r3
 8000b32:	4610      	mov	r0, r2
 8000b34:	f000 f820 	bl	8000b78 <write_string_to_flash>
 8000b38:	e000      	b.n	8000b3c <clear_flash+0x178>
			continue;
 8000b3a:	bf00      	nop
	for (size_t i = 0; i < n_addresses; ++i)
 8000b3c:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8000b40:	3301      	adds	r3, #1
 8000b42:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 8000b46:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8000b4a:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d3ba      	bcc.n	8000ac8 <clear_flash+0x104>
		}
	}
}
 8000b52:	bf00      	nop
 8000b54:	bf00      	nop
 8000b56:	f507 6786 	add.w	r7, r7, #1072	; 0x430
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	08008420 	.word	0x08008420
 8000b64:	08008428 	.word	0x08008428
 8000b68:	08008430 	.word	0x08008430
 8000b6c:	08008438 	.word	0x08008438
 8000b70:	08007f90 	.word	0x08007f90
 8000b74:	40023c00 	.word	0x40023c00

08000b78 <write_string_to_flash>:

/**
 * Write character buffer to flash starting at a specified address.
 */
void write_string_to_flash(const char* buffer, uint32_t address)
{
 8000b78:	b5b0      	push	{r4, r5, r7, lr}
 8000b7a:	b088      	sub	sp, #32
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
    char write_buffer[4];
    size_t buffer_size = strlen(buffer);
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f7ff fb28 	bl	80001d8 <strlen>
 8000b88:	6178      	str	r0, [r7, #20]
    size_t write_chunks = (int)ceil((float)buffer_size / 4.0f);
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	ee07 3a90 	vmov	s15, r3
 8000b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b94:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000b98:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000b9c:	ee16 0a90 	vmov	r0, s13
 8000ba0:	f7ff fc86 	bl	80004b0 <__aeabi_f2d>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	ec43 2b10 	vmov	d0, r2, r3
 8000bac:	f007 f960 	bl	8007e70 <ceil>
 8000bb0:	ec53 2b10 	vmov	r2, r3, d0
 8000bb4:	4610      	mov	r0, r2
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f7ff fd5a 	bl	8000670 <__aeabi_d2iz>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	613b      	str	r3, [r7, #16]
    size_t buffer_ptr_idx = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
    uint8_t address_increment = 0x04;
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	73fb      	strb	r3, [r7, #15]

    HAL_FLASH_Unlock();
 8000bc8:	f000 fcfa 	bl	80015c0 <HAL_FLASH_Unlock>
    for (size_t chunk = 0; chunk < write_chunks; ++chunk)
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61bb      	str	r3, [r7, #24]
 8000bd0:	e01a      	b.n	8000c08 <write_string_to_flash+0x90>
    {
        memcpy(write_buffer, &buffer[buffer_ptr_idx], 4);
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	60bb      	str	r3, [r7, #8]
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, *(uint32_t*)&write_buffer);
 8000bdc:	f107 0308 	add.w	r3, r7, #8
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2200      	movs	r2, #0
 8000be4:	461c      	mov	r4, r3
 8000be6:	4615      	mov	r5, r2
 8000be8:	4622      	mov	r2, r4
 8000bea:	462b      	mov	r3, r5
 8000bec:	6839      	ldr	r1, [r7, #0]
 8000bee:	2002      	movs	r0, #2
 8000bf0:	f000 fc92 	bl	8001518 <HAL_FLASH_Program>
        address += address_increment;
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	683a      	ldr	r2, [r7, #0]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	603b      	str	r3, [r7, #0]
        buffer_ptr_idx += 4;
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	3304      	adds	r3, #4
 8000c00:	61fb      	str	r3, [r7, #28]
    for (size_t chunk = 0; chunk < write_chunks; ++chunk)
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	3301      	adds	r3, #1
 8000c06:	61bb      	str	r3, [r7, #24]
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d3e0      	bcc.n	8000bd2 <write_string_to_flash+0x5a>
    }
    HAL_FLASH_Lock();
 8000c10:	f000 fcf8 	bl	8001604 <HAL_FLASH_Lock>
}
 8000c14:	bf00      	nop
 8000c16:	3720      	adds	r7, #32
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bdb0      	pop	{r4, r5, r7, pc}

08000c1c <write_metadata_to_flash>:

void write_metadata_to_flash(uint32_t metadata, uint32_t address)
{
 8000c1c:	b5b0      	push	{r4, r5, r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 8000c26:	f000 fccb 	bl	80015c0 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, metadata);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	461c      	mov	r4, r3
 8000c30:	4615      	mov	r5, r2
 8000c32:	4622      	mov	r2, r4
 8000c34:	462b      	mov	r3, r5
 8000c36:	6839      	ldr	r1, [r7, #0]
 8000c38:	2002      	movs	r0, #2
 8000c3a:	f000 fc6d 	bl	8001518 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8000c3e:	f000 fce1 	bl	8001604 <HAL_FLASH_Lock>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bdb0      	pop	{r4, r5, r7, pc}

08000c4a <read_string_from_flash>:

void read_string_from_flash(char buffer[256], size_t* buffer_len, uint32_t metadata_address, uint32_t buffer_address)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b086      	sub	sp, #24
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	60f8      	str	r0, [r7, #12]
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
 8000c56:	603b      	str	r3, [r7, #0]
	// if block is empty, do nothing (otherwise it hangs forever/crashes)
	if (*(uint32_t*)buffer_address == 0xFFFFFFFF)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c60:	d00d      	beq.n	8000c7e <read_string_from_flash+0x34>
		return;

	*buffer_len = *(uint32_t*)metadata_address; // dereference value at metadata address to extract value of metadata (length of buffer)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	601a      	str	r2, [r3, #0]
	char* text = (char*)buffer_address;
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	617b      	str	r3, [r7, #20]
	strncat(buffer, text, *buffer_len);
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	6979      	ldr	r1, [r7, #20]
 8000c76:	68f8      	ldr	r0, [r7, #12]
 8000c78:	f007 f8c0 	bl	8007dfc <strncat>
 8000c7c:	e000      	b.n	8000c80 <read_string_from_flash+0x36>
		return;
 8000c7e:	bf00      	nop
}
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c8e:	f000 fa9b 	bl	80011c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c92:	f000 f8a9 	bl	8000de8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c96:	f000 f90f 	bl	8000eb8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000c9a:	f006 faab 	bl	80071f4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  bool button_pressed = false;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
	  // COPY BUTTONS
	  if (HAL_GPIO_ReadPin(GPIOA, Copy_Button_1_Pin))
 8000ca2:	2102      	movs	r1, #2
 8000ca4:	4842      	ldr	r0, [pc, #264]	; (8000db0 <main+0x128>)
 8000ca6:	f000 ffc9 	bl	8001c3c <HAL_GPIO_ReadPin>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d005      	beq.n	8000cbc <main+0x34>
		  button_pressed = send_command_to_server("COPY1");
 8000cb0:	4840      	ldr	r0, [pc, #256]	; (8000db4 <main+0x12c>)
 8000cb2:	f000 f9b3 	bl	800101c <send_command_to_server>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
 8000cba:	e06f      	b.n	8000d9c <main+0x114>
	  else if (HAL_GPIO_ReadPin(GPIOA, Copy_Button_2_Pin))
 8000cbc:	2108      	movs	r1, #8
 8000cbe:	483c      	ldr	r0, [pc, #240]	; (8000db0 <main+0x128>)
 8000cc0:	f000 ffbc 	bl	8001c3c <HAL_GPIO_ReadPin>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d005      	beq.n	8000cd6 <main+0x4e>
		  button_pressed = send_command_to_server("COPY2");
 8000cca:	483b      	ldr	r0, [pc, #236]	; (8000db8 <main+0x130>)
 8000ccc:	f000 f9a6 	bl	800101c <send_command_to_server>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	71fb      	strb	r3, [r7, #7]
 8000cd4:	e062      	b.n	8000d9c <main+0x114>
	  else if (HAL_GPIO_ReadPin(GPIOA, Copy_Button_3_Pin))
 8000cd6:	2120      	movs	r1, #32
 8000cd8:	4835      	ldr	r0, [pc, #212]	; (8000db0 <main+0x128>)
 8000cda:	f000 ffaf 	bl	8001c3c <HAL_GPIO_ReadPin>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d005      	beq.n	8000cf0 <main+0x68>
		  button_pressed = send_command_to_server("COPY3");
 8000ce4:	4835      	ldr	r0, [pc, #212]	; (8000dbc <main+0x134>)
 8000ce6:	f000 f999 	bl	800101c <send_command_to_server>
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
 8000cee:	e055      	b.n	8000d9c <main+0x114>
	  else if (HAL_GPIO_ReadPin(GPIOA, Copy_Button_4_Pin))
 8000cf0:	2180      	movs	r1, #128	; 0x80
 8000cf2:	482f      	ldr	r0, [pc, #188]	; (8000db0 <main+0x128>)
 8000cf4:	f000 ffa2 	bl	8001c3c <HAL_GPIO_ReadPin>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d005      	beq.n	8000d0a <main+0x82>
		  button_pressed = send_command_to_server("COPY4");
 8000cfe:	4830      	ldr	r0, [pc, #192]	; (8000dc0 <main+0x138>)
 8000d00:	f000 f98c 	bl	800101c <send_command_to_server>
 8000d04:	4603      	mov	r3, r0
 8000d06:	71fb      	strb	r3, [r7, #7]
 8000d08:	e048      	b.n	8000d9c <main+0x114>

	  // PASTE BUTTONS
	  else if (HAL_GPIO_ReadPin(GPIOB, Paste_Button_1_Pin))
 8000d0a:	2140      	movs	r1, #64	; 0x40
 8000d0c:	482d      	ldr	r0, [pc, #180]	; (8000dc4 <main+0x13c>)
 8000d0e:	f000 ff95 	bl	8001c3c <HAL_GPIO_ReadPin>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d00a      	beq.n	8000d2e <main+0xa6>
		  button_pressed = send_flash_buffer_to_server(CLIPBOARD1_METADATA_ADDRESS, CLIPBOARD1_BEGIN_ADDRESS);
 8000d18:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <main+0x140>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a2b      	ldr	r2, [pc, #172]	; (8000dcc <main+0x144>)
 8000d1e:	6812      	ldr	r2, [r2, #0]
 8000d20:	4611      	mov	r1, r2
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 f920 	bl	8000f68 <send_flash_buffer_to_server>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	71fb      	strb	r3, [r7, #7]
 8000d2c:	e036      	b.n	8000d9c <main+0x114>
	  else if (HAL_GPIO_ReadPin(GPIOB, Paste_Button_2_Pin))
 8000d2e:	2110      	movs	r1, #16
 8000d30:	4824      	ldr	r0, [pc, #144]	; (8000dc4 <main+0x13c>)
 8000d32:	f000 ff83 	bl	8001c3c <HAL_GPIO_ReadPin>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d00a      	beq.n	8000d52 <main+0xca>
		  button_pressed = send_flash_buffer_to_server(CLIPBOARD2_METADATA_ADDRESS, CLIPBOARD2_BEGIN_ADDRESS);
 8000d3c:	4b24      	ldr	r3, [pc, #144]	; (8000dd0 <main+0x148>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a24      	ldr	r2, [pc, #144]	; (8000dd4 <main+0x14c>)
 8000d42:	6812      	ldr	r2, [r2, #0]
 8000d44:	4611      	mov	r1, r2
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f90e 	bl	8000f68 <send_flash_buffer_to_server>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	71fb      	strb	r3, [r7, #7]
 8000d50:	e024      	b.n	8000d9c <main+0x114>
	  else if (HAL_GPIO_ReadPin(GPIOA, Paste_Button_3_Pin))
 8000d52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d56:	4816      	ldr	r0, [pc, #88]	; (8000db0 <main+0x128>)
 8000d58:	f000 ff70 	bl	8001c3c <HAL_GPIO_ReadPin>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d00a      	beq.n	8000d78 <main+0xf0>
		  button_pressed = send_flash_buffer_to_server(CLIPBOARD3_METADATA_ADDRESS, CLIPBOARD3_BEGIN_ADDRESS);
 8000d62:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <main+0x150>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a1d      	ldr	r2, [pc, #116]	; (8000ddc <main+0x154>)
 8000d68:	6812      	ldr	r2, [r2, #0]
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 f8fb 	bl	8000f68 <send_flash_buffer_to_server>
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
 8000d76:	e011      	b.n	8000d9c <main+0x114>
	  else if (HAL_GPIO_ReadPin(GPIOA, Paste_Button_4_Pin))
 8000d78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d7c:	480c      	ldr	r0, [pc, #48]	; (8000db0 <main+0x128>)
 8000d7e:	f000 ff5d 	bl	8001c3c <HAL_GPIO_ReadPin>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d009      	beq.n	8000d9c <main+0x114>
		  button_pressed = send_flash_buffer_to_server(CLIPBOARD4_METADATA_ADDRESS, CLIPBOARD4_BEGIN_ADDRESS);
 8000d88:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <main+0x158>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a15      	ldr	r2, [pc, #84]	; (8000de4 <main+0x15c>)
 8000d8e:	6812      	ldr	r2, [r2, #0]
 8000d90:	4611      	mov	r1, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f8e8 	bl	8000f68 <send_flash_buffer_to_server>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	71fb      	strb	r3, [r7, #7]

	  if (button_pressed)
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f43f af7f 	beq.w	8000ca2 <main+0x1a>
	  {
		  HAL_Delay(200);
 8000da4:	20c8      	movs	r0, #200	; 0xc8
 8000da6:	f000 fa81 	bl	80012ac <HAL_Delay>
		  button_pressed = false;
 8000daa:	2300      	movs	r3, #0
 8000dac:	71fb      	strb	r3, [r7, #7]
	  if (HAL_GPIO_ReadPin(GPIOA, Copy_Button_1_Pin))
 8000dae:	e778      	b.n	8000ca2 <main+0x1a>
 8000db0:	40020000 	.word	0x40020000
 8000db4:	0800838c 	.word	0x0800838c
 8000db8:	08008394 	.word	0x08008394
 8000dbc:	0800839c 	.word	0x0800839c
 8000dc0:	080083a4 	.word	0x080083a4
 8000dc4:	40020400 	.word	0x40020400
 8000dc8:	0800841c 	.word	0x0800841c
 8000dcc:	08008420 	.word	0x08008420
 8000dd0:	08008424 	.word	0x08008424
 8000dd4:	08008428 	.word	0x08008428
 8000dd8:	0800842c 	.word	0x0800842c
 8000ddc:	08008430 	.word	0x08008430
 8000de0:	08008434 	.word	0x08008434
 8000de4:	08008438 	.word	0x08008438

08000de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b094      	sub	sp, #80	; 0x50
 8000dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dee:	f107 0320 	add.w	r3, r7, #32
 8000df2:	2230      	movs	r2, #48	; 0x30
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f006 fff8 	bl	8007dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <SystemClock_Config+0xc8>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	4a26      	ldr	r2, [pc, #152]	; (8000eb0 <SystemClock_Config+0xc8>)
 8000e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1c:	4b24      	ldr	r3, [pc, #144]	; (8000eb0 <SystemClock_Config+0xc8>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e28:	2300      	movs	r3, #0
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <SystemClock_Config+0xcc>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a20      	ldr	r2, [pc, #128]	; (8000eb4 <SystemClock_Config+0xcc>)
 8000e32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e36:	6013      	str	r3, [r2, #0]
 8000e38:	4b1e      	ldr	r3, [pc, #120]	; (8000eb4 <SystemClock_Config+0xcc>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e44:	2301      	movs	r3, #1
 8000e46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000e58:	230f      	movs	r3, #15
 8000e5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000e5c:	2390      	movs	r3, #144	; 0x90
 8000e5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e60:	2304      	movs	r3, #4
 8000e62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000e64:	2305      	movs	r3, #5
 8000e66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e68:	f107 0320 	add.w	r3, r7, #32
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f002 f97b 	bl	8003168 <HAL_RCC_OscConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e78:	f000 f909 	bl	800108e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e7c:	230f      	movs	r3, #15
 8000e7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e80:	2302      	movs	r3, #2
 8000e82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e92:	f107 030c 	add.w	r3, r7, #12
 8000e96:	2101      	movs	r1, #1
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f002 fbdd 	bl	8003658 <HAL_RCC_ClockConfig>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ea4:	f000 f8f3 	bl	800108e <Error_Handler>
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	3750      	adds	r7, #80	; 0x50
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40007000 	.word	0x40007000

08000eb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebe:	f107 030c 	add.w	r3, r7, #12
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <MX_GPIO_Init+0xa4>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a21      	ldr	r2, [pc, #132]	; (8000f5c <MX_GPIO_Init+0xa4>)
 8000ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <MX_GPIO_Init+0xa4>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <MX_GPIO_Init+0xa4>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a1a      	ldr	r2, [pc, #104]	; (8000f5c <MX_GPIO_Init+0xa4>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <MX_GPIO_Init+0xa4>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	603b      	str	r3, [r7, #0]
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <MX_GPIO_Init+0xa4>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a13      	ldr	r2, [pc, #76]	; (8000f5c <MX_GPIO_Init+0xa4>)
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_GPIO_Init+0xa4>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : Copy_Button_1_Pin Copy_Button_2_Pin Copy_Button_3_Pin Copy_Button_4_Pin
                           Paste_Button_4_Pin Paste_Button_3_Pin */
  GPIO_InitStruct.Pin = Copy_Button_1_Pin|Copy_Button_2_Pin|Copy_Button_3_Pin|Copy_Button_4_Pin
 8000f22:	f248 43aa 	movw	r3, #33962	; 0x84aa
 8000f26:	60fb      	str	r3, [r7, #12]
                          |Paste_Button_4_Pin|Paste_Button_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	4619      	mov	r1, r3
 8000f36:	480a      	ldr	r0, [pc, #40]	; (8000f60 <MX_GPIO_Init+0xa8>)
 8000f38:	f000 fcfc 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pins : Paste_Button_2_Pin Paste_Button_1_Pin */
  GPIO_InitStruct.Pin = Paste_Button_2_Pin|Paste_Button_1_Pin;
 8000f3c:	2350      	movs	r3, #80	; 0x50
 8000f3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f40:	2300      	movs	r3, #0
 8000f42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MX_GPIO_Init+0xac>)
 8000f50:	f000 fcf0 	bl	8001934 <HAL_GPIO_Init>

}
 8000f54:	bf00      	nop
 8000f56:	3720      	adds	r7, #32
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40020000 	.word	0x40020000
 8000f64:	40020400 	.word	0x40020400

08000f68 <send_flash_buffer_to_server>:

/* USER CODE BEGIN 4 */
static bool send_flash_buffer_to_server(uint32_t metadata_address, uint32_t begin_address)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f74:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f78:	6018      	str	r0, [r3, #0]
 8000f7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f7e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8000f82:	6019      	str	r1, [r3, #0]
	char read_flash_data[256] = {0};
 8000f84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f88:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	3304      	adds	r3, #4
 8000f92:	22fc      	movs	r2, #252	; 0xfc
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f006 ff28 	bl	8007dec <memset>
	char send_server_data[256] = {0};
 8000f9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fa0:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	22fc      	movs	r2, #252	; 0xfc
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f006 ff1c 	bl	8007dec <memset>
	read_string_from_flash(read_flash_data, NULL, metadata_address, begin_address);
 8000fb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fb8:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8000fbc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8000fc0:	f5a2 7201 	sub.w	r2, r2, #516	; 0x204
 8000fc4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	6812      	ldr	r2, [r2, #0]
 8000fcc:	2100      	movs	r1, #0
 8000fce:	f7ff fe3c 	bl	8000c4a <read_string_from_flash>
	strncpy(send_server_data, "PASTE", 6);
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	4a10      	ldr	r2, [pc, #64]	; (8001018 <send_flash_buffer_to_server+0xb0>)
 8000fd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fdc:	6018      	str	r0, [r3, #0]
 8000fde:	3304      	adds	r3, #4
 8000fe0:	8019      	strh	r1, [r3, #0]
	strncat(send_server_data, read_flash_data, 255);
 8000fe2:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8000fe6:	f107 0308 	add.w	r3, r7, #8
 8000fea:	22ff      	movs	r2, #255	; 0xff
 8000fec:	4618      	mov	r0, r3
 8000fee:	f006 ff05 	bl	8007dfc <strncat>
	CDC_Transmit_FS((uint8_t*)send_server_data, strlen(send_server_data));
 8000ff2:	f107 0308 	add.w	r3, r7, #8
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff f8ee 	bl	80001d8 <strlen>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	f107 0308 	add.w	r3, r7, #8
 8001004:	4611      	mov	r1, r2
 8001006:	4618      	mov	r0, r3
 8001008:	f006 fa16 	bl	8007438 <CDC_Transmit_FS>

	return true;
 800100c:	2301      	movs	r3, #1
}
 800100e:	4618      	mov	r0, r3
 8001010:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	080083ac 	.word	0x080083ac

0800101c <send_command_to_server>:

static bool send_command_to_server(const char* command)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b0c2      	sub	sp, #264	; 0x108
 8001020:	af00      	add	r7, sp, #0
 8001022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001026:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800102a:	6018      	str	r0, [r3, #0]
	char data[256] = {0};
 800102c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001030:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	3304      	adds	r3, #4
 800103a:	22fc      	movs	r2, #252	; 0xfc
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f006 fed4 	bl	8007dec <memset>
	strncpy(data, command, strlen(command) + 1);
 8001044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001048:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800104c:	6818      	ldr	r0, [r3, #0]
 800104e:	f7ff f8c3 	bl	80001d8 <strlen>
 8001052:	4603      	mov	r3, r0
 8001054:	1c5a      	adds	r2, r3, #1
 8001056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800105a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800105e:	f107 0008 	add.w	r0, r7, #8
 8001062:	6819      	ldr	r1, [r3, #0]
 8001064:	f006 fef1 	bl	8007e4a <strncpy>
	CDC_Transmit_FS((uint8_t*)data, strlen(data));
 8001068:	f107 0308 	add.w	r3, r7, #8
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff f8b3 	bl	80001d8 <strlen>
 8001072:	4603      	mov	r3, r0
 8001074:	b29a      	uxth	r2, r3
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	4611      	mov	r1, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f006 f9db 	bl	8007438 <CDC_Transmit_FS>

	return true;
 8001082:	2301      	movs	r3, #1
}
 8001084:	4618      	mov	r0, r3
 8001086:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001092:	b672      	cpsid	i
}
 8001094:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001096:	e7fe      	b.n	8001096 <Error_Handler+0x8>

08001098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <HAL_MspInit+0x4c>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	4a0f      	ldr	r2, [pc, #60]	; (80010e4 <HAL_MspInit+0x4c>)
 80010a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ac:	6453      	str	r3, [r2, #68]	; 0x44
 80010ae:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <HAL_MspInit+0x4c>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	603b      	str	r3, [r7, #0]
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <HAL_MspInit+0x4c>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	4a08      	ldr	r2, [pc, #32]	; (80010e4 <HAL_MspInit+0x4c>)
 80010c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_MspInit+0x4c>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800

080010e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010ec:	e7fe      	b.n	80010ec <NMI_Handler+0x4>

080010ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <HardFault_Handler+0x4>

080010f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <MemManage_Handler+0x4>

080010fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <BusFault_Handler+0x4>

08001100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <UsageFault_Handler+0x4>

08001106 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001134:	f000 f89a 	bl	800126c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}

0800113c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <OTG_FS_IRQHandler+0x10>)
 8001142:	f000 fee3 	bl	8001f0c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	2000161c 	.word	0x2000161c

08001150 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <SystemInit+0x20>)
 8001156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115a:	4a05      	ldr	r2, [pc, #20]	; (8001170 <SystemInit+0x20>)
 800115c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001160:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001174:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001178:	480d      	ldr	r0, [pc, #52]	; (80011b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800117a:	490e      	ldr	r1, [pc, #56]	; (80011b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800117c:	4a0e      	ldr	r2, [pc, #56]	; (80011b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001180:	e002      	b.n	8001188 <LoopCopyDataInit>

08001182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001186:	3304      	adds	r3, #4

08001188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800118c:	d3f9      	bcc.n	8001182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118e:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001190:	4c0b      	ldr	r4, [pc, #44]	; (80011c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001194:	e001      	b.n	800119a <LoopFillZerobss>

08001196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001198:	3204      	adds	r2, #4

0800119a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800119c:	d3fb      	bcc.n	8001196 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800119e:	f7ff ffd7 	bl	8001150 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011a2:	f006 fdf1 	bl	8007d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011a6:	f7ff fd6f 	bl	8000c88 <main>
  bx  lr    
 80011aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b4:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80011b8:	0800845c 	.word	0x0800845c
  ldr r2, =_sbss
 80011bc:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80011c0:	20001d48 	.word	0x20001d48

080011c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c4:	e7fe      	b.n	80011c4 <ADC_IRQHandler>
	...

080011c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011cc:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <HAL_Init+0x40>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a0d      	ldr	r2, [pc, #52]	; (8001208 <HAL_Init+0x40>)
 80011d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <HAL_Init+0x40>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <HAL_Init+0x40>)
 80011de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <HAL_Init+0x40>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a07      	ldr	r2, [pc, #28]	; (8001208 <HAL_Init+0x40>)
 80011ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f0:	2003      	movs	r0, #3
 80011f2:	f000 f94f 	bl	8001494 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f6:	200f      	movs	r0, #15
 80011f8:	f000 f808 	bl	800120c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011fc:	f7ff ff4c 	bl	8001098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40023c00 	.word	0x40023c00

0800120c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_InitTick+0x54>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_InitTick+0x58>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001222:	fbb3 f3f1 	udiv	r3, r3, r1
 8001226:	fbb2 f3f3 	udiv	r3, r2, r3
 800122a:	4618      	mov	r0, r3
 800122c:	f000 f967 	bl	80014fe <HAL_SYSTICK_Config>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e00e      	b.n	8001258 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b0f      	cmp	r3, #15
 800123e:	d80a      	bhi.n	8001256 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001240:	2200      	movs	r2, #0
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	f04f 30ff 	mov.w	r0, #4294967295
 8001248:	f000 f92f 	bl	80014aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800124c:	4a06      	ldr	r2, [pc, #24]	; (8001268 <HAL_InitTick+0x5c>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001252:	2300      	movs	r3, #0
 8001254:	e000      	b.n	8001258 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000000 	.word	0x20000000
 8001264:	20000008 	.word	0x20000008
 8001268:	20000004 	.word	0x20000004

0800126c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_IncTick+0x20>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_IncTick+0x24>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4413      	add	r3, r2
 800127c:	4a04      	ldr	r2, [pc, #16]	; (8001290 <HAL_IncTick+0x24>)
 800127e:	6013      	str	r3, [r2, #0]
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20000008 	.word	0x20000008
 8001290:	20000118 	.word	0x20000118

08001294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return uwTick;
 8001298:	4b03      	ldr	r3, [pc, #12]	; (80012a8 <HAL_GetTick+0x14>)
 800129a:	681b      	ldr	r3, [r3, #0]
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	20000118 	.word	0x20000118

080012ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b4:	f7ff ffee 	bl	8001294 <HAL_GetTick>
 80012b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c4:	d005      	beq.n	80012d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <HAL_Delay+0x44>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4413      	add	r3, r2
 80012d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012d2:	bf00      	nop
 80012d4:	f7ff ffde 	bl	8001294 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d8f7      	bhi.n	80012d4 <HAL_Delay+0x28>
  {
  }
}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000008 	.word	0x20000008

080012f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <__NVIC_SetPriorityGrouping+0x44>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001310:	4013      	ands	r3, r2
 8001312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800131c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001326:	4a04      	ldr	r2, [pc, #16]	; (8001338 <__NVIC_SetPriorityGrouping+0x44>)
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	60d3      	str	r3, [r2, #12]
}
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001340:	4b04      	ldr	r3, [pc, #16]	; (8001354 <__NVIC_GetPriorityGrouping+0x18>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	0a1b      	lsrs	r3, r3, #8
 8001346:	f003 0307 	and.w	r3, r3, #7
}
 800134a:	4618      	mov	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	2b00      	cmp	r3, #0
 8001368:	db0b      	blt.n	8001382 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	f003 021f 	and.w	r2, r3, #31
 8001370:	4907      	ldr	r1, [pc, #28]	; (8001390 <__NVIC_EnableIRQ+0x38>)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	095b      	lsrs	r3, r3, #5
 8001378:	2001      	movs	r0, #1
 800137a:	fa00 f202 	lsl.w	r2, r0, r2
 800137e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000e100 	.word	0xe000e100

08001394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	6039      	str	r1, [r7, #0]
 800139e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	db0a      	blt.n	80013be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	490c      	ldr	r1, [pc, #48]	; (80013e0 <__NVIC_SetPriority+0x4c>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	0112      	lsls	r2, r2, #4
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	440b      	add	r3, r1
 80013b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013bc:	e00a      	b.n	80013d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4908      	ldr	r1, [pc, #32]	; (80013e4 <__NVIC_SetPriority+0x50>)
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	3b04      	subs	r3, #4
 80013cc:	0112      	lsls	r2, r2, #4
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	440b      	add	r3, r1
 80013d2:	761a      	strb	r2, [r3, #24]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000e100 	.word	0xe000e100
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b089      	sub	sp, #36	; 0x24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f1c3 0307 	rsb	r3, r3, #7
 8001402:	2b04      	cmp	r3, #4
 8001404:	bf28      	it	cs
 8001406:	2304      	movcs	r3, #4
 8001408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3304      	adds	r3, #4
 800140e:	2b06      	cmp	r3, #6
 8001410:	d902      	bls.n	8001418 <NVIC_EncodePriority+0x30>
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3b03      	subs	r3, #3
 8001416:	e000      	b.n	800141a <NVIC_EncodePriority+0x32>
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	f04f 32ff 	mov.w	r2, #4294967295
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43da      	mvns	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	401a      	ands	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001430:	f04f 31ff 	mov.w	r1, #4294967295
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	fa01 f303 	lsl.w	r3, r1, r3
 800143a:	43d9      	mvns	r1, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	4313      	orrs	r3, r2
         );
}
 8001442:	4618      	mov	r0, r3
 8001444:	3724      	adds	r7, #36	; 0x24
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
	...

08001450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3b01      	subs	r3, #1
 800145c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001460:	d301      	bcc.n	8001466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001462:	2301      	movs	r3, #1
 8001464:	e00f      	b.n	8001486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001466:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <SysTick_Config+0x40>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146e:	210f      	movs	r1, #15
 8001470:	f04f 30ff 	mov.w	r0, #4294967295
 8001474:	f7ff ff8e 	bl	8001394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <SysTick_Config+0x40>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147e:	4b04      	ldr	r3, [pc, #16]	; (8001490 <SysTick_Config+0x40>)
 8001480:	2207      	movs	r2, #7
 8001482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	e000e010 	.word	0xe000e010

08001494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff ff29 	bl	80012f4 <__NVIC_SetPriorityGrouping>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b086      	sub	sp, #24
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	4603      	mov	r3, r0
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
 80014b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014bc:	f7ff ff3e 	bl	800133c <__NVIC_GetPriorityGrouping>
 80014c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	68b9      	ldr	r1, [r7, #8]
 80014c6:	6978      	ldr	r0, [r7, #20]
 80014c8:	f7ff ff8e 	bl	80013e8 <NVIC_EncodePriority>
 80014cc:	4602      	mov	r2, r0
 80014ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff5d 	bl	8001394 <__NVIC_SetPriority>
}
 80014da:	bf00      	nop
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff31 	bl	8001358 <__NVIC_EnableIRQ>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff ffa2 	bl	8001450 <SysTick_Config>
 800150c:	4603      	mov	r3, r0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800152a:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <HAL_FLASH_Program+0xa0>)
 800152c:	7e1b      	ldrb	r3, [r3, #24]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d101      	bne.n	8001536 <HAL_FLASH_Program+0x1e>
 8001532:	2302      	movs	r3, #2
 8001534:	e03b      	b.n	80015ae <HAL_FLASH_Program+0x96>
 8001536:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <HAL_FLASH_Program+0xa0>)
 8001538:	2201      	movs	r2, #1
 800153a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800153c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001540:	f000 f870 	bl	8001624 <FLASH_WaitForLastOperation>
 8001544:	4603      	mov	r3, r0
 8001546:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001548:	7dfb      	ldrb	r3, [r7, #23]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d12b      	bne.n	80015a6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d105      	bne.n	8001560 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001554:	783b      	ldrb	r3, [r7, #0]
 8001556:	4619      	mov	r1, r3
 8001558:	68b8      	ldr	r0, [r7, #8]
 800155a:	f000 f91b 	bl	8001794 <FLASH_Program_Byte>
 800155e:	e016      	b.n	800158e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d105      	bne.n	8001572 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001566:	883b      	ldrh	r3, [r7, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	68b8      	ldr	r0, [r7, #8]
 800156c:	f000 f8ee 	bl	800174c <FLASH_Program_HalfWord>
 8001570:	e00d      	b.n	800158e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2b02      	cmp	r3, #2
 8001576:	d105      	bne.n	8001584 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	4619      	mov	r1, r3
 800157c:	68b8      	ldr	r0, [r7, #8]
 800157e:	f000 f8c3 	bl	8001708 <FLASH_Program_Word>
 8001582:	e004      	b.n	800158e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001584:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001588:	68b8      	ldr	r0, [r7, #8]
 800158a:	f000 f88b 	bl	80016a4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800158e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001592:	f000 f847 	bl	8001624 <FLASH_WaitForLastOperation>
 8001596:	4603      	mov	r3, r0
 8001598:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <HAL_FLASH_Program+0xa4>)
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	4a07      	ldr	r2, [pc, #28]	; (80015bc <HAL_FLASH_Program+0xa4>)
 80015a0:	f023 0301 	bic.w	r3, r3, #1
 80015a4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80015a6:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <HAL_FLASH_Program+0xa0>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	761a      	strb	r2, [r3, #24]
  
  return status;
 80015ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	2000011c 	.word	0x2000011c
 80015bc:	40023c00 	.word	0x40023c00

080015c0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_FLASH_Unlock+0x38>)
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	da0b      	bge.n	80015ea <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_FLASH_Unlock+0x38>)
 80015d4:	4a09      	ldr	r2, [pc, #36]	; (80015fc <HAL_FLASH_Unlock+0x3c>)
 80015d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80015d8:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <HAL_FLASH_Unlock+0x38>)
 80015da:	4a09      	ldr	r2, [pc, #36]	; (8001600 <HAL_FLASH_Unlock+0x40>)
 80015dc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_FLASH_Unlock+0x38>)
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	da01      	bge.n	80015ea <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80015ea:	79fb      	ldrb	r3, [r7, #7]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	40023c00 	.word	0x40023c00
 80015fc:	45670123 	.word	0x45670123
 8001600:	cdef89ab 	.word	0xcdef89ab

08001604 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <HAL_FLASH_Lock+0x1c>)
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	4a04      	ldr	r2, [pc, #16]	; (8001620 <HAL_FLASH_Lock+0x1c>)
 800160e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001612:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	40023c00 	.word	0x40023c00

08001624 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001630:	4b1a      	ldr	r3, [pc, #104]	; (800169c <FLASH_WaitForLastOperation+0x78>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001636:	f7ff fe2d 	bl	8001294 <HAL_GetTick>
 800163a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800163c:	e010      	b.n	8001660 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001644:	d00c      	beq.n	8001660 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d007      	beq.n	800165c <FLASH_WaitForLastOperation+0x38>
 800164c:	f7ff fe22 	bl	8001294 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	429a      	cmp	r2, r3
 800165a:	d201      	bcs.n	8001660 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e019      	b.n	8001694 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001660:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <FLASH_WaitForLastOperation+0x7c>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1e8      	bne.n	800163e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800166c:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <FLASH_WaitForLastOperation+0x7c>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	2b00      	cmp	r3, #0
 8001676:	d002      	beq.n	800167e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <FLASH_WaitForLastOperation+0x7c>)
 800167a:	2201      	movs	r2, #1
 800167c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800167e:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <FLASH_WaitForLastOperation+0x7c>)
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800168a:	f000 f8a5 	bl	80017d8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e000      	b.n	8001694 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
  
}  
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	2000011c 	.word	0x2000011c
 80016a0:	40023c00 	.word	0x40023c00

080016a4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <FLASH_Program_DoubleWord+0x60>)
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	4a13      	ldr	r2, [pc, #76]	; (8001704 <FLASH_Program_DoubleWord+0x60>)
 80016b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <FLASH_Program_DoubleWord+0x60>)
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	4a10      	ldr	r2, [pc, #64]	; (8001704 <FLASH_Program_DoubleWord+0x60>)
 80016c2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80016c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <FLASH_Program_DoubleWord+0x60>)
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	4a0d      	ldr	r2, [pc, #52]	; (8001704 <FLASH_Program_DoubleWord+0x60>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80016da:	f3bf 8f6f 	isb	sy
}
 80016de:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80016e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	000a      	movs	r2, r1
 80016ee:	2300      	movs	r3, #0
 80016f0:	68f9      	ldr	r1, [r7, #12]
 80016f2:	3104      	adds	r1, #4
 80016f4:	4613      	mov	r3, r2
 80016f6:	600b      	str	r3, [r1, #0]
}
 80016f8:	bf00      	nop
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	40023c00 	.word	0x40023c00

08001708 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001712:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <FLASH_Program_Word+0x40>)
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	4a0c      	ldr	r2, [pc, #48]	; (8001748 <FLASH_Program_Word+0x40>)
 8001718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800171c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <FLASH_Program_Word+0x40>)
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	4a09      	ldr	r2, [pc, #36]	; (8001748 <FLASH_Program_Word+0x40>)
 8001724:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001728:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800172a:	4b07      	ldr	r3, [pc, #28]	; (8001748 <FLASH_Program_Word+0x40>)
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	4a06      	ldr	r2, [pc, #24]	; (8001748 <FLASH_Program_Word+0x40>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	601a      	str	r2, [r3, #0]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	40023c00 	.word	0x40023c00

0800174c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001758:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <FLASH_Program_HalfWord+0x44>)
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	4a0c      	ldr	r2, [pc, #48]	; (8001790 <FLASH_Program_HalfWord+0x44>)
 800175e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001762:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001764:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <FLASH_Program_HalfWord+0x44>)
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	4a09      	ldr	r2, [pc, #36]	; (8001790 <FLASH_Program_HalfWord+0x44>)
 800176a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001770:	4b07      	ldr	r3, [pc, #28]	; (8001790 <FLASH_Program_HalfWord+0x44>)
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	4a06      	ldr	r2, [pc, #24]	; (8001790 <FLASH_Program_HalfWord+0x44>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	887a      	ldrh	r2, [r7, #2]
 8001780:	801a      	strh	r2, [r3, #0]
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40023c00 	.word	0x40023c00

08001794 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <FLASH_Program_Byte+0x40>)
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	4a0b      	ldr	r2, [pc, #44]	; (80017d4 <FLASH_Program_Byte+0x40>)
 80017a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <FLASH_Program_Byte+0x40>)
 80017ae:	4a09      	ldr	r2, [pc, #36]	; (80017d4 <FLASH_Program_Byte+0x40>)
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <FLASH_Program_Byte+0x40>)
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	4a06      	ldr	r2, [pc, #24]	; (80017d4 <FLASH_Program_Byte+0x40>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	78fa      	ldrb	r2, [r7, #3]
 80017c4:	701a      	strb	r2, [r3, #0]
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40023c00 	.word	0x40023c00

080017d8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80017dc:	4b2f      	ldr	r3, [pc, #188]	; (800189c <FLASH_SetErrorCode+0xc4>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	f003 0310 	and.w	r3, r3, #16
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d008      	beq.n	80017fa <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80017e8:	4b2d      	ldr	r3, [pc, #180]	; (80018a0 <FLASH_SetErrorCode+0xc8>)
 80017ea:	69db      	ldr	r3, [r3, #28]
 80017ec:	f043 0310 	orr.w	r3, r3, #16
 80017f0:	4a2b      	ldr	r2, [pc, #172]	; (80018a0 <FLASH_SetErrorCode+0xc8>)
 80017f2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80017f4:	4b29      	ldr	r3, [pc, #164]	; (800189c <FLASH_SetErrorCode+0xc4>)
 80017f6:	2210      	movs	r2, #16
 80017f8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80017fa:	4b28      	ldr	r3, [pc, #160]	; (800189c <FLASH_SetErrorCode+0xc4>)
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	f003 0320 	and.w	r3, r3, #32
 8001802:	2b00      	cmp	r3, #0
 8001804:	d008      	beq.n	8001818 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001806:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <FLASH_SetErrorCode+0xc8>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	f043 0308 	orr.w	r3, r3, #8
 800180e:	4a24      	ldr	r2, [pc, #144]	; (80018a0 <FLASH_SetErrorCode+0xc8>)
 8001810:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001812:	4b22      	ldr	r3, [pc, #136]	; (800189c <FLASH_SetErrorCode+0xc4>)
 8001814:	2220      	movs	r2, #32
 8001816:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001818:	4b20      	ldr	r3, [pc, #128]	; (800189c <FLASH_SetErrorCode+0xc4>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001820:	2b00      	cmp	r3, #0
 8001822:	d008      	beq.n	8001836 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001824:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <FLASH_SetErrorCode+0xc8>)
 8001826:	69db      	ldr	r3, [r3, #28]
 8001828:	f043 0304 	orr.w	r3, r3, #4
 800182c:	4a1c      	ldr	r2, [pc, #112]	; (80018a0 <FLASH_SetErrorCode+0xc8>)
 800182e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001830:	4b1a      	ldr	r3, [pc, #104]	; (800189c <FLASH_SetErrorCode+0xc4>)
 8001832:	2240      	movs	r2, #64	; 0x40
 8001834:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001836:	4b19      	ldr	r3, [pc, #100]	; (800189c <FLASH_SetErrorCode+0xc4>)
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183e:	2b00      	cmp	r3, #0
 8001840:	d008      	beq.n	8001854 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001842:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <FLASH_SetErrorCode+0xc8>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	f043 0302 	orr.w	r3, r3, #2
 800184a:	4a15      	ldr	r2, [pc, #84]	; (80018a0 <FLASH_SetErrorCode+0xc8>)
 800184c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800184e:	4b13      	ldr	r3, [pc, #76]	; (800189c <FLASH_SetErrorCode+0xc4>)
 8001850:	2280      	movs	r2, #128	; 0x80
 8001852:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <FLASH_SetErrorCode+0xc4>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185c:	2b00      	cmp	r3, #0
 800185e:	d009      	beq.n	8001874 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <FLASH_SetErrorCode+0xc8>)
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	4a0d      	ldr	r2, [pc, #52]	; (80018a0 <FLASH_SetErrorCode+0xc8>)
 800186a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <FLASH_SetErrorCode+0xc4>)
 800186e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001872:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <FLASH_SetErrorCode+0xc4>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d008      	beq.n	8001892 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001880:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <FLASH_SetErrorCode+0xc8>)
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	f043 0320 	orr.w	r3, r3, #32
 8001888:	4a05      	ldr	r2, [pc, #20]	; (80018a0 <FLASH_SetErrorCode+0xc8>)
 800188a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800188c:	4b03      	ldr	r3, [pc, #12]	; (800189c <FLASH_SetErrorCode+0xc4>)
 800188e:	2202      	movs	r2, #2
 8001890:	60da      	str	r2, [r3, #12]
  }
}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	40023c00 	.word	0x40023c00
 80018a0:	2000011c 	.word	0x2000011c

080018a4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d102      	bne.n	80018c0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	e010      	b.n	80018e2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80018c0:	78fb      	ldrb	r3, [r7, #3]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d103      	bne.n	80018ce <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80018c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	e009      	b.n	80018e2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80018ce:	78fb      	ldrb	r3, [r7, #3]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d103      	bne.n	80018dc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80018d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	e002      	b.n	80018e2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80018dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018e0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80018e2:	4b13      	ldr	r3, [pc, #76]	; (8001930 <FLASH_Erase_Sector+0x8c>)
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	4a12      	ldr	r2, [pc, #72]	; (8001930 <FLASH_Erase_Sector+0x8c>)
 80018e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <FLASH_Erase_Sector+0x8c>)
 80018f0:	691a      	ldr	r2, [r3, #16]
 80018f2:	490f      	ldr	r1, [pc, #60]	; (8001930 <FLASH_Erase_Sector+0x8c>)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80018fa:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <FLASH_Erase_Sector+0x8c>)
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	4a0c      	ldr	r2, [pc, #48]	; (8001930 <FLASH_Erase_Sector+0x8c>)
 8001900:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001904:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001906:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <FLASH_Erase_Sector+0x8c>)
 8001908:	691a      	ldr	r2, [r3, #16]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	4313      	orrs	r3, r2
 8001910:	4a07      	ldr	r2, [pc, #28]	; (8001930 <FLASH_Erase_Sector+0x8c>)
 8001912:	f043 0302 	orr.w	r3, r3, #2
 8001916:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <FLASH_Erase_Sector+0x8c>)
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	4a04      	ldr	r2, [pc, #16]	; (8001930 <FLASH_Erase_Sector+0x8c>)
 800191e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001922:	6113      	str	r3, [r2, #16]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	40023c00 	.word	0x40023c00

08001934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001934:	b480      	push	{r7}
 8001936:	b089      	sub	sp, #36	; 0x24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001946:	2300      	movs	r3, #0
 8001948:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
 800194e:	e159      	b.n	8001c04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001950:	2201      	movs	r2, #1
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	4013      	ands	r3, r2
 8001962:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	429a      	cmp	r2, r3
 800196a:	f040 8148 	bne.w	8001bfe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	2b01      	cmp	r3, #1
 8001978:	d005      	beq.n	8001986 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001982:	2b02      	cmp	r3, #2
 8001984:	d130      	bne.n	80019e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	2203      	movs	r2, #3
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	68da      	ldr	r2, [r3, #12]
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019bc:	2201      	movs	r2, #1
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	091b      	lsrs	r3, r3, #4
 80019d2:	f003 0201 	and.w	r2, r3, #1
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	d017      	beq.n	8001a24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	2203      	movs	r2, #3
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d123      	bne.n	8001a78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	08da      	lsrs	r2, r3, #3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3208      	adds	r2, #8
 8001a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	220f      	movs	r2, #15
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	691a      	ldr	r2, [r3, #16]
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	08da      	lsrs	r2, r3, #3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3208      	adds	r2, #8
 8001a72:	69b9      	ldr	r1, [r7, #24]
 8001a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	2203      	movs	r2, #3
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 0203 	and.w	r2, r3, #3
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 80a2 	beq.w	8001bfe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	4b57      	ldr	r3, [pc, #348]	; (8001c1c <HAL_GPIO_Init+0x2e8>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	4a56      	ldr	r2, [pc, #344]	; (8001c1c <HAL_GPIO_Init+0x2e8>)
 8001ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aca:	4b54      	ldr	r3, [pc, #336]	; (8001c1c <HAL_GPIO_Init+0x2e8>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ad6:	4a52      	ldr	r2, [pc, #328]	; (8001c20 <HAL_GPIO_Init+0x2ec>)
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	089b      	lsrs	r3, r3, #2
 8001adc:	3302      	adds	r3, #2
 8001ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	220f      	movs	r2, #15
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a49      	ldr	r2, [pc, #292]	; (8001c24 <HAL_GPIO_Init+0x2f0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d019      	beq.n	8001b36 <HAL_GPIO_Init+0x202>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a48      	ldr	r2, [pc, #288]	; (8001c28 <HAL_GPIO_Init+0x2f4>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d013      	beq.n	8001b32 <HAL_GPIO_Init+0x1fe>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a47      	ldr	r2, [pc, #284]	; (8001c2c <HAL_GPIO_Init+0x2f8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d00d      	beq.n	8001b2e <HAL_GPIO_Init+0x1fa>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a46      	ldr	r2, [pc, #280]	; (8001c30 <HAL_GPIO_Init+0x2fc>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d007      	beq.n	8001b2a <HAL_GPIO_Init+0x1f6>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a45      	ldr	r2, [pc, #276]	; (8001c34 <HAL_GPIO_Init+0x300>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d101      	bne.n	8001b26 <HAL_GPIO_Init+0x1f2>
 8001b22:	2304      	movs	r3, #4
 8001b24:	e008      	b.n	8001b38 <HAL_GPIO_Init+0x204>
 8001b26:	2307      	movs	r3, #7
 8001b28:	e006      	b.n	8001b38 <HAL_GPIO_Init+0x204>
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e004      	b.n	8001b38 <HAL_GPIO_Init+0x204>
 8001b2e:	2302      	movs	r3, #2
 8001b30:	e002      	b.n	8001b38 <HAL_GPIO_Init+0x204>
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <HAL_GPIO_Init+0x204>
 8001b36:	2300      	movs	r3, #0
 8001b38:	69fa      	ldr	r2, [r7, #28]
 8001b3a:	f002 0203 	and.w	r2, r2, #3
 8001b3e:	0092      	lsls	r2, r2, #2
 8001b40:	4093      	lsls	r3, r2
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b48:	4935      	ldr	r1, [pc, #212]	; (8001c20 <HAL_GPIO_Init+0x2ec>)
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	089b      	lsrs	r3, r3, #2
 8001b4e:	3302      	adds	r3, #2
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b56:	4b38      	ldr	r3, [pc, #224]	; (8001c38 <HAL_GPIO_Init+0x304>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4013      	ands	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b7a:	4a2f      	ldr	r2, [pc, #188]	; (8001c38 <HAL_GPIO_Init+0x304>)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b80:	4b2d      	ldr	r3, [pc, #180]	; (8001c38 <HAL_GPIO_Init+0x304>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ba4:	4a24      	ldr	r2, [pc, #144]	; (8001c38 <HAL_GPIO_Init+0x304>)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001baa:	4b23      	ldr	r3, [pc, #140]	; (8001c38 <HAL_GPIO_Init+0x304>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bce:	4a1a      	ldr	r2, [pc, #104]	; (8001c38 <HAL_GPIO_Init+0x304>)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bd4:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <HAL_GPIO_Init+0x304>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bf8:	4a0f      	ldr	r2, [pc, #60]	; (8001c38 <HAL_GPIO_Init+0x304>)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3301      	adds	r3, #1
 8001c02:	61fb      	str	r3, [r7, #28]
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	2b0f      	cmp	r3, #15
 8001c08:	f67f aea2 	bls.w	8001950 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	bf00      	nop
 8001c10:	3724      	adds	r7, #36	; 0x24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40013800 	.word	0x40013800
 8001c24:	40020000 	.word	0x40020000
 8001c28:	40020400 	.word	0x40020400
 8001c2c:	40020800 	.word	0x40020800
 8001c30:	40020c00 	.word	0x40020c00
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40013c00 	.word	0x40013c00

08001c3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	887b      	ldrh	r3, [r7, #2]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d002      	beq.n	8001c5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c54:	2301      	movs	r3, #1
 8001c56:	73fb      	strb	r3, [r7, #15]
 8001c58:	e001      	b.n	8001c5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c6e:	b08f      	sub	sp, #60	; 0x3c
 8001c70:	af0a      	add	r7, sp, #40	; 0x28
 8001c72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e10f      	b.n	8001e9e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d106      	bne.n	8001c9e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f005 fd6b 	bl	8007774 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d102      	bne.n	8001cb8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f001 ff98 	bl	8003bf2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	687e      	ldr	r6, [r7, #4]
 8001cca:	466d      	mov	r5, sp
 8001ccc:	f106 0410 	add.w	r4, r6, #16
 8001cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cdc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ce0:	1d33      	adds	r3, r6, #4
 8001ce2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ce4:	6838      	ldr	r0, [r7, #0]
 8001ce6:	f001 fe6f 	bl	80039c8 <USB_CoreInit>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e0d0      	b.n	8001e9e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2100      	movs	r1, #0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f001 ff86 	bl	8003c14 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d08:	2300      	movs	r3, #0
 8001d0a:	73fb      	strb	r3, [r7, #15]
 8001d0c:	e04a      	b.n	8001da4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d0e:	7bfa      	ldrb	r2, [r7, #15]
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	4413      	add	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	333d      	adds	r3, #61	; 0x3d
 8001d1e:	2201      	movs	r2, #1
 8001d20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d22:	7bfa      	ldrb	r2, [r7, #15]
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	4613      	mov	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	440b      	add	r3, r1
 8001d30:	333c      	adds	r3, #60	; 0x3c
 8001d32:	7bfa      	ldrb	r2, [r7, #15]
 8001d34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d36:	7bfa      	ldrb	r2, [r7, #15]
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	b298      	uxth	r0, r3
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	4413      	add	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	440b      	add	r3, r1
 8001d48:	3344      	adds	r3, #68	; 0x44
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d4e:	7bfa      	ldrb	r2, [r7, #15]
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4413      	add	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	3340      	adds	r3, #64	; 0x40
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d62:	7bfa      	ldrb	r2, [r7, #15]
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	3348      	adds	r3, #72	; 0x48
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d76:	7bfa      	ldrb	r2, [r7, #15]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	4413      	add	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	334c      	adds	r3, #76	; 0x4c
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d8a:	7bfa      	ldrb	r2, [r7, #15]
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	4413      	add	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	440b      	add	r3, r1
 8001d98:	3354      	adds	r3, #84	; 0x54
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	3301      	adds	r3, #1
 8001da2:	73fb      	strb	r3, [r7, #15]
 8001da4:	7bfa      	ldrb	r2, [r7, #15]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d3af      	bcc.n	8001d0e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dae:	2300      	movs	r3, #0
 8001db0:	73fb      	strb	r3, [r7, #15]
 8001db2:	e044      	b.n	8001e3e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001db4:	7bfa      	ldrb	r2, [r7, #15]
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dca:	7bfa      	ldrb	r2, [r7, #15]
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001ddc:	7bfa      	ldrb	r2, [r7, #15]
 8001dde:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001de0:	7bfa      	ldrb	r2, [r7, #15]
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4413      	add	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001df2:	2200      	movs	r2, #0
 8001df4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001df6:	7bfa      	ldrb	r2, [r7, #15]
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4413      	add	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	440b      	add	r3, r1
 8001e04:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e0c:	7bfa      	ldrb	r2, [r7, #15]
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e22:	7bfa      	ldrb	r2, [r7, #15]
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	440b      	add	r3, r1
 8001e30:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	73fb      	strb	r3, [r7, #15]
 8001e3e:	7bfa      	ldrb	r2, [r7, #15]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d3b5      	bcc.n	8001db4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	603b      	str	r3, [r7, #0]
 8001e4e:	687e      	ldr	r6, [r7, #4]
 8001e50:	466d      	mov	r5, sp
 8001e52:	f106 0410 	add.w	r4, r6, #16
 8001e56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e62:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e66:	1d33      	adds	r3, r6, #4
 8001e68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e6a:	6838      	ldr	r0, [r7, #0]
 8001e6c:	f001 ff1e 	bl	8003cac <USB_DevInit>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d005      	beq.n	8001e82 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2202      	movs	r2, #2
 8001e7a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e00d      	b.n	8001e9e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f003 f86d 	bl	8004f76 <USB_DevDisconnect>

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ea6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b084      	sub	sp, #16
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d101      	bne.n	8001ec2 <HAL_PCD_Start+0x1c>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e020      	b.n	8001f04 <HAL_PCD_Start+0x5e>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d109      	bne.n	8001ee6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d005      	beq.n	8001ee6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ede:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f001 fe70 	bl	8003bd0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f003 f81d 	bl	8004f34 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f0c:	b590      	push	{r4, r7, lr}
 8001f0e:	b08d      	sub	sp, #52	; 0x34
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f1a:	6a3b      	ldr	r3, [r7, #32]
 8001f1c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f003 f8db 	bl	80050de <USB_GetMode>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f040 848a 	bne.w	8002844 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f003 f83f 	bl	8004fb8 <USB_ReadInterrupts>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 8480 	beq.w	8002842 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	0a1b      	lsrs	r3, r3, #8
 8001f4c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f003 f82c 	bl	8004fb8 <USB_ReadInterrupts>
 8001f60:	4603      	mov	r3, r0
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d107      	bne.n	8001f7a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	695a      	ldr	r2, [r3, #20]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f002 0202 	and.w	r2, r2, #2
 8001f78:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f003 f81a 	bl	8004fb8 <USB_ReadInterrupts>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f003 0310 	and.w	r3, r3, #16
 8001f8a:	2b10      	cmp	r3, #16
 8001f8c:	d161      	bne.n	8002052 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	699a      	ldr	r2, [r3, #24]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0210 	bic.w	r2, r2, #16
 8001f9c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	f003 020f 	and.w	r2, r3, #15
 8001faa:	4613      	mov	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	4413      	add	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	3304      	adds	r3, #4
 8001fbc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	0c5b      	lsrs	r3, r3, #17
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d124      	bne.n	8002014 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d035      	beq.n	8002042 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	091b      	lsrs	r3, r3, #4
 8001fde:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fe0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	6a38      	ldr	r0, [r7, #32]
 8001fea:	f002 fe51 	bl	8004c90 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	691a      	ldr	r2, [r3, #16]
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	091b      	lsrs	r3, r3, #4
 8001ff6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ffa:	441a      	add	r2, r3
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	6a1a      	ldr	r2, [r3, #32]
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	091b      	lsrs	r3, r3, #4
 8002008:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800200c:	441a      	add	r2, r3
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	621a      	str	r2, [r3, #32]
 8002012:	e016      	b.n	8002042 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	0c5b      	lsrs	r3, r3, #17
 8002018:	f003 030f 	and.w	r3, r3, #15
 800201c:	2b06      	cmp	r3, #6
 800201e:	d110      	bne.n	8002042 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002026:	2208      	movs	r2, #8
 8002028:	4619      	mov	r1, r3
 800202a:	6a38      	ldr	r0, [r7, #32]
 800202c:	f002 fe30 	bl	8004c90 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	6a1a      	ldr	r2, [r3, #32]
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	091b      	lsrs	r3, r3, #4
 8002038:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800203c:	441a      	add	r2, r3
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	699a      	ldr	r2, [r3, #24]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f042 0210 	orr.w	r2, r2, #16
 8002050:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f002 ffae 	bl	8004fb8 <USB_ReadInterrupts>
 800205c:	4603      	mov	r3, r0
 800205e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002062:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002066:	f040 80a7 	bne.w	80021b8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800206a:	2300      	movs	r3, #0
 800206c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f002 ffb3 	bl	8004fde <USB_ReadDevAllOutEpInterrupt>
 8002078:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800207a:	e099      	b.n	80021b0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800207c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 808e 	beq.w	80021a4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f002 ffd7 	bl	8005046 <USB_ReadDevOutEPInterrupt>
 8002098:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00c      	beq.n	80020be <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	015a      	lsls	r2, r3, #5
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b0:	461a      	mov	r2, r3
 80020b2:	2301      	movs	r3, #1
 80020b4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80020b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 fec3 	bl	8002e44 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	f003 0308 	and.w	r3, r3, #8
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00c      	beq.n	80020e2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	015a      	lsls	r2, r3, #5
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020d4:	461a      	mov	r2, r3
 80020d6:	2308      	movs	r3, #8
 80020d8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80020da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 ff99 	bl	8003014 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	f003 0310 	and.w	r3, r3, #16
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	015a      	lsls	r2, r3, #5
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020f8:	461a      	mov	r2, r3
 80020fa:	2310      	movs	r3, #16
 80020fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d030      	beq.n	800216a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002110:	2b80      	cmp	r3, #128	; 0x80
 8002112:	d109      	bne.n	8002128 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	69fa      	ldr	r2, [r7, #28]
 800211e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002122:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002126:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800212a:	4613      	mov	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	4413      	add	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	3304      	adds	r3, #4
 800213c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	78db      	ldrb	r3, [r3, #3]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d108      	bne.n	8002158 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2200      	movs	r2, #0
 800214a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	b2db      	uxtb	r3, r3
 8002150:	4619      	mov	r1, r3
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f005 fc0a 	bl	800796c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	4413      	add	r3, r2
 8002160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002164:	461a      	mov	r2, r3
 8002166:	2302      	movs	r3, #2
 8002168:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	f003 0320 	and.w	r3, r3, #32
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	015a      	lsls	r2, r3, #5
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	4413      	add	r3, r2
 800217c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002180:	461a      	mov	r2, r3
 8002182:	2320      	movs	r3, #32
 8002184:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d009      	beq.n	80021a4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	015a      	lsls	r2, r3, #5
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	4413      	add	r3, r2
 8002198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800219c:	461a      	mov	r2, r3
 800219e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021a2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	3301      	adds	r3, #1
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ac:	085b      	lsrs	r3, r3, #1
 80021ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f47f af62 	bne.w	800207c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f002 fefb 	bl	8004fb8 <USB_ReadInterrupts>
 80021c2:	4603      	mov	r3, r0
 80021c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80021cc:	f040 80db 	bne.w	8002386 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f002 ff1c 	bl	8005012 <USB_ReadDevAllInEpInterrupt>
 80021da:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80021e0:	e0cd      	b.n	800237e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80021e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 80c2 	beq.w	8002372 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f002 ff42 	bl	8005082 <USB_ReadDevInEPInterrupt>
 80021fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d057      	beq.n	80022ba <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	2201      	movs	r2, #1
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800221e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	43db      	mvns	r3, r3
 8002224:	69f9      	ldr	r1, [r7, #28]
 8002226:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800222a:	4013      	ands	r3, r2
 800222c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	015a      	lsls	r2, r3, #5
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	4413      	add	r3, r2
 8002236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800223a:	461a      	mov	r2, r3
 800223c:	2301      	movs	r3, #1
 800223e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d132      	bne.n	80022ae <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224c:	4613      	mov	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4413      	add	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	334c      	adds	r3, #76	; 0x4c
 8002258:	6819      	ldr	r1, [r3, #0]
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800225e:	4613      	mov	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4413      	add	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4403      	add	r3, r0
 8002268:	3348      	adds	r3, #72	; 0x48
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4419      	add	r1, r3
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002272:	4613      	mov	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	4413      	add	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4403      	add	r3, r0
 800227c:	334c      	adds	r3, #76	; 0x4c
 800227e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	2b00      	cmp	r3, #0
 8002284:	d113      	bne.n	80022ae <HAL_PCD_IRQHandler+0x3a2>
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800228a:	4613      	mov	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	4413      	add	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	440b      	add	r3, r1
 8002294:	3354      	adds	r3, #84	; 0x54
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d108      	bne.n	80022ae <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6818      	ldr	r0, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022a6:	461a      	mov	r2, r3
 80022a8:	2101      	movs	r1, #1
 80022aa:	f002 ff49 	bl	8005140 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	4619      	mov	r1, r3
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f005 fade 	bl	8007876 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d008      	beq.n	80022d6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022d0:	461a      	mov	r2, r3
 80022d2:	2308      	movs	r3, #8
 80022d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	f003 0310 	and.w	r3, r3, #16
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	015a      	lsls	r2, r3, #5
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022ec:	461a      	mov	r2, r3
 80022ee:	2310      	movs	r3, #16
 80022f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	015a      	lsls	r2, r3, #5
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	4413      	add	r3, r2
 8002304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002308:	461a      	mov	r2, r3
 800230a:	2340      	movs	r3, #64	; 0x40
 800230c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d023      	beq.n	8002360 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002318:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800231a:	6a38      	ldr	r0, [r7, #32]
 800231c:	f001 fe2a 	bl	8003f74 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4413      	add	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	3338      	adds	r3, #56	; 0x38
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	4413      	add	r3, r2
 8002330:	3304      	adds	r3, #4
 8002332:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	78db      	ldrb	r3, [r3, #3]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d108      	bne.n	800234e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	2200      	movs	r2, #0
 8002340:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	b2db      	uxtb	r3, r3
 8002346:	4619      	mov	r1, r3
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f005 fb21 	bl	8007990 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	015a      	lsls	r2, r3, #5
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	4413      	add	r3, r2
 8002356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800235a:	461a      	mov	r2, r3
 800235c:	2302      	movs	r3, #2
 800235e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800236a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 fcdb 	bl	8002d28 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	3301      	adds	r3, #1
 8002376:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237a:	085b      	lsrs	r3, r3, #1
 800237c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800237e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002380:	2b00      	cmp	r3, #0
 8002382:	f47f af2e 	bne.w	80021e2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f002 fe14 	bl	8004fb8 <USB_ReadInterrupts>
 8002390:	4603      	mov	r3, r0
 8002392:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002396:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800239a:	d122      	bne.n	80023e2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	69fa      	ldr	r2, [r7, #28]
 80023a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023aa:	f023 0301 	bic.w	r3, r3, #1
 80023ae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d108      	bne.n	80023cc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80023c2:	2100      	movs	r1, #0
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 fec3 	bl	8003150 <HAL_PCDEx_LPM_Callback>
 80023ca:	e002      	b.n	80023d2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f005 fabf 	bl	8007950 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	695a      	ldr	r2, [r3, #20]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80023e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f002 fde6 	bl	8004fb8 <USB_ReadInterrupts>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023f6:	d112      	bne.n	800241e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b01      	cmp	r3, #1
 8002406:	d102      	bne.n	800240e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f005 fa7b 	bl	8007904 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695a      	ldr	r2, [r3, #20]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800241c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f002 fdc8 	bl	8004fb8 <USB_ReadInterrupts>
 8002428:	4603      	mov	r3, r0
 800242a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800242e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002432:	f040 80b7 	bne.w	80025a4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	69fa      	ldr	r2, [r7, #28]
 8002440:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002444:	f023 0301 	bic.w	r3, r3, #1
 8002448:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2110      	movs	r1, #16
 8002450:	4618      	mov	r0, r3
 8002452:	f001 fd8f 	bl	8003f74 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002456:	2300      	movs	r3, #0
 8002458:	62fb      	str	r3, [r7, #44]	; 0x2c
 800245a:	e046      	b.n	80024ea <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800245c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245e:	015a      	lsls	r2, r3, #5
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	4413      	add	r3, r2
 8002464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002468:	461a      	mov	r2, r3
 800246a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800246e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002472:	015a      	lsls	r2, r3, #5
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	4413      	add	r3, r2
 8002478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002480:	0151      	lsls	r1, r2, #5
 8002482:	69fa      	ldr	r2, [r7, #28]
 8002484:	440a      	add	r2, r1
 8002486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800248a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800248e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002492:	015a      	lsls	r2, r3, #5
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	4413      	add	r3, r2
 8002498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800249c:	461a      	mov	r2, r3
 800249e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024a2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80024a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a6:	015a      	lsls	r2, r3, #5
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	4413      	add	r3, r2
 80024ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024b4:	0151      	lsls	r1, r2, #5
 80024b6:	69fa      	ldr	r2, [r7, #28]
 80024b8:	440a      	add	r2, r1
 80024ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80024c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024d4:	0151      	lsls	r1, r2, #5
 80024d6:	69fa      	ldr	r2, [r7, #28]
 80024d8:	440a      	add	r2, r1
 80024da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80024e2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e6:	3301      	adds	r3, #1
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d3b3      	bcc.n	800245c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	69fa      	ldr	r2, [r7, #28]
 80024fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002502:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002506:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250c:	2b00      	cmp	r3, #0
 800250e:	d016      	beq.n	800253e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002516:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800251a:	69fa      	ldr	r2, [r7, #28]
 800251c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002520:	f043 030b 	orr.w	r3, r3, #11
 8002524:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800252e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002530:	69fa      	ldr	r2, [r7, #28]
 8002532:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002536:	f043 030b 	orr.w	r3, r3, #11
 800253a:	6453      	str	r3, [r2, #68]	; 0x44
 800253c:	e015      	b.n	800256a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	69fa      	ldr	r2, [r7, #28]
 8002548:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800254c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002550:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002554:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	69fa      	ldr	r2, [r7, #28]
 8002560:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002564:	f043 030b 	orr.w	r3, r3, #11
 8002568:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	69fa      	ldr	r2, [r7, #28]
 8002574:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002578:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800257c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6818      	ldr	r0, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800258e:	461a      	mov	r2, r3
 8002590:	f002 fdd6 	bl	8005140 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695a      	ldr	r2, [r3, #20]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80025a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f002 fd05 	bl	8004fb8 <USB_ReadInterrupts>
 80025ae:	4603      	mov	r3, r0
 80025b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025b8:	d124      	bne.n	8002604 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f002 fd9b 	bl	80050fa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f001 fd50 	bl	800406e <USB_GetDevSpeed>
 80025ce:	4603      	mov	r3, r0
 80025d0:	461a      	mov	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681c      	ldr	r4, [r3, #0]
 80025da:	f001 f9e9 	bl	80039b0 <HAL_RCC_GetHCLKFreq>
 80025de:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	461a      	mov	r2, r3
 80025e8:	4620      	mov	r0, r4
 80025ea:	f001 fa4f 	bl	8003a8c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f005 f969 	bl	80078c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695a      	ldr	r2, [r3, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002602:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f002 fcd5 	bl	8004fb8 <USB_ReadInterrupts>
 800260e:	4603      	mov	r3, r0
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	2b08      	cmp	r3, #8
 8002616:	d10a      	bne.n	800262e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f005 f946 	bl	80078aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	695a      	ldr	r2, [r3, #20]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f002 0208 	and.w	r2, r2, #8
 800262c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f002 fcc0 	bl	8004fb8 <USB_ReadInterrupts>
 8002638:	4603      	mov	r3, r0
 800263a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263e:	2b80      	cmp	r3, #128	; 0x80
 8002640:	d122      	bne.n	8002688 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800264e:	2301      	movs	r3, #1
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
 8002652:	e014      	b.n	800267e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002658:	4613      	mov	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d105      	bne.n	8002678 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	b2db      	uxtb	r3, r3
 8002670:	4619      	mov	r1, r3
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 fb27 	bl	8002cc6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	3301      	adds	r3, #1
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002684:	429a      	cmp	r2, r3
 8002686:	d3e5      	bcc.n	8002654 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f002 fc93 	bl	8004fb8 <USB_ReadInterrupts>
 8002692:	4603      	mov	r3, r0
 8002694:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002698:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800269c:	d13b      	bne.n	8002716 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800269e:	2301      	movs	r3, #1
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
 80026a2:	e02b      	b.n	80026fc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b8:	4613      	mov	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4413      	add	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	3340      	adds	r3, #64	; 0x40
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d115      	bne.n	80026f6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80026ca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	da12      	bge.n	80026f6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d4:	4613      	mov	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4413      	add	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	333f      	adds	r3, #63	; 0x3f
 80026e0:	2201      	movs	r2, #1
 80026e2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	4619      	mov	r1, r3
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 fae8 	bl	8002cc6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	3301      	adds	r3, #1
 80026fa:	627b      	str	r3, [r7, #36]	; 0x24
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002702:	429a      	cmp	r2, r3
 8002704:	d3ce      	bcc.n	80026a4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695a      	ldr	r2, [r3, #20]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002714:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f002 fc4c 	bl	8004fb8 <USB_ReadInterrupts>
 8002720:	4603      	mov	r3, r0
 8002722:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002726:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800272a:	d155      	bne.n	80027d8 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800272c:	2301      	movs	r3, #1
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
 8002730:	e045      	b.n	80027be <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	015a      	lsls	r2, r3, #5
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	4413      	add	r3, r2
 800273a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002746:	4613      	mov	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	4413      	add	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d12e      	bne.n	80027b8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800275a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800275c:	2b00      	cmp	r3, #0
 800275e:	da2b      	bge.n	80027b8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800276c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002770:	429a      	cmp	r2, r3
 8002772:	d121      	bne.n	80027b8 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002778:	4613      	mov	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4413      	add	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002786:	2201      	movs	r2, #1
 8002788:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10a      	bne.n	80027b8 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	69fa      	ldr	r2, [r7, #28]
 80027ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027b4:	6053      	str	r3, [r2, #4]
            break;
 80027b6:	e007      	b.n	80027c8 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	3301      	adds	r3, #1
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d3b4      	bcc.n	8002732 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80027d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f002 fbeb 	bl	8004fb8 <USB_ReadInterrupts>
 80027e2:	4603      	mov	r3, r0
 80027e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80027e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ec:	d10a      	bne.n	8002804 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f005 f8e0 	bl	80079b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002802:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f002 fbd5 	bl	8004fb8 <USB_ReadInterrupts>
 800280e:	4603      	mov	r3, r0
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b04      	cmp	r3, #4
 8002816:	d115      	bne.n	8002844 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	2b00      	cmp	r3, #0
 8002828:	d002      	beq.n	8002830 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f005 f8d0 	bl	80079d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6859      	ldr	r1, [r3, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	430a      	orrs	r2, r1
 800283e:	605a      	str	r2, [r3, #4]
 8002840:	e000      	b.n	8002844 <HAL_PCD_IRQHandler+0x938>
      return;
 8002842:	bf00      	nop
    }
  }
}
 8002844:	3734      	adds	r7, #52	; 0x34
 8002846:	46bd      	mov	sp, r7
 8002848:	bd90      	pop	{r4, r7, pc}

0800284a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	460b      	mov	r3, r1
 8002854:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800285c:	2b01      	cmp	r3, #1
 800285e:	d101      	bne.n	8002864 <HAL_PCD_SetAddress+0x1a>
 8002860:	2302      	movs	r3, #2
 8002862:	e013      	b.n	800288c <HAL_PCD_SetAddress+0x42>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	78fa      	ldrb	r2, [r7, #3]
 8002870:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	78fa      	ldrb	r2, [r7, #3]
 800287a:	4611      	mov	r1, r2
 800287c:	4618      	mov	r0, r3
 800287e:	f002 fb33 	bl	8004ee8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	4608      	mov	r0, r1
 800289e:	4611      	mov	r1, r2
 80028a0:	461a      	mov	r2, r3
 80028a2:	4603      	mov	r3, r0
 80028a4:	70fb      	strb	r3, [r7, #3]
 80028a6:	460b      	mov	r3, r1
 80028a8:	803b      	strh	r3, [r7, #0]
 80028aa:	4613      	mov	r3, r2
 80028ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	da0f      	bge.n	80028da <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028ba:	78fb      	ldrb	r3, [r7, #3]
 80028bc:	f003 020f 	and.w	r2, r3, #15
 80028c0:	4613      	mov	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4413      	add	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	3338      	adds	r3, #56	; 0x38
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	4413      	add	r3, r2
 80028ce:	3304      	adds	r3, #4
 80028d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2201      	movs	r2, #1
 80028d6:	705a      	strb	r2, [r3, #1]
 80028d8:	e00f      	b.n	80028fa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028da:	78fb      	ldrb	r3, [r7, #3]
 80028dc:	f003 020f 	and.w	r2, r3, #15
 80028e0:	4613      	mov	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	4413      	add	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	4413      	add	r3, r2
 80028f0:	3304      	adds	r3, #4
 80028f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80028fa:	78fb      	ldrb	r3, [r7, #3]
 80028fc:	f003 030f 	and.w	r3, r3, #15
 8002900:	b2da      	uxtb	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002906:	883a      	ldrh	r2, [r7, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	78ba      	ldrb	r2, [r7, #2]
 8002910:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	785b      	ldrb	r3, [r3, #1]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d004      	beq.n	8002924 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	b29a      	uxth	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002924:	78bb      	ldrb	r3, [r7, #2]
 8002926:	2b02      	cmp	r3, #2
 8002928:	d102      	bne.n	8002930 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_PCD_EP_Open+0xaa>
 800293a:	2302      	movs	r3, #2
 800293c:	e00e      	b.n	800295c <HAL_PCD_EP_Open+0xc8>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68f9      	ldr	r1, [r7, #12]
 800294c:	4618      	mov	r0, r3
 800294e:	f001 fbb3 	bl	80040b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800295a:	7afb      	ldrb	r3, [r7, #11]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002970:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002974:	2b00      	cmp	r3, #0
 8002976:	da0f      	bge.n	8002998 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002978:	78fb      	ldrb	r3, [r7, #3]
 800297a:	f003 020f 	and.w	r2, r3, #15
 800297e:	4613      	mov	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4413      	add	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	3338      	adds	r3, #56	; 0x38
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	4413      	add	r3, r2
 800298c:	3304      	adds	r3, #4
 800298e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2201      	movs	r2, #1
 8002994:	705a      	strb	r2, [r3, #1]
 8002996:	e00f      	b.n	80029b8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002998:	78fb      	ldrb	r3, [r7, #3]
 800299a:	f003 020f 	and.w	r2, r3, #15
 800299e:	4613      	mov	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4413      	add	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	4413      	add	r3, r2
 80029ae:	3304      	adds	r3, #4
 80029b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80029b8:	78fb      	ldrb	r3, [r7, #3]
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_PCD_EP_Close+0x6e>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e00e      	b.n	80029f0 <HAL_PCD_EP_Close+0x8c>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68f9      	ldr	r1, [r7, #12]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f001 fbf1 	bl	80041c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	607a      	str	r2, [r7, #4]
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	460b      	mov	r3, r1
 8002a06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a08:	7afb      	ldrb	r3, [r7, #11]
 8002a0a:	f003 020f 	and.w	r2, r3, #15
 8002a0e:	4613      	mov	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4413      	add	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3304      	adds	r3, #4
 8002a20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2200      	movs	r2, #0
 8002a32:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2200      	movs	r2, #0
 8002a38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a3a:	7afb      	ldrb	r3, [r7, #11]
 8002a3c:	f003 030f 	and.w	r3, r3, #15
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d102      	bne.n	8002a54 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a54:	7afb      	ldrb	r3, [r7, #11]
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6818      	ldr	r0, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	461a      	mov	r2, r3
 8002a6a:	6979      	ldr	r1, [r7, #20]
 8002a6c:	f001 fed0 	bl	8004810 <USB_EP0StartXfer>
 8002a70:	e008      	b.n	8002a84 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6818      	ldr	r0, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	6979      	ldr	r1, [r7, #20]
 8002a80:	f001 fc7e 	bl	8004380 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
 8002a96:	460b      	mov	r3, r1
 8002a98:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a9a:	78fb      	ldrb	r3, [r7, #3]
 8002a9c:	f003 020f 	and.w	r2, r3, #15
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002ab0:	681b      	ldr	r3, [r3, #0]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b086      	sub	sp, #24
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	607a      	str	r2, [r7, #4]
 8002ac8:	603b      	str	r3, [r7, #0]
 8002aca:	460b      	mov	r3, r1
 8002acc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ace:	7afb      	ldrb	r3, [r7, #11]
 8002ad0:	f003 020f 	and.w	r2, r3, #15
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	4413      	add	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	3338      	adds	r3, #56	; 0x38
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2200      	movs	r2, #0
 8002af6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	2201      	movs	r2, #1
 8002afc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002afe:	7afb      	ldrb	r3, [r7, #11]
 8002b00:	f003 030f 	and.w	r3, r3, #15
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d102      	bne.n	8002b18 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b18:	7afb      	ldrb	r3, [r7, #11]
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d109      	bne.n	8002b36 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6818      	ldr	r0, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	6979      	ldr	r1, [r7, #20]
 8002b30:	f001 fe6e 	bl	8004810 <USB_EP0StartXfer>
 8002b34:	e008      	b.n	8002b48 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6818      	ldr	r0, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	461a      	mov	r2, r3
 8002b42:	6979      	ldr	r1, [r7, #20]
 8002b44:	f001 fc1c 	bl	8004380 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b084      	sub	sp, #16
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b5e:	78fb      	ldrb	r3, [r7, #3]
 8002b60:	f003 020f 	and.w	r2, r3, #15
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d901      	bls.n	8002b70 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e050      	b.n	8002c12 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	da0f      	bge.n	8002b98 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	f003 020f 	and.w	r2, r3, #15
 8002b7e:	4613      	mov	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	3338      	adds	r3, #56	; 0x38
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2201      	movs	r2, #1
 8002b94:	705a      	strb	r2, [r3, #1]
 8002b96:	e00d      	b.n	8002bb4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b98:	78fa      	ldrb	r2, [r7, #3]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	4413      	add	r3, r2
 8002baa:	3304      	adds	r3, #4
 8002bac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bba:	78fb      	ldrb	r3, [r7, #3]
 8002bbc:	f003 030f 	and.w	r3, r3, #15
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_PCD_EP_SetStall+0x82>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e01e      	b.n	8002c12 <HAL_PCD_EP_SetStall+0xc0>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68f9      	ldr	r1, [r7, #12]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f002 f8ac 	bl	8004d40 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002be8:	78fb      	ldrb	r3, [r7, #3]
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10a      	bne.n	8002c08 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6818      	ldr	r0, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	b2d9      	uxtb	r1, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c02:	461a      	mov	r2, r3
 8002c04:	f002 fa9c 	bl	8005140 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b084      	sub	sp, #16
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	460b      	mov	r3, r1
 8002c24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c26:	78fb      	ldrb	r3, [r7, #3]
 8002c28:	f003 020f 	and.w	r2, r3, #15
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d901      	bls.n	8002c38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e042      	b.n	8002cbe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	da0f      	bge.n	8002c60 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c40:	78fb      	ldrb	r3, [r7, #3]
 8002c42:	f003 020f 	and.w	r2, r3, #15
 8002c46:	4613      	mov	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	3338      	adds	r3, #56	; 0x38
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	4413      	add	r3, r2
 8002c54:	3304      	adds	r3, #4
 8002c56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	705a      	strb	r2, [r3, #1]
 8002c5e:	e00f      	b.n	8002c80 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	f003 020f 	and.w	r2, r3, #15
 8002c66:	4613      	mov	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	4413      	add	r3, r2
 8002c76:	3304      	adds	r3, #4
 8002c78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c86:	78fb      	ldrb	r3, [r7, #3]
 8002c88:	f003 030f 	and.w	r3, r3, #15
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d101      	bne.n	8002ca0 <HAL_PCD_EP_ClrStall+0x86>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e00e      	b.n	8002cbe <HAL_PCD_EP_ClrStall+0xa4>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68f9      	ldr	r1, [r7, #12]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f002 f8b4 	bl	8004e1c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b084      	sub	sp, #16
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002cd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	da0c      	bge.n	8002cf4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	f003 020f 	and.w	r2, r3, #15
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	3338      	adds	r3, #56	; 0x38
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	4413      	add	r3, r2
 8002cee:	3304      	adds	r3, #4
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	e00c      	b.n	8002d0e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cf4:	78fb      	ldrb	r3, [r7, #3]
 8002cf6:	f003 020f 	and.w	r2, r3, #15
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	4413      	add	r3, r2
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68f9      	ldr	r1, [r7, #12]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f001 fed3 	bl	8004ac0 <USB_EPStopXfer>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002d1e:	7afb      	ldrb	r3, [r7, #11]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08a      	sub	sp, #40	; 0x28
 8002d2c:	af02      	add	r7, sp, #8
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	3338      	adds	r3, #56	; 0x38
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a1a      	ldr	r2, [r3, #32]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d901      	bls.n	8002d60 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e06c      	b.n	8002e3a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	699a      	ldr	r2, [r3, #24]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	69fa      	ldr	r2, [r7, #28]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d902      	bls.n	8002d7c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	3303      	adds	r3, #3
 8002d80:	089b      	lsrs	r3, r3, #2
 8002d82:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d84:	e02b      	b.n	8002dde <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	699a      	ldr	r2, [r3, #24]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	69fa      	ldr	r2, [r7, #28]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d902      	bls.n	8002da2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	3303      	adds	r3, #3
 8002da6:	089b      	lsrs	r3, r3, #2
 8002da8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6919      	ldr	r1, [r3, #16]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	6978      	ldr	r0, [r7, #20]
 8002dc2:	f001 ff27 	bl	8004c14 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	691a      	ldr	r2, [r3, #16]
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	441a      	add	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6a1a      	ldr	r2, [r3, #32]
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	441a      	add	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d809      	bhi.n	8002e08 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6a1a      	ldr	r2, [r3, #32]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d203      	bcs.n	8002e08 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1be      	bne.n	8002d86 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	699a      	ldr	r2, [r3, #24]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d811      	bhi.n	8002e38 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	6939      	ldr	r1, [r7, #16]
 8002e30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e34:	4013      	ands	r3, r2
 8002e36:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3720      	adds	r7, #32
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	333c      	adds	r3, #60	; 0x3c
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	015a      	lsls	r2, r3, #5
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	4413      	add	r3, r2
 8002e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d17b      	bne.n	8002f72 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d015      	beq.n	8002eb0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	4a61      	ldr	r2, [pc, #388]	; (800300c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	f240 80b9 	bls.w	8003000 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 80b3 	beq.w	8003000 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	015a      	lsls	r2, r3, #5
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eac:	6093      	str	r3, [r2, #8]
 8002eae:	e0a7      	b.n	8003000 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d009      	beq.n	8002ece <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	2320      	movs	r3, #32
 8002eca:	6093      	str	r3, [r2, #8]
 8002ecc:	e098      	b.n	8003000 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f040 8093 	bne.w	8003000 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	4a4b      	ldr	r2, [pc, #300]	; (800300c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d90f      	bls.n	8002f02 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00a      	beq.n	8002f02 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	015a      	lsls	r2, r3, #5
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ef8:	461a      	mov	r2, r3
 8002efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002efe:	6093      	str	r3, [r2, #8]
 8002f00:	e07e      	b.n	8003000 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	4613      	mov	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4413      	add	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	4413      	add	r3, r2
 8002f14:	3304      	adds	r3, #4
 8002f16:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	69da      	ldr	r2, [r3, #28]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	0159      	lsls	r1, r3, #5
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	440b      	add	r3, r1
 8002f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f2e:	1ad2      	subs	r2, r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d114      	bne.n	8002f64 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d109      	bne.n	8002f56 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6818      	ldr	r0, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	2101      	movs	r1, #1
 8002f50:	f002 f8f6 	bl	8005140 <USB_EP0_OutStart>
 8002f54:	e006      	b.n	8002f64 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	691a      	ldr	r2, [r3, #16]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	441a      	add	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	4619      	mov	r1, r3
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f004 fc68 	bl	8007840 <HAL_PCD_DataOutStageCallback>
 8002f70:	e046      	b.n	8003000 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	4a26      	ldr	r2, [pc, #152]	; (8003010 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d124      	bne.n	8002fc4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00a      	beq.n	8002f9a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	015a      	lsls	r2, r3, #5
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f90:	461a      	mov	r2, r3
 8002f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f96:	6093      	str	r3, [r2, #8]
 8002f98:	e032      	b.n	8003000 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	f003 0320 	and.w	r3, r3, #32
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	015a      	lsls	r2, r3, #5
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	2320      	movs	r3, #32
 8002fb4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	4619      	mov	r1, r3
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f004 fc3f 	bl	8007840 <HAL_PCD_DataOutStageCallback>
 8002fc2:	e01d      	b.n	8003000 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d114      	bne.n	8002ff4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d108      	bne.n	8002ff4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6818      	ldr	r0, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fec:	461a      	mov	r2, r3
 8002fee:	2100      	movs	r1, #0
 8002ff0:	f002 f8a6 	bl	8005140 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f004 fc20 	bl	8007840 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3720      	adds	r7, #32
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	4f54300a 	.word	0x4f54300a
 8003010:	4f54310a 	.word	0x4f54310a

08003014 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	333c      	adds	r3, #60	; 0x3c
 800302c:	3304      	adds	r3, #4
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4413      	add	r3, r2
 800303a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4a15      	ldr	r2, [pc, #84]	; (800309c <PCD_EP_OutSetupPacket_int+0x88>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d90e      	bls.n	8003068 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003050:	2b00      	cmp	r3, #0
 8003052:	d009      	beq.n	8003068 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4413      	add	r3, r2
 800305c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003060:	461a      	mov	r2, r3
 8003062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003066:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f004 fbd7 	bl	800781c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	4a0a      	ldr	r2, [pc, #40]	; (800309c <PCD_EP_OutSetupPacket_int+0x88>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d90c      	bls.n	8003090 <PCD_EP_OutSetupPacket_int+0x7c>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d108      	bne.n	8003090 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6818      	ldr	r0, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003088:	461a      	mov	r2, r3
 800308a:	2101      	movs	r1, #1
 800308c:	f002 f858 	bl	8005140 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	4f54300a 	.word	0x4f54300a

080030a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	70fb      	strb	r3, [r7, #3]
 80030ac:	4613      	mov	r3, r2
 80030ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d107      	bne.n	80030ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80030be:	883b      	ldrh	r3, [r7, #0]
 80030c0:	0419      	lsls	r1, r3, #16
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	629a      	str	r2, [r3, #40]	; 0x28
 80030cc:	e028      	b.n	8003120 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d4:	0c1b      	lsrs	r3, r3, #16
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	4413      	add	r3, r2
 80030da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80030dc:	2300      	movs	r3, #0
 80030de:	73fb      	strb	r3, [r7, #15]
 80030e0:	e00d      	b.n	80030fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
 80030e8:	3340      	adds	r3, #64	; 0x40
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	0c1b      	lsrs	r3, r3, #16
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	4413      	add	r3, r2
 80030f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	3301      	adds	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
 80030fe:	7bfa      	ldrb	r2, [r7, #15]
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	3b01      	subs	r3, #1
 8003104:	429a      	cmp	r2, r3
 8003106:	d3ec      	bcc.n	80030e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003108:	883b      	ldrh	r3, [r7, #0]
 800310a:	0418      	lsls	r0, r3, #16
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6819      	ldr	r1, [r3, #0]
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	3b01      	subs	r3, #1
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	4302      	orrs	r2, r0
 8003118:	3340      	adds	r3, #64	; 0x40
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3714      	adds	r7, #20
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
 8003136:	460b      	mov	r3, r1
 8003138:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	887a      	ldrh	r2, [r7, #2]
 8003140:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e267      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d075      	beq.n	8003272 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003186:	4b88      	ldr	r3, [pc, #544]	; (80033a8 <HAL_RCC_OscConfig+0x240>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 030c 	and.w	r3, r3, #12
 800318e:	2b04      	cmp	r3, #4
 8003190:	d00c      	beq.n	80031ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003192:	4b85      	ldr	r3, [pc, #532]	; (80033a8 <HAL_RCC_OscConfig+0x240>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800319a:	2b08      	cmp	r3, #8
 800319c:	d112      	bne.n	80031c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800319e:	4b82      	ldr	r3, [pc, #520]	; (80033a8 <HAL_RCC_OscConfig+0x240>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031aa:	d10b      	bne.n	80031c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ac:	4b7e      	ldr	r3, [pc, #504]	; (80033a8 <HAL_RCC_OscConfig+0x240>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d05b      	beq.n	8003270 <HAL_RCC_OscConfig+0x108>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d157      	bne.n	8003270 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e242      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031cc:	d106      	bne.n	80031dc <HAL_RCC_OscConfig+0x74>
 80031ce:	4b76      	ldr	r3, [pc, #472]	; (80033a8 <HAL_RCC_OscConfig+0x240>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a75      	ldr	r2, [pc, #468]	; (80033a8 <HAL_RCC_OscConfig+0x240>)
 80031d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	e01d      	b.n	8003218 <HAL_RCC_OscConfig+0xb0>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031e4:	d10c      	bne.n	8003200 <HAL_RCC_OscConfig+0x98>
 80031e6:	4b70      	ldr	r3, [pc, #448]	; (80033a8 <HAL_RCC_OscConfig+0x240>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a6f      	ldr	r2, [pc, #444]	; (80033a8 <HAL_RCC_OscConfig+0x240>)
 80031ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	4b6d      	ldr	r3, [pc, #436]	; (80033a8 <HAL_RCC_OscConfig+0x240>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a6c      	ldr	r2, [pc, #432]	; (80033a8 <HAL_RCC_OscConfig+0x240>)
 80031f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	e00b      	b.n	8003218 <HAL_RCC_OscConfig+0xb0>
 8003200:	4b69      	ldr	r3, [pc, #420]	; (80033a8 <HAL_RCC_OscConfig+0x240>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a68      	ldr	r2, [pc, #416]	; (80033a8 <HAL_RCC_OscConfig+0x240>)
 8003206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800320a:	6013      	str	r3, [r2, #0]
 800320c:	4b66      	ldr	r3, [pc, #408]	; (80033a8 <HAL_RCC_OscConfig+0x240>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a65      	ldr	r2, [pc, #404]	; (80033a8 <HAL_RCC_OscConfig+0x240>)
 8003212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003216:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d013      	beq.n	8003248 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003220:	f7fe f838 	bl	8001294 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003228:	f7fe f834 	bl	8001294 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b64      	cmp	r3, #100	; 0x64
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e207      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800323a:	4b5b      	ldr	r3, [pc, #364]	; (80033a8 <HAL_RCC_OscConfig+0x240>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0f0      	beq.n	8003228 <HAL_RCC_OscConfig+0xc0>
 8003246:	e014      	b.n	8003272 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003248:	f7fe f824 	bl	8001294 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003250:	f7fe f820 	bl	8001294 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b64      	cmp	r3, #100	; 0x64
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e1f3      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003262:	4b51      	ldr	r3, [pc, #324]	; (80033a8 <HAL_RCC_OscConfig+0x240>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1f0      	bne.n	8003250 <HAL_RCC_OscConfig+0xe8>
 800326e:	e000      	b.n	8003272 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d063      	beq.n	8003346 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800327e:	4b4a      	ldr	r3, [pc, #296]	; (80033a8 <HAL_RCC_OscConfig+0x240>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 030c 	and.w	r3, r3, #12
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00b      	beq.n	80032a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800328a:	4b47      	ldr	r3, [pc, #284]	; (80033a8 <HAL_RCC_OscConfig+0x240>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003292:	2b08      	cmp	r3, #8
 8003294:	d11c      	bne.n	80032d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003296:	4b44      	ldr	r3, [pc, #272]	; (80033a8 <HAL_RCC_OscConfig+0x240>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d116      	bne.n	80032d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032a2:	4b41      	ldr	r3, [pc, #260]	; (80033a8 <HAL_RCC_OscConfig+0x240>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d005      	beq.n	80032ba <HAL_RCC_OscConfig+0x152>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d001      	beq.n	80032ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e1c7      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ba:	4b3b      	ldr	r3, [pc, #236]	; (80033a8 <HAL_RCC_OscConfig+0x240>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	4937      	ldr	r1, [pc, #220]	; (80033a8 <HAL_RCC_OscConfig+0x240>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ce:	e03a      	b.n	8003346 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d020      	beq.n	800331a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032d8:	4b34      	ldr	r3, [pc, #208]	; (80033ac <HAL_RCC_OscConfig+0x244>)
 80032da:	2201      	movs	r2, #1
 80032dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032de:	f7fd ffd9 	bl	8001294 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032e6:	f7fd ffd5 	bl	8001294 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e1a8      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f8:	4b2b      	ldr	r3, [pc, #172]	; (80033a8 <HAL_RCC_OscConfig+0x240>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0f0      	beq.n	80032e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003304:	4b28      	ldr	r3, [pc, #160]	; (80033a8 <HAL_RCC_OscConfig+0x240>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	4925      	ldr	r1, [pc, #148]	; (80033a8 <HAL_RCC_OscConfig+0x240>)
 8003314:	4313      	orrs	r3, r2
 8003316:	600b      	str	r3, [r1, #0]
 8003318:	e015      	b.n	8003346 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800331a:	4b24      	ldr	r3, [pc, #144]	; (80033ac <HAL_RCC_OscConfig+0x244>)
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003320:	f7fd ffb8 	bl	8001294 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003328:	f7fd ffb4 	bl	8001294 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e187      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800333a:	4b1b      	ldr	r3, [pc, #108]	; (80033a8 <HAL_RCC_OscConfig+0x240>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f0      	bne.n	8003328 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b00      	cmp	r3, #0
 8003350:	d036      	beq.n	80033c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d016      	beq.n	8003388 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800335a:	4b15      	ldr	r3, [pc, #84]	; (80033b0 <HAL_RCC_OscConfig+0x248>)
 800335c:	2201      	movs	r2, #1
 800335e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003360:	f7fd ff98 	bl	8001294 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003368:	f7fd ff94 	bl	8001294 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e167      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800337a:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <HAL_RCC_OscConfig+0x240>)
 800337c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0f0      	beq.n	8003368 <HAL_RCC_OscConfig+0x200>
 8003386:	e01b      	b.n	80033c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003388:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <HAL_RCC_OscConfig+0x248>)
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800338e:	f7fd ff81 	bl	8001294 <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003394:	e00e      	b.n	80033b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003396:	f7fd ff7d 	bl	8001294 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d907      	bls.n	80033b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e150      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
 80033a8:	40023800 	.word	0x40023800
 80033ac:	42470000 	.word	0x42470000
 80033b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b4:	4b88      	ldr	r3, [pc, #544]	; (80035d8 <HAL_RCC_OscConfig+0x470>)
 80033b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1ea      	bne.n	8003396 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 8097 	beq.w	80034fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ce:	2300      	movs	r3, #0
 80033d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033d2:	4b81      	ldr	r3, [pc, #516]	; (80035d8 <HAL_RCC_OscConfig+0x470>)
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10f      	bne.n	80033fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033de:	2300      	movs	r3, #0
 80033e0:	60bb      	str	r3, [r7, #8]
 80033e2:	4b7d      	ldr	r3, [pc, #500]	; (80035d8 <HAL_RCC_OscConfig+0x470>)
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	4a7c      	ldr	r2, [pc, #496]	; (80035d8 <HAL_RCC_OscConfig+0x470>)
 80033e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ec:	6413      	str	r3, [r2, #64]	; 0x40
 80033ee:	4b7a      	ldr	r3, [pc, #488]	; (80035d8 <HAL_RCC_OscConfig+0x470>)
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f6:	60bb      	str	r3, [r7, #8]
 80033f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033fa:	2301      	movs	r3, #1
 80033fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fe:	4b77      	ldr	r3, [pc, #476]	; (80035dc <HAL_RCC_OscConfig+0x474>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003406:	2b00      	cmp	r3, #0
 8003408:	d118      	bne.n	800343c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800340a:	4b74      	ldr	r3, [pc, #464]	; (80035dc <HAL_RCC_OscConfig+0x474>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a73      	ldr	r2, [pc, #460]	; (80035dc <HAL_RCC_OscConfig+0x474>)
 8003410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003414:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003416:	f7fd ff3d 	bl	8001294 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800341e:	f7fd ff39 	bl	8001294 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e10c      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003430:	4b6a      	ldr	r3, [pc, #424]	; (80035dc <HAL_RCC_OscConfig+0x474>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0f0      	beq.n	800341e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d106      	bne.n	8003452 <HAL_RCC_OscConfig+0x2ea>
 8003444:	4b64      	ldr	r3, [pc, #400]	; (80035d8 <HAL_RCC_OscConfig+0x470>)
 8003446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003448:	4a63      	ldr	r2, [pc, #396]	; (80035d8 <HAL_RCC_OscConfig+0x470>)
 800344a:	f043 0301 	orr.w	r3, r3, #1
 800344e:	6713      	str	r3, [r2, #112]	; 0x70
 8003450:	e01c      	b.n	800348c <HAL_RCC_OscConfig+0x324>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	2b05      	cmp	r3, #5
 8003458:	d10c      	bne.n	8003474 <HAL_RCC_OscConfig+0x30c>
 800345a:	4b5f      	ldr	r3, [pc, #380]	; (80035d8 <HAL_RCC_OscConfig+0x470>)
 800345c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345e:	4a5e      	ldr	r2, [pc, #376]	; (80035d8 <HAL_RCC_OscConfig+0x470>)
 8003460:	f043 0304 	orr.w	r3, r3, #4
 8003464:	6713      	str	r3, [r2, #112]	; 0x70
 8003466:	4b5c      	ldr	r3, [pc, #368]	; (80035d8 <HAL_RCC_OscConfig+0x470>)
 8003468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346a:	4a5b      	ldr	r2, [pc, #364]	; (80035d8 <HAL_RCC_OscConfig+0x470>)
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	6713      	str	r3, [r2, #112]	; 0x70
 8003472:	e00b      	b.n	800348c <HAL_RCC_OscConfig+0x324>
 8003474:	4b58      	ldr	r3, [pc, #352]	; (80035d8 <HAL_RCC_OscConfig+0x470>)
 8003476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003478:	4a57      	ldr	r2, [pc, #348]	; (80035d8 <HAL_RCC_OscConfig+0x470>)
 800347a:	f023 0301 	bic.w	r3, r3, #1
 800347e:	6713      	str	r3, [r2, #112]	; 0x70
 8003480:	4b55      	ldr	r3, [pc, #340]	; (80035d8 <HAL_RCC_OscConfig+0x470>)
 8003482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003484:	4a54      	ldr	r2, [pc, #336]	; (80035d8 <HAL_RCC_OscConfig+0x470>)
 8003486:	f023 0304 	bic.w	r3, r3, #4
 800348a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d015      	beq.n	80034c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003494:	f7fd fefe 	bl	8001294 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800349a:	e00a      	b.n	80034b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800349c:	f7fd fefa 	bl	8001294 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e0cb      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b2:	4b49      	ldr	r3, [pc, #292]	; (80035d8 <HAL_RCC_OscConfig+0x470>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0ee      	beq.n	800349c <HAL_RCC_OscConfig+0x334>
 80034be:	e014      	b.n	80034ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c0:	f7fd fee8 	bl	8001294 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034c6:	e00a      	b.n	80034de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c8:	f7fd fee4 	bl	8001294 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e0b5      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034de:	4b3e      	ldr	r3, [pc, #248]	; (80035d8 <HAL_RCC_OscConfig+0x470>)
 80034e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1ee      	bne.n	80034c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ea:	7dfb      	ldrb	r3, [r7, #23]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d105      	bne.n	80034fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f0:	4b39      	ldr	r3, [pc, #228]	; (80035d8 <HAL_RCC_OscConfig+0x470>)
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	4a38      	ldr	r2, [pc, #224]	; (80035d8 <HAL_RCC_OscConfig+0x470>)
 80034f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 80a1 	beq.w	8003648 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003506:	4b34      	ldr	r3, [pc, #208]	; (80035d8 <HAL_RCC_OscConfig+0x470>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 030c 	and.w	r3, r3, #12
 800350e:	2b08      	cmp	r3, #8
 8003510:	d05c      	beq.n	80035cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d141      	bne.n	800359e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351a:	4b31      	ldr	r3, [pc, #196]	; (80035e0 <HAL_RCC_OscConfig+0x478>)
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003520:	f7fd feb8 	bl	8001294 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003528:	f7fd feb4 	bl	8001294 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e087      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800353a:	4b27      	ldr	r3, [pc, #156]	; (80035d8 <HAL_RCC_OscConfig+0x470>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f0      	bne.n	8003528 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69da      	ldr	r2, [r3, #28]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	019b      	lsls	r3, r3, #6
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355c:	085b      	lsrs	r3, r3, #1
 800355e:	3b01      	subs	r3, #1
 8003560:	041b      	lsls	r3, r3, #16
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	061b      	lsls	r3, r3, #24
 800356a:	491b      	ldr	r1, [pc, #108]	; (80035d8 <HAL_RCC_OscConfig+0x470>)
 800356c:	4313      	orrs	r3, r2
 800356e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003570:	4b1b      	ldr	r3, [pc, #108]	; (80035e0 <HAL_RCC_OscConfig+0x478>)
 8003572:	2201      	movs	r2, #1
 8003574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003576:	f7fd fe8d 	bl	8001294 <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800357e:	f7fd fe89 	bl	8001294 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e05c      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003590:	4b11      	ldr	r3, [pc, #68]	; (80035d8 <HAL_RCC_OscConfig+0x470>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0f0      	beq.n	800357e <HAL_RCC_OscConfig+0x416>
 800359c:	e054      	b.n	8003648 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359e:	4b10      	ldr	r3, [pc, #64]	; (80035e0 <HAL_RCC_OscConfig+0x478>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a4:	f7fd fe76 	bl	8001294 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ac:	f7fd fe72 	bl	8001294 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e045      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035be:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <HAL_RCC_OscConfig+0x470>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_OscConfig+0x444>
 80035ca:	e03d      	b.n	8003648 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d107      	bne.n	80035e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e038      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
 80035d8:	40023800 	.word	0x40023800
 80035dc:	40007000 	.word	0x40007000
 80035e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035e4:	4b1b      	ldr	r3, [pc, #108]	; (8003654 <HAL_RCC_OscConfig+0x4ec>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d028      	beq.n	8003644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d121      	bne.n	8003644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800360a:	429a      	cmp	r2, r3
 800360c:	d11a      	bne.n	8003644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003614:	4013      	ands	r3, r2
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800361a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800361c:	4293      	cmp	r3, r2
 800361e:	d111      	bne.n	8003644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362a:	085b      	lsrs	r3, r3, #1
 800362c:	3b01      	subs	r3, #1
 800362e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003630:	429a      	cmp	r2, r3
 8003632:	d107      	bne.n	8003644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003640:	429a      	cmp	r2, r3
 8003642:	d001      	beq.n	8003648 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e000      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3718      	adds	r7, #24
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40023800 	.word	0x40023800

08003658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e0cc      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800366c:	4b68      	ldr	r3, [pc, #416]	; (8003810 <HAL_RCC_ClockConfig+0x1b8>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	429a      	cmp	r2, r3
 8003678:	d90c      	bls.n	8003694 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800367a:	4b65      	ldr	r3, [pc, #404]	; (8003810 <HAL_RCC_ClockConfig+0x1b8>)
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003682:	4b63      	ldr	r3, [pc, #396]	; (8003810 <HAL_RCC_ClockConfig+0x1b8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d001      	beq.n	8003694 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0b8      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d020      	beq.n	80036e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036ac:	4b59      	ldr	r3, [pc, #356]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	4a58      	ldr	r2, [pc, #352]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0308 	and.w	r3, r3, #8
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d005      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036c4:	4b53      	ldr	r3, [pc, #332]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	4a52      	ldr	r2, [pc, #328]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80036ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036d0:	4b50      	ldr	r3, [pc, #320]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	494d      	ldr	r1, [pc, #308]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d044      	beq.n	8003778 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d107      	bne.n	8003706 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f6:	4b47      	ldr	r3, [pc, #284]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d119      	bne.n	8003736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e07f      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d003      	beq.n	8003716 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003712:	2b03      	cmp	r3, #3
 8003714:	d107      	bne.n	8003726 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003716:	4b3f      	ldr	r3, [pc, #252]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d109      	bne.n	8003736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e06f      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003726:	4b3b      	ldr	r3, [pc, #236]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e067      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003736:	4b37      	ldr	r3, [pc, #220]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f023 0203 	bic.w	r2, r3, #3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	4934      	ldr	r1, [pc, #208]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	4313      	orrs	r3, r2
 8003746:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003748:	f7fd fda4 	bl	8001294 <HAL_GetTick>
 800374c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374e:	e00a      	b.n	8003766 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003750:	f7fd fda0 	bl	8001294 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	f241 3288 	movw	r2, #5000	; 0x1388
 800375e:	4293      	cmp	r3, r2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e04f      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003766:	4b2b      	ldr	r3, [pc, #172]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 020c 	and.w	r2, r3, #12
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	429a      	cmp	r2, r3
 8003776:	d1eb      	bne.n	8003750 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003778:	4b25      	ldr	r3, [pc, #148]	; (8003810 <HAL_RCC_ClockConfig+0x1b8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d20c      	bcs.n	80037a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003786:	4b22      	ldr	r3, [pc, #136]	; (8003810 <HAL_RCC_ClockConfig+0x1b8>)
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800378e:	4b20      	ldr	r3, [pc, #128]	; (8003810 <HAL_RCC_ClockConfig+0x1b8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	429a      	cmp	r2, r3
 800379a:	d001      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e032      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d008      	beq.n	80037be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037ac:	4b19      	ldr	r3, [pc, #100]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	4916      	ldr	r1, [pc, #88]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d009      	beq.n	80037de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ca:	4b12      	ldr	r3, [pc, #72]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	490e      	ldr	r1, [pc, #56]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037de:	f000 f821 	bl	8003824 <HAL_RCC_GetSysClockFreq>
 80037e2:	4602      	mov	r2, r0
 80037e4:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	091b      	lsrs	r3, r3, #4
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	490a      	ldr	r1, [pc, #40]	; (8003818 <HAL_RCC_ClockConfig+0x1c0>)
 80037f0:	5ccb      	ldrb	r3, [r1, r3]
 80037f2:	fa22 f303 	lsr.w	r3, r2, r3
 80037f6:	4a09      	ldr	r2, [pc, #36]	; (800381c <HAL_RCC_ClockConfig+0x1c4>)
 80037f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037fa:	4b09      	ldr	r3, [pc, #36]	; (8003820 <HAL_RCC_ClockConfig+0x1c8>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fd fd04 	bl	800120c <HAL_InitTick>

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40023c00 	.word	0x40023c00
 8003814:	40023800 	.word	0x40023800
 8003818:	0800843c 	.word	0x0800843c
 800381c:	20000000 	.word	0x20000000
 8003820:	20000004 	.word	0x20000004

08003824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003828:	b090      	sub	sp, #64	; 0x40
 800382a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	637b      	str	r3, [r7, #52]	; 0x34
 8003830:	2300      	movs	r3, #0
 8003832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003834:	2300      	movs	r3, #0
 8003836:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003838:	2300      	movs	r3, #0
 800383a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800383c:	4b59      	ldr	r3, [pc, #356]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f003 030c 	and.w	r3, r3, #12
 8003844:	2b08      	cmp	r3, #8
 8003846:	d00d      	beq.n	8003864 <HAL_RCC_GetSysClockFreq+0x40>
 8003848:	2b08      	cmp	r3, #8
 800384a:	f200 80a1 	bhi.w	8003990 <HAL_RCC_GetSysClockFreq+0x16c>
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <HAL_RCC_GetSysClockFreq+0x34>
 8003852:	2b04      	cmp	r3, #4
 8003854:	d003      	beq.n	800385e <HAL_RCC_GetSysClockFreq+0x3a>
 8003856:	e09b      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003858:	4b53      	ldr	r3, [pc, #332]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800385a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800385c:	e09b      	b.n	8003996 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800385e:	4b53      	ldr	r3, [pc, #332]	; (80039ac <HAL_RCC_GetSysClockFreq+0x188>)
 8003860:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003862:	e098      	b.n	8003996 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003864:	4b4f      	ldr	r3, [pc, #316]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800386c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800386e:	4b4d      	ldr	r3, [pc, #308]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d028      	beq.n	80038cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800387a:	4b4a      	ldr	r3, [pc, #296]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	099b      	lsrs	r3, r3, #6
 8003880:	2200      	movs	r2, #0
 8003882:	623b      	str	r3, [r7, #32]
 8003884:	627a      	str	r2, [r7, #36]	; 0x24
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800388c:	2100      	movs	r1, #0
 800388e:	4b47      	ldr	r3, [pc, #284]	; (80039ac <HAL_RCC_GetSysClockFreq+0x188>)
 8003890:	fb03 f201 	mul.w	r2, r3, r1
 8003894:	2300      	movs	r3, #0
 8003896:	fb00 f303 	mul.w	r3, r0, r3
 800389a:	4413      	add	r3, r2
 800389c:	4a43      	ldr	r2, [pc, #268]	; (80039ac <HAL_RCC_GetSysClockFreq+0x188>)
 800389e:	fba0 1202 	umull	r1, r2, r0, r2
 80038a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038a4:	460a      	mov	r2, r1
 80038a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80038a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038aa:	4413      	add	r3, r2
 80038ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b0:	2200      	movs	r2, #0
 80038b2:	61bb      	str	r3, [r7, #24]
 80038b4:	61fa      	str	r2, [r7, #28]
 80038b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80038be:	f7fc feff 	bl	80006c0 <__aeabi_uldivmod>
 80038c2:	4602      	mov	r2, r0
 80038c4:	460b      	mov	r3, r1
 80038c6:	4613      	mov	r3, r2
 80038c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038ca:	e053      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038cc:	4b35      	ldr	r3, [pc, #212]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	099b      	lsrs	r3, r3, #6
 80038d2:	2200      	movs	r2, #0
 80038d4:	613b      	str	r3, [r7, #16]
 80038d6:	617a      	str	r2, [r7, #20]
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80038de:	f04f 0b00 	mov.w	fp, #0
 80038e2:	4652      	mov	r2, sl
 80038e4:	465b      	mov	r3, fp
 80038e6:	f04f 0000 	mov.w	r0, #0
 80038ea:	f04f 0100 	mov.w	r1, #0
 80038ee:	0159      	lsls	r1, r3, #5
 80038f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038f4:	0150      	lsls	r0, r2, #5
 80038f6:	4602      	mov	r2, r0
 80038f8:	460b      	mov	r3, r1
 80038fa:	ebb2 080a 	subs.w	r8, r2, sl
 80038fe:	eb63 090b 	sbc.w	r9, r3, fp
 8003902:	f04f 0200 	mov.w	r2, #0
 8003906:	f04f 0300 	mov.w	r3, #0
 800390a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800390e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003912:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003916:	ebb2 0408 	subs.w	r4, r2, r8
 800391a:	eb63 0509 	sbc.w	r5, r3, r9
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	00eb      	lsls	r3, r5, #3
 8003928:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800392c:	00e2      	lsls	r2, r4, #3
 800392e:	4614      	mov	r4, r2
 8003930:	461d      	mov	r5, r3
 8003932:	eb14 030a 	adds.w	r3, r4, sl
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	eb45 030b 	adc.w	r3, r5, fp
 800393c:	607b      	str	r3, [r7, #4]
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	f04f 0300 	mov.w	r3, #0
 8003946:	e9d7 4500 	ldrd	r4, r5, [r7]
 800394a:	4629      	mov	r1, r5
 800394c:	028b      	lsls	r3, r1, #10
 800394e:	4621      	mov	r1, r4
 8003950:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003954:	4621      	mov	r1, r4
 8003956:	028a      	lsls	r2, r1, #10
 8003958:	4610      	mov	r0, r2
 800395a:	4619      	mov	r1, r3
 800395c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800395e:	2200      	movs	r2, #0
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	60fa      	str	r2, [r7, #12]
 8003964:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003968:	f7fc feaa 	bl	80006c0 <__aeabi_uldivmod>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4613      	mov	r3, r2
 8003972:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003974:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	0c1b      	lsrs	r3, r3, #16
 800397a:	f003 0303 	and.w	r3, r3, #3
 800397e:	3301      	adds	r3, #1
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003984:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003988:	fbb2 f3f3 	udiv	r3, r2, r3
 800398c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800398e:	e002      	b.n	8003996 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003990:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003992:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003994:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003998:	4618      	mov	r0, r3
 800399a:	3740      	adds	r7, #64	; 0x40
 800399c:	46bd      	mov	sp, r7
 800399e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039a2:	bf00      	nop
 80039a4:	40023800 	.word	0x40023800
 80039a8:	00f42400 	.word	0x00f42400
 80039ac:	017d7840 	.word	0x017d7840

080039b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039b4:	4b03      	ldr	r3, [pc, #12]	; (80039c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80039b6:	681b      	ldr	r3, [r3, #0]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	20000000 	.word	0x20000000

080039c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039c8:	b084      	sub	sp, #16
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b084      	sub	sp, #16
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	f107 001c 	add.w	r0, r7, #28
 80039d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d122      	bne.n	8003a26 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80039f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d105      	bne.n	8003a1a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f001 fbee 	bl	80051fc <USB_CoreReset>
 8003a20:	4603      	mov	r3, r0
 8003a22:	73fb      	strb	r3, [r7, #15]
 8003a24:	e01a      	b.n	8003a5c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f001 fbe2 	bl	80051fc <USB_CoreReset>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	639a      	str	r2, [r3, #56]	; 0x38
 8003a4e:	e005      	b.n	8003a5c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d10b      	bne.n	8003a7a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f043 0206 	orr.w	r2, r3, #6
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f043 0220 	orr.w	r2, r3, #32
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a86:	b004      	add	sp, #16
 8003a88:	4770      	bx	lr
	...

08003a8c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	4613      	mov	r3, r2
 8003a98:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003a9a:	79fb      	ldrb	r3, [r7, #7]
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d165      	bne.n	8003b6c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	4a41      	ldr	r2, [pc, #260]	; (8003ba8 <USB_SetTurnaroundTime+0x11c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d906      	bls.n	8003ab6 <USB_SetTurnaroundTime+0x2a>
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	4a40      	ldr	r2, [pc, #256]	; (8003bac <USB_SetTurnaroundTime+0x120>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d202      	bcs.n	8003ab6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003ab0:	230f      	movs	r3, #15
 8003ab2:	617b      	str	r3, [r7, #20]
 8003ab4:	e062      	b.n	8003b7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	4a3c      	ldr	r2, [pc, #240]	; (8003bac <USB_SetTurnaroundTime+0x120>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d306      	bcc.n	8003acc <USB_SetTurnaroundTime+0x40>
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	4a3b      	ldr	r2, [pc, #236]	; (8003bb0 <USB_SetTurnaroundTime+0x124>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d202      	bcs.n	8003acc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003ac6:	230e      	movs	r3, #14
 8003ac8:	617b      	str	r3, [r7, #20]
 8003aca:	e057      	b.n	8003b7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	4a38      	ldr	r2, [pc, #224]	; (8003bb0 <USB_SetTurnaroundTime+0x124>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d306      	bcc.n	8003ae2 <USB_SetTurnaroundTime+0x56>
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	4a37      	ldr	r2, [pc, #220]	; (8003bb4 <USB_SetTurnaroundTime+0x128>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d202      	bcs.n	8003ae2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003adc:	230d      	movs	r3, #13
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	e04c      	b.n	8003b7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	4a33      	ldr	r2, [pc, #204]	; (8003bb4 <USB_SetTurnaroundTime+0x128>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d306      	bcc.n	8003af8 <USB_SetTurnaroundTime+0x6c>
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	4a32      	ldr	r2, [pc, #200]	; (8003bb8 <USB_SetTurnaroundTime+0x12c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d802      	bhi.n	8003af8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003af2:	230c      	movs	r3, #12
 8003af4:	617b      	str	r3, [r7, #20]
 8003af6:	e041      	b.n	8003b7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	4a2f      	ldr	r2, [pc, #188]	; (8003bb8 <USB_SetTurnaroundTime+0x12c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d906      	bls.n	8003b0e <USB_SetTurnaroundTime+0x82>
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	4a2e      	ldr	r2, [pc, #184]	; (8003bbc <USB_SetTurnaroundTime+0x130>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d802      	bhi.n	8003b0e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003b08:	230b      	movs	r3, #11
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	e036      	b.n	8003b7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	4a2a      	ldr	r2, [pc, #168]	; (8003bbc <USB_SetTurnaroundTime+0x130>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d906      	bls.n	8003b24 <USB_SetTurnaroundTime+0x98>
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	4a29      	ldr	r2, [pc, #164]	; (8003bc0 <USB_SetTurnaroundTime+0x134>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d802      	bhi.n	8003b24 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003b1e:	230a      	movs	r3, #10
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	e02b      	b.n	8003b7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	4a26      	ldr	r2, [pc, #152]	; (8003bc0 <USB_SetTurnaroundTime+0x134>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d906      	bls.n	8003b3a <USB_SetTurnaroundTime+0xae>
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	4a25      	ldr	r2, [pc, #148]	; (8003bc4 <USB_SetTurnaroundTime+0x138>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d202      	bcs.n	8003b3a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003b34:	2309      	movs	r3, #9
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	e020      	b.n	8003b7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	4a21      	ldr	r2, [pc, #132]	; (8003bc4 <USB_SetTurnaroundTime+0x138>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d306      	bcc.n	8003b50 <USB_SetTurnaroundTime+0xc4>
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	4a20      	ldr	r2, [pc, #128]	; (8003bc8 <USB_SetTurnaroundTime+0x13c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d802      	bhi.n	8003b50 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003b4a:	2308      	movs	r3, #8
 8003b4c:	617b      	str	r3, [r7, #20]
 8003b4e:	e015      	b.n	8003b7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	4a1d      	ldr	r2, [pc, #116]	; (8003bc8 <USB_SetTurnaroundTime+0x13c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d906      	bls.n	8003b66 <USB_SetTurnaroundTime+0xda>
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	4a1c      	ldr	r2, [pc, #112]	; (8003bcc <USB_SetTurnaroundTime+0x140>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d202      	bcs.n	8003b66 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003b60:	2307      	movs	r3, #7
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	e00a      	b.n	8003b7c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003b66:	2306      	movs	r3, #6
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	e007      	b.n	8003b7c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003b6c:	79fb      	ldrb	r3, [r7, #7]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d102      	bne.n	8003b78 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003b72:	2309      	movs	r3, #9
 8003b74:	617b      	str	r3, [r7, #20]
 8003b76:	e001      	b.n	8003b7c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003b78:	2309      	movs	r3, #9
 8003b7a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	68da      	ldr	r2, [r3, #12]
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	029b      	lsls	r3, r3, #10
 8003b90:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003b94:	431a      	orrs	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	371c      	adds	r7, #28
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	00d8acbf 	.word	0x00d8acbf
 8003bac:	00e4e1c0 	.word	0x00e4e1c0
 8003bb0:	00f42400 	.word	0x00f42400
 8003bb4:	01067380 	.word	0x01067380
 8003bb8:	011a499f 	.word	0x011a499f
 8003bbc:	01312cff 	.word	0x01312cff
 8003bc0:	014ca43f 	.word	0x014ca43f
 8003bc4:	016e3600 	.word	0x016e3600
 8003bc8:	01a6ab1f 	.word	0x01a6ab1f
 8003bcc:	01e84800 	.word	0x01e84800

08003bd0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f043 0201 	orr.w	r2, r3, #1
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f023 0201 	bic.w	r2, r3, #1
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003c30:	78fb      	ldrb	r3, [r7, #3]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d115      	bne.n	8003c62 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c42:	2001      	movs	r0, #1
 8003c44:	f7fd fb32 	bl	80012ac <HAL_Delay>
      ms++;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f001 fa45 	bl	80050de <USB_GetMode>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d01e      	beq.n	8003c98 <USB_SetCurrentMode+0x84>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2b31      	cmp	r3, #49	; 0x31
 8003c5e:	d9f0      	bls.n	8003c42 <USB_SetCurrentMode+0x2e>
 8003c60:	e01a      	b.n	8003c98 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003c62:	78fb      	ldrb	r3, [r7, #3]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d115      	bne.n	8003c94 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c74:	2001      	movs	r0, #1
 8003c76:	f7fd fb19 	bl	80012ac <HAL_Delay>
      ms++;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f001 fa2c 	bl	80050de <USB_GetMode>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d005      	beq.n	8003c98 <USB_SetCurrentMode+0x84>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2b31      	cmp	r3, #49	; 0x31
 8003c90:	d9f0      	bls.n	8003c74 <USB_SetCurrentMode+0x60>
 8003c92:	e001      	b.n	8003c98 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e005      	b.n	8003ca4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2b32      	cmp	r3, #50	; 0x32
 8003c9c:	d101      	bne.n	8003ca2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003cac:	b084      	sub	sp, #16
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b086      	sub	sp, #24
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003cba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	613b      	str	r3, [r7, #16]
 8003cca:	e009      	b.n	8003ce0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	3340      	adds	r3, #64	; 0x40
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	613b      	str	r3, [r7, #16]
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	2b0e      	cmp	r3, #14
 8003ce4:	d9f2      	bls.n	8003ccc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d11c      	bne.n	8003d26 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cfa:	f043 0302 	orr.w	r3, r3, #2
 8003cfe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d04:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d10:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	639a      	str	r2, [r3, #56]	; 0x38
 8003d24:	e00b      	b.n	8003d3e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d36:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d44:	461a      	mov	r2, r3
 8003d46:	2300      	movs	r3, #0
 8003d48:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d50:	4619      	mov	r1, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d58:	461a      	mov	r2, r3
 8003d5a:	680b      	ldr	r3, [r1, #0]
 8003d5c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d10c      	bne.n	8003d7e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d104      	bne.n	8003d74 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f965 	bl	800403c <USB_SetDevSpeed>
 8003d72:	e008      	b.n	8003d86 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003d74:	2101      	movs	r1, #1
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f960 	bl	800403c <USB_SetDevSpeed>
 8003d7c:	e003      	b.n	8003d86 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003d7e:	2103      	movs	r1, #3
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f95b 	bl	800403c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003d86:	2110      	movs	r1, #16
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f8f3 	bl	8003f74 <USB_FlushTxFifo>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f91f 	bl	8003fdc <USB_FlushRxFifo>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dae:	461a      	mov	r2, r3
 8003db0:	2300      	movs	r3, #0
 8003db2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dba:	461a      	mov	r2, r3
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	2300      	movs	r3, #0
 8003dca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003dcc:	2300      	movs	r3, #0
 8003dce:	613b      	str	r3, [r7, #16]
 8003dd0:	e043      	b.n	8003e5a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003de4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003de8:	d118      	bne.n	8003e1c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10a      	bne.n	8003e06 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	e013      	b.n	8003e2e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	015a      	lsls	r2, r3, #5
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e12:	461a      	mov	r2, r3
 8003e14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	e008      	b.n	8003e2e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e28:	461a      	mov	r2, r3
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	3301      	adds	r3, #1
 8003e58:	613b      	str	r3, [r7, #16]
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d3b7      	bcc.n	8003dd2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e62:	2300      	movs	r3, #0
 8003e64:	613b      	str	r3, [r7, #16]
 8003e66:	e043      	b.n	8003ef0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e7e:	d118      	bne.n	8003eb2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10a      	bne.n	8003e9c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e92:	461a      	mov	r2, r3
 8003e94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e98:	6013      	str	r3, [r2, #0]
 8003e9a:	e013      	b.n	8003ec4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003eae:	6013      	str	r3, [r2, #0]
 8003eb0:	e008      	b.n	8003ec4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	015a      	lsls	r2, r3, #5
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	4413      	add	r3, r2
 8003ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ee8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	3301      	adds	r3, #1
 8003eee:	613b      	str	r3, [r7, #16]
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d3b7      	bcc.n	8003e68 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f0a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003f18:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d105      	bne.n	8003f2c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	f043 0210 	orr.w	r2, r3, #16
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	699a      	ldr	r2, [r3, #24]
 8003f30:	4b0f      	ldr	r3, [pc, #60]	; (8003f70 <USB_DevInit+0x2c4>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d005      	beq.n	8003f4a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	f043 0208 	orr.w	r2, r3, #8
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d107      	bne.n	8003f60 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f58:	f043 0304 	orr.w	r3, r3, #4
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f6c:	b004      	add	sp, #16
 8003f6e:	4770      	bx	lr
 8003f70:	803c3800 	.word	0x803c3800

08003f74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	3301      	adds	r3, #1
 8003f86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4a13      	ldr	r2, [pc, #76]	; (8003fd8 <USB_FlushTxFifo+0x64>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d901      	bls.n	8003f94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e01b      	b.n	8003fcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	daf2      	bge.n	8003f82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	019b      	lsls	r3, r3, #6
 8003fa4:	f043 0220 	orr.w	r2, r3, #32
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4a08      	ldr	r2, [pc, #32]	; (8003fd8 <USB_FlushTxFifo+0x64>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d901      	bls.n	8003fbe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e006      	b.n	8003fcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	f003 0320 	and.w	r3, r3, #32
 8003fc6:	2b20      	cmp	r3, #32
 8003fc8:	d0f0      	beq.n	8003fac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3714      	adds	r7, #20
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	00030d40 	.word	0x00030d40

08003fdc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	3301      	adds	r3, #1
 8003fec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	4a11      	ldr	r2, [pc, #68]	; (8004038 <USB_FlushRxFifo+0x5c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d901      	bls.n	8003ffa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e018      	b.n	800402c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	daf2      	bge.n	8003fe8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004002:	2300      	movs	r3, #0
 8004004:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2210      	movs	r2, #16
 800400a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	3301      	adds	r3, #1
 8004010:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4a08      	ldr	r2, [pc, #32]	; (8004038 <USB_FlushRxFifo+0x5c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d901      	bls.n	800401e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e006      	b.n	800402c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f003 0310 	and.w	r3, r3, #16
 8004026:	2b10      	cmp	r3, #16
 8004028:	d0f0      	beq.n	800400c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3714      	adds	r7, #20
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	00030d40 	.word	0x00030d40

0800403c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	68f9      	ldr	r1, [r7, #12]
 8004058:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800405c:	4313      	orrs	r3, r2
 800405e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800406e:	b480      	push	{r7}
 8004070:	b087      	sub	sp, #28
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 0306 	and.w	r3, r3, #6
 8004086:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d102      	bne.n	8004094 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800408e:	2300      	movs	r3, #0
 8004090:	75fb      	strb	r3, [r7, #23]
 8004092:	e00a      	b.n	80040aa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2b02      	cmp	r3, #2
 8004098:	d002      	beq.n	80040a0 <USB_GetDevSpeed+0x32>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2b06      	cmp	r3, #6
 800409e:	d102      	bne.n	80040a6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80040a0:	2302      	movs	r3, #2
 80040a2:	75fb      	strb	r3, [r7, #23]
 80040a4:	e001      	b.n	80040aa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80040a6:	230f      	movs	r3, #15
 80040a8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80040aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	371c      	adds	r7, #28
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	785b      	ldrb	r3, [r3, #1]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d13a      	bne.n	800414a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040da:	69da      	ldr	r2, [r3, #28]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	f003 030f 	and.w	r3, r3, #15
 80040e4:	2101      	movs	r1, #1
 80040e6:	fa01 f303 	lsl.w	r3, r1, r3
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	68f9      	ldr	r1, [r7, #12]
 80040ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040f2:	4313      	orrs	r3, r2
 80040f4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d155      	bne.n	80041b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4413      	add	r3, r2
 8004114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	791b      	ldrb	r3, [r3, #4]
 8004126:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004128:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	059b      	lsls	r3, r3, #22
 800412e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004130:	4313      	orrs	r3, r2
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	0151      	lsls	r1, r2, #5
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	440a      	add	r2, r1
 800413a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800413e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004146:	6013      	str	r3, [r2, #0]
 8004148:	e036      	b.n	80041b8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004150:	69da      	ldr	r2, [r3, #28]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	2101      	movs	r1, #1
 800415c:	fa01 f303 	lsl.w	r3, r1, r3
 8004160:	041b      	lsls	r3, r3, #16
 8004162:	68f9      	ldr	r1, [r7, #12]
 8004164:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004168:	4313      	orrs	r3, r2
 800416a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4413      	add	r3, r2
 8004174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d11a      	bne.n	80041b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	4413      	add	r3, r2
 800418a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	791b      	ldrb	r3, [r3, #4]
 800419c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800419e:	430b      	orrs	r3, r1
 80041a0:	4313      	orrs	r3, r2
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	0151      	lsls	r1, r2, #5
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	440a      	add	r2, r1
 80041aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041b6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
	...

080041c8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	785b      	ldrb	r3, [r3, #1]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d161      	bne.n	80042a8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041fa:	d11f      	bne.n	800423c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4413      	add	r3, r2
 8004204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	0151      	lsls	r1, r2, #5
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	440a      	add	r2, r1
 8004212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004216:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800421a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4413      	add	r3, r2
 8004224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	0151      	lsls	r1, r2, #5
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	440a      	add	r2, r1
 8004232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004236:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800423a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004242:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	f003 030f 	and.w	r3, r3, #15
 800424c:	2101      	movs	r1, #1
 800424e:	fa01 f303 	lsl.w	r3, r1, r3
 8004252:	b29b      	uxth	r3, r3
 8004254:	43db      	mvns	r3, r3
 8004256:	68f9      	ldr	r1, [r7, #12]
 8004258:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800425c:	4013      	ands	r3, r2
 800425e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004266:	69da      	ldr	r2, [r3, #28]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	f003 030f 	and.w	r3, r3, #15
 8004270:	2101      	movs	r1, #1
 8004272:	fa01 f303 	lsl.w	r3, r1, r3
 8004276:	b29b      	uxth	r3, r3
 8004278:	43db      	mvns	r3, r3
 800427a:	68f9      	ldr	r1, [r7, #12]
 800427c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004280:	4013      	ands	r3, r2
 8004282:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	015a      	lsls	r2, r3, #5
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4413      	add	r3, r2
 800428c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	0159      	lsls	r1, r3, #5
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	440b      	add	r3, r1
 800429a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800429e:	4619      	mov	r1, r3
 80042a0:	4b35      	ldr	r3, [pc, #212]	; (8004378 <USB_DeactivateEndpoint+0x1b0>)
 80042a2:	4013      	ands	r3, r2
 80042a4:	600b      	str	r3, [r1, #0]
 80042a6:	e060      	b.n	800436a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042be:	d11f      	bne.n	8004300 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	0151      	lsls	r1, r2, #5
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	440a      	add	r2, r1
 80042d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042de:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	0151      	lsls	r1, r2, #5
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	440a      	add	r2, r1
 80042f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	f003 030f 	and.w	r3, r3, #15
 8004310:	2101      	movs	r1, #1
 8004312:	fa01 f303 	lsl.w	r3, r1, r3
 8004316:	041b      	lsls	r3, r3, #16
 8004318:	43db      	mvns	r3, r3
 800431a:	68f9      	ldr	r1, [r7, #12]
 800431c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004320:	4013      	ands	r3, r2
 8004322:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432a:	69da      	ldr	r2, [r3, #28]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	f003 030f 	and.w	r3, r3, #15
 8004334:	2101      	movs	r1, #1
 8004336:	fa01 f303 	lsl.w	r3, r1, r3
 800433a:	041b      	lsls	r3, r3, #16
 800433c:	43db      	mvns	r3, r3
 800433e:	68f9      	ldr	r1, [r7, #12]
 8004340:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004344:	4013      	ands	r3, r2
 8004346:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4413      	add	r3, r2
 8004350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	0159      	lsls	r1, r3, #5
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	440b      	add	r3, r1
 800435e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004362:	4619      	mov	r1, r3
 8004364:	4b05      	ldr	r3, [pc, #20]	; (800437c <USB_DeactivateEndpoint+0x1b4>)
 8004366:	4013      	ands	r3, r2
 8004368:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	ec337800 	.word	0xec337800
 800437c:	eff37800 	.word	0xeff37800

08004380 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b08a      	sub	sp, #40	; 0x28
 8004384:	af02      	add	r7, sp, #8
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	4613      	mov	r3, r2
 800438c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	785b      	ldrb	r3, [r3, #1]
 800439c:	2b01      	cmp	r3, #1
 800439e:	f040 815c 	bne.w	800465a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d132      	bne.n	8004410 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	0151      	lsls	r1, r2, #5
 80043bc:	69fa      	ldr	r2, [r7, #28]
 80043be:	440a      	add	r2, r1
 80043c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	0151      	lsls	r1, r2, #5
 80043e0:	69fa      	ldr	r2, [r7, #28]
 80043e2:	440a      	add	r2, r1
 80043e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	015a      	lsls	r2, r3, #5
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	4413      	add	r3, r2
 80043f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	0151      	lsls	r1, r2, #5
 8004400:	69fa      	ldr	r2, [r7, #28]
 8004402:	440a      	add	r2, r1
 8004404:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004408:	0cdb      	lsrs	r3, r3, #19
 800440a:	04db      	lsls	r3, r3, #19
 800440c:	6113      	str	r3, [r2, #16]
 800440e:	e074      	b.n	80044fa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	0151      	lsls	r1, r2, #5
 8004422:	69fa      	ldr	r2, [r7, #28]
 8004424:	440a      	add	r2, r1
 8004426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800442a:	0cdb      	lsrs	r3, r3, #19
 800442c:	04db      	lsls	r3, r3, #19
 800442e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	0151      	lsls	r1, r2, #5
 8004442:	69fa      	ldr	r2, [r7, #28]
 8004444:	440a      	add	r2, r1
 8004446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800444a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800444e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004452:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	4413      	add	r3, r2
 800445c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004460:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	6999      	ldr	r1, [r3, #24]
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	440b      	add	r3, r1
 800446c:	1e59      	subs	r1, r3, #1
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	fbb1 f3f3 	udiv	r3, r1, r3
 8004476:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004478:	4b9d      	ldr	r3, [pc, #628]	; (80046f0 <USB_EPStartXfer+0x370>)
 800447a:	400b      	ands	r3, r1
 800447c:	69b9      	ldr	r1, [r7, #24]
 800447e:	0148      	lsls	r0, r1, #5
 8004480:	69f9      	ldr	r1, [r7, #28]
 8004482:	4401      	add	r1, r0
 8004484:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004488:	4313      	orrs	r3, r2
 800448a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	4413      	add	r3, r2
 8004494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004498:	691a      	ldr	r2, [r3, #16]
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044a2:	69b9      	ldr	r1, [r7, #24]
 80044a4:	0148      	lsls	r0, r1, #5
 80044a6:	69f9      	ldr	r1, [r7, #28]
 80044a8:	4401      	add	r1, r0
 80044aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80044ae:	4313      	orrs	r3, r2
 80044b0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	791b      	ldrb	r3, [r3, #4]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d11f      	bne.n	80044fa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	0151      	lsls	r1, r2, #5
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	440a      	add	r2, r1
 80044d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044d4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80044d8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	0151      	lsls	r1, r2, #5
 80044ec:	69fa      	ldr	r2, [r7, #28]
 80044ee:	440a      	add	r2, r1
 80044f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044f8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80044fa:	79fb      	ldrb	r3, [r7, #7]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d14b      	bne.n	8004598 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d009      	beq.n	800451c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004514:	461a      	mov	r2, r3
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	791b      	ldrb	r3, [r3, #4]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d128      	bne.n	8004576 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004530:	2b00      	cmp	r3, #0
 8004532:	d110      	bne.n	8004556 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	4413      	add	r3, r2
 800453c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	0151      	lsls	r1, r2, #5
 8004546:	69fa      	ldr	r2, [r7, #28]
 8004548:	440a      	add	r2, r1
 800454a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800454e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004552:	6013      	str	r3, [r2, #0]
 8004554:	e00f      	b.n	8004576 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	015a      	lsls	r2, r3, #5
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	4413      	add	r3, r2
 800455e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	0151      	lsls	r1, r2, #5
 8004568:	69fa      	ldr	r2, [r7, #28]
 800456a:	440a      	add	r2, r1
 800456c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004574:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	015a      	lsls	r2, r3, #5
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	4413      	add	r3, r2
 800457e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	0151      	lsls	r1, r2, #5
 8004588:	69fa      	ldr	r2, [r7, #28]
 800458a:	440a      	add	r2, r1
 800458c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004590:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	e133      	b.n	8004800 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	0151      	lsls	r1, r2, #5
 80045aa:	69fa      	ldr	r2, [r7, #28]
 80045ac:	440a      	add	r2, r1
 80045ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045b6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	791b      	ldrb	r3, [r3, #4]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d015      	beq.n	80045ec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 811b 	beq.w	8004800 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	2101      	movs	r1, #1
 80045dc:	fa01 f303 	lsl.w	r3, r1, r3
 80045e0:	69f9      	ldr	r1, [r7, #28]
 80045e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045e6:	4313      	orrs	r3, r2
 80045e8:	634b      	str	r3, [r1, #52]	; 0x34
 80045ea:	e109      	b.n	8004800 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d110      	bne.n	800461e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	4413      	add	r3, r2
 8004604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	0151      	lsls	r1, r2, #5
 800460e:	69fa      	ldr	r2, [r7, #28]
 8004610:	440a      	add	r2, r1
 8004612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004616:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	e00f      	b.n	800463e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	015a      	lsls	r2, r3, #5
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	4413      	add	r3, r2
 8004626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	0151      	lsls	r1, r2, #5
 8004630:	69fa      	ldr	r2, [r7, #28]
 8004632:	440a      	add	r2, r1
 8004634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	6919      	ldr	r1, [r3, #16]
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	781a      	ldrb	r2, [r3, #0]
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	b298      	uxth	r0, r3
 800464c:	79fb      	ldrb	r3, [r7, #7]
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	4603      	mov	r3, r0
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 fade 	bl	8004c14 <USB_WritePacket>
 8004658:	e0d2      	b.n	8004800 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	4413      	add	r3, r2
 8004662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	0151      	lsls	r1, r2, #5
 800466c:	69fa      	ldr	r2, [r7, #28]
 800466e:	440a      	add	r2, r1
 8004670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004674:	0cdb      	lsrs	r3, r3, #19
 8004676:	04db      	lsls	r3, r3, #19
 8004678:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	4413      	add	r3, r2
 8004682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	0151      	lsls	r1, r2, #5
 800468c:	69fa      	ldr	r2, [r7, #28]
 800468e:	440a      	add	r2, r1
 8004690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004694:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004698:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800469c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d126      	bne.n	80046f4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	015a      	lsls	r2, r3, #5
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	4413      	add	r3, r2
 80046ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b2:	691a      	ldr	r2, [r3, #16]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046bc:	69b9      	ldr	r1, [r7, #24]
 80046be:	0148      	lsls	r0, r1, #5
 80046c0:	69f9      	ldr	r1, [r7, #28]
 80046c2:	4401      	add	r1, r0
 80046c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80046c8:	4313      	orrs	r3, r2
 80046ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	0151      	lsls	r1, r2, #5
 80046de:	69fa      	ldr	r2, [r7, #28]
 80046e0:	440a      	add	r2, r1
 80046e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046ea:	6113      	str	r3, [r2, #16]
 80046ec:	e03a      	b.n	8004764 <USB_EPStartXfer+0x3e4>
 80046ee:	bf00      	nop
 80046f0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	699a      	ldr	r2, [r3, #24]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	4413      	add	r3, r2
 80046fe:	1e5a      	subs	r2, r3, #1
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	fbb2 f3f3 	udiv	r3, r2, r3
 8004708:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	8afa      	ldrh	r2, [r7, #22]
 8004710:	fb03 f202 	mul.w	r2, r3, r2
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004724:	691a      	ldr	r2, [r3, #16]
 8004726:	8afb      	ldrh	r3, [r7, #22]
 8004728:	04d9      	lsls	r1, r3, #19
 800472a:	4b38      	ldr	r3, [pc, #224]	; (800480c <USB_EPStartXfer+0x48c>)
 800472c:	400b      	ands	r3, r1
 800472e:	69b9      	ldr	r1, [r7, #24]
 8004730:	0148      	lsls	r0, r1, #5
 8004732:	69f9      	ldr	r1, [r7, #28]
 8004734:	4401      	add	r1, r0
 8004736:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800473a:	4313      	orrs	r3, r2
 800473c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	4413      	add	r3, r2
 8004746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474a:	691a      	ldr	r2, [r3, #16]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004754:	69b9      	ldr	r1, [r7, #24]
 8004756:	0148      	lsls	r0, r1, #5
 8004758:	69f9      	ldr	r1, [r7, #28]
 800475a:	4401      	add	r1, r0
 800475c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004760:	4313      	orrs	r3, r2
 8004762:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004764:	79fb      	ldrb	r3, [r7, #7]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d10d      	bne.n	8004786 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d009      	beq.n	8004786 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	6919      	ldr	r1, [r3, #16]
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	015a      	lsls	r2, r3, #5
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	4413      	add	r3, r2
 800477e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004782:	460a      	mov	r2, r1
 8004784:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	791b      	ldrb	r3, [r3, #4]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d128      	bne.n	80047e0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479a:	2b00      	cmp	r3, #0
 800479c:	d110      	bne.n	80047c0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	0151      	lsls	r1, r2, #5
 80047b0:	69fa      	ldr	r2, [r7, #28]
 80047b2:	440a      	add	r2, r1
 80047b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	e00f      	b.n	80047e0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	0151      	lsls	r1, r2, #5
 80047d2:	69fa      	ldr	r2, [r7, #28]
 80047d4:	440a      	add	r2, r1
 80047d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047de:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	0151      	lsls	r1, r2, #5
 80047f2:	69fa      	ldr	r2, [r7, #28]
 80047f4:	440a      	add	r2, r1
 80047f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3720      	adds	r7, #32
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	1ff80000 	.word	0x1ff80000

08004810 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	4613      	mov	r3, r2
 800481c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	785b      	ldrb	r3, [r3, #1]
 800482c:	2b01      	cmp	r3, #1
 800482e:	f040 80ce 	bne.w	80049ce <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d132      	bne.n	80048a0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	4413      	add	r3, r2
 8004842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	0151      	lsls	r1, r2, #5
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	440a      	add	r2, r1
 8004850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004854:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004858:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800485c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	0151      	lsls	r1, r2, #5
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	440a      	add	r2, r1
 8004874:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004878:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800487c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	4413      	add	r3, r2
 8004886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	0151      	lsls	r1, r2, #5
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	440a      	add	r2, r1
 8004894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004898:	0cdb      	lsrs	r3, r3, #19
 800489a:	04db      	lsls	r3, r3, #19
 800489c:	6113      	str	r3, [r2, #16]
 800489e:	e04e      	b.n	800493e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	015a      	lsls	r2, r3, #5
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	0151      	lsls	r1, r2, #5
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	440a      	add	r2, r1
 80048b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048ba:	0cdb      	lsrs	r3, r3, #19
 80048bc:	04db      	lsls	r3, r3, #19
 80048be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	0151      	lsls	r1, r2, #5
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	440a      	add	r2, r1
 80048d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048e2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	699a      	ldr	r2, [r3, #24]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d903      	bls.n	80048f8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	68da      	ldr	r2, [r3, #12]
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	0151      	lsls	r1, r2, #5
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	440a      	add	r2, r1
 800490e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004912:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004916:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	4413      	add	r3, r2
 8004920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004924:	691a      	ldr	r2, [r3, #16]
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800492e:	6939      	ldr	r1, [r7, #16]
 8004930:	0148      	lsls	r0, r1, #5
 8004932:	6979      	ldr	r1, [r7, #20]
 8004934:	4401      	add	r1, r0
 8004936:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800493a:	4313      	orrs	r3, r2
 800493c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d11e      	bne.n	8004982 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d009      	beq.n	8004960 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004958:	461a      	mov	r2, r3
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	0151      	lsls	r1, r2, #5
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	440a      	add	r2, r1
 8004976:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800497a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800497e:	6013      	str	r3, [r2, #0]
 8004980:	e097      	b.n	8004ab2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	0151      	lsls	r1, r2, #5
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	440a      	add	r2, r1
 8004998:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800499c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049a0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 8083 	beq.w	8004ab2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	f003 030f 	and.w	r3, r3, #15
 80049bc:	2101      	movs	r1, #1
 80049be:	fa01 f303 	lsl.w	r3, r1, r3
 80049c2:	6979      	ldr	r1, [r7, #20]
 80049c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049c8:	4313      	orrs	r3, r2
 80049ca:	634b      	str	r3, [r1, #52]	; 0x34
 80049cc:	e071      	b.n	8004ab2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	015a      	lsls	r2, r3, #5
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	0151      	lsls	r1, r2, #5
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	440a      	add	r2, r1
 80049e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049e8:	0cdb      	lsrs	r3, r3, #19
 80049ea:	04db      	lsls	r3, r3, #19
 80049ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	0151      	lsls	r1, r2, #5
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	440a      	add	r2, r1
 8004a04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a10:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	68da      	ldr	r2, [r3, #12]
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	0151      	lsls	r1, r2, #5
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	440a      	add	r2, r1
 8004a40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a56:	691a      	ldr	r2, [r3, #16]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a60:	6939      	ldr	r1, [r7, #16]
 8004a62:	0148      	lsls	r0, r1, #5
 8004a64:	6979      	ldr	r1, [r7, #20]
 8004a66:	4401      	add	r1, r0
 8004a68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004a70:	79fb      	ldrb	r3, [r7, #7]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d10d      	bne.n	8004a92 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d009      	beq.n	8004a92 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	6919      	ldr	r1, [r3, #16]
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a8e:	460a      	mov	r2, r1
 8004a90:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	0151      	lsls	r1, r2, #5
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	440a      	add	r2, r1
 8004aa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ab0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	371c      	adds	r7, #28
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b087      	sub	sp, #28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	785b      	ldrb	r3, [r3, #1]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d14a      	bne.n	8004b74 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004af2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004af6:	f040 8086 	bne.w	8004c06 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	7812      	ldrb	r2, [r2, #0]
 8004b0e:	0151      	lsls	r1, r2, #5
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	440a      	add	r2, r1
 8004b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b18:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b1c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	7812      	ldrb	r2, [r2, #0]
 8004b32:	0151      	lsls	r1, r2, #5
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	440a      	add	r2, r1
 8004b38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b40:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	3301      	adds	r3, #1
 8004b46:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d902      	bls.n	8004b58 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	75fb      	strb	r3, [r7, #23]
          break;
 8004b56:	e056      	b.n	8004c06 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b70:	d0e7      	beq.n	8004b42 <USB_EPStopXfer+0x82>
 8004b72:	e048      	b.n	8004c06 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b8c:	d13b      	bne.n	8004c06 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	7812      	ldrb	r2, [r2, #0]
 8004ba2:	0151      	lsls	r1, r2, #5
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	440a      	add	r2, r1
 8004ba8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004bb0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	7812      	ldrb	r2, [r2, #0]
 8004bc6:	0151      	lsls	r1, r2, #5
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	440a      	add	r2, r1
 8004bcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bd4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f242 7210 	movw	r2, #10000	; 0x2710
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d902      	bls.n	8004bec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	75fb      	strb	r3, [r7, #23]
          break;
 8004bea:	e00c      	b.n	8004c06 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	015a      	lsls	r2, r3, #5
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c04:	d0e7      	beq.n	8004bd6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	371c      	adds	r7, #28
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b089      	sub	sp, #36	; 0x24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	4611      	mov	r1, r2
 8004c20:	461a      	mov	r2, r3
 8004c22:	460b      	mov	r3, r1
 8004c24:	71fb      	strb	r3, [r7, #7]
 8004c26:	4613      	mov	r3, r2
 8004c28:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004c32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d123      	bne.n	8004c82 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c3a:	88bb      	ldrh	r3, [r7, #4]
 8004c3c:	3303      	adds	r3, #3
 8004c3e:	089b      	lsrs	r3, r3, #2
 8004c40:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004c42:	2300      	movs	r3, #0
 8004c44:	61bb      	str	r3, [r7, #24]
 8004c46:	e018      	b.n	8004c7a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004c48:	79fb      	ldrb	r3, [r7, #7]
 8004c4a:	031a      	lsls	r2, r3, #12
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c54:	461a      	mov	r2, r3
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	3301      	adds	r3, #1
 8004c66:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	3301      	adds	r3, #1
 8004c72:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	3301      	adds	r3, #1
 8004c78:	61bb      	str	r3, [r7, #24]
 8004c7a:	69ba      	ldr	r2, [r7, #24]
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d3e2      	bcc.n	8004c48 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3724      	adds	r7, #36	; 0x24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b08b      	sub	sp, #44	; 0x2c
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004ca6:	88fb      	ldrh	r3, [r7, #6]
 8004ca8:	089b      	lsrs	r3, r3, #2
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004cae:	88fb      	ldrh	r3, [r7, #6]
 8004cb0:	f003 0303 	and.w	r3, r3, #3
 8004cb4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	623b      	str	r3, [r7, #32]
 8004cba:	e014      	b.n	8004ce6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc6:	601a      	str	r2, [r3, #0]
    pDest++;
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	3301      	adds	r3, #1
 8004ccc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	3301      	adds	r3, #1
 8004cde:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	623b      	str	r3, [r7, #32]
 8004ce6:	6a3a      	ldr	r2, [r7, #32]
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d3e6      	bcc.n	8004cbc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004cee:	8bfb      	ldrh	r3, [r7, #30]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d01e      	beq.n	8004d32 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f107 0310 	add.w	r3, r7, #16
 8004d04:	6812      	ldr	r2, [r2, #0]
 8004d06:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	fa22 f303 	lsr.w	r3, r2, r3
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	701a      	strb	r2, [r3, #0]
      i++;
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	3301      	adds	r3, #1
 8004d24:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004d26:	8bfb      	ldrh	r3, [r7, #30]
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004d2c:	8bfb      	ldrh	r3, [r7, #30]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1ea      	bne.n	8004d08 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	372c      	adds	r7, #44	; 0x2c
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	785b      	ldrb	r3, [r3, #1]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d12c      	bne.n	8004db6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	db12      	blt.n	8004d94 <USB_EPSetStall+0x54>
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00f      	beq.n	8004d94 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	015a      	lsls	r2, r3, #5
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	0151      	lsls	r1, r2, #5
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	440a      	add	r2, r1
 8004d8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d92:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	0151      	lsls	r1, r2, #5
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	440a      	add	r2, r1
 8004daa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004db2:	6013      	str	r3, [r2, #0]
 8004db4:	e02b      	b.n	8004e0e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	db12      	blt.n	8004dee <USB_EPSetStall+0xae>
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00f      	beq.n	8004dee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	0151      	lsls	r1, r2, #5
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	440a      	add	r2, r1
 8004de4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004de8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004dec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	0151      	lsls	r1, r2, #5
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	440a      	add	r2, r1
 8004e04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e0c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	785b      	ldrb	r3, [r3, #1]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d128      	bne.n	8004e8a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	0151      	lsls	r1, r2, #5
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	440a      	add	r2, r1
 8004e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e56:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	791b      	ldrb	r3, [r3, #4]
 8004e5c:	2b03      	cmp	r3, #3
 8004e5e:	d003      	beq.n	8004e68 <USB_EPClearStall+0x4c>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	791b      	ldrb	r3, [r3, #4]
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d138      	bne.n	8004eda <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	0151      	lsls	r1, r2, #5
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	440a      	add	r2, r1
 8004e7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	e027      	b.n	8004eda <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	0151      	lsls	r1, r2, #5
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	440a      	add	r2, r1
 8004ea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ea4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ea8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	791b      	ldrb	r3, [r3, #4]
 8004eae:	2b03      	cmp	r3, #3
 8004eb0:	d003      	beq.n	8004eba <USB_EPClearStall+0x9e>
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	791b      	ldrb	r3, [r3, #4]
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d10f      	bne.n	8004eda <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	0151      	lsls	r1, r2, #5
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	440a      	add	r2, r1
 8004ed0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ed8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3714      	adds	r7, #20
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f06:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004f0a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	78fb      	ldrb	r3, [r7, #3]
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004f1c:	68f9      	ldr	r1, [r7, #12]
 8004f1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f22:	4313      	orrs	r3, r2
 8004f24:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f4e:	f023 0303 	bic.w	r3, r3, #3
 8004f52:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f62:	f023 0302 	bic.w	r3, r3, #2
 8004f66:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b085      	sub	sp, #20
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f90:	f023 0303 	bic.w	r3, r3, #3
 8004f94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fa4:	f043 0302 	orr.w	r3, r3, #2
 8004fa8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b085      	sub	sp, #20
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	4013      	ands	r3, r2
 8005000:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	0c1b      	lsrs	r3, r3, #16
}
 8005006:	4618      	mov	r0, r3
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005012:	b480      	push	{r7}
 8005014:	b085      	sub	sp, #20
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800502e:	69db      	ldr	r3, [r3, #28]
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	4013      	ands	r3, r2
 8005034:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	b29b      	uxth	r3, r3
}
 800503a:	4618      	mov	r0, r3
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005046:	b480      	push	{r7}
 8005048:	b085      	sub	sp, #20
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
 800504e:	460b      	mov	r3, r1
 8005050:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005056:	78fb      	ldrb	r3, [r7, #3]
 8005058:	015a      	lsls	r2, r3, #5
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	4413      	add	r3, r2
 800505e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	4013      	ands	r3, r2
 8005072:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005074:	68bb      	ldr	r3, [r7, #8]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005082:	b480      	push	{r7}
 8005084:	b087      	sub	sp, #28
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	460b      	mov	r3, r1
 800508c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80050a6:	78fb      	ldrb	r3, [r7, #3]
 80050a8:	f003 030f 	and.w	r3, r3, #15
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	fa22 f303 	lsr.w	r3, r2, r3
 80050b2:	01db      	lsls	r3, r3, #7
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80050bc:	78fb      	ldrb	r3, [r7, #3]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	4013      	ands	r3, r2
 80050ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80050d0:	68bb      	ldr	r3, [r7, #8]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	371c      	adds	r7, #28
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	f003 0301 	and.w	r3, r3, #1
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b085      	sub	sp, #20
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005114:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005118:	f023 0307 	bic.w	r3, r3, #7
 800511c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800512c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005130:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3714      	adds	r7, #20
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005140:	b480      	push	{r7}
 8005142:	b087      	sub	sp, #28
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	460b      	mov	r3, r1
 800514a:	607a      	str	r2, [r7, #4]
 800514c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	333c      	adds	r3, #60	; 0x3c
 8005156:	3304      	adds	r3, #4
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	4a26      	ldr	r2, [pc, #152]	; (80051f8 <USB_EP0_OutStart+0xb8>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d90a      	bls.n	800517a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005170:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005174:	d101      	bne.n	800517a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005176:	2300      	movs	r3, #0
 8005178:	e037      	b.n	80051ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005180:	461a      	mov	r2, r3
 8005182:	2300      	movs	r3, #0
 8005184:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005194:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005198:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051a8:	f043 0318 	orr.w	r3, r3, #24
 80051ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051bc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80051c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80051c2:	7afb      	ldrb	r3, [r7, #11]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d10f      	bne.n	80051e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ce:	461a      	mov	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051e2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80051e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	371c      	adds	r7, #28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	4f54300a 	.word	0x4f54300a

080051fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005204:	2300      	movs	r3, #0
 8005206:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	3301      	adds	r3, #1
 800520c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4a13      	ldr	r2, [pc, #76]	; (8005260 <USB_CoreReset+0x64>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d901      	bls.n	800521a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e01b      	b.n	8005252 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	2b00      	cmp	r3, #0
 8005220:	daf2      	bge.n	8005208 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	f043 0201 	orr.w	r2, r3, #1
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	3301      	adds	r3, #1
 8005236:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4a09      	ldr	r2, [pc, #36]	; (8005260 <USB_CoreReset+0x64>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d901      	bls.n	8005244 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e006      	b.n	8005252 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	2b01      	cmp	r3, #1
 800524e:	d0f0      	beq.n	8005232 <USB_CoreReset+0x36>

  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	00030d40 	.word	0x00030d40

08005264 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	460b      	mov	r3, r1
 800526e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005270:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005274:	f002 fd44 	bl	8007d00 <USBD_static_malloc>
 8005278:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d109      	bne.n	8005294 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	32b0      	adds	r2, #176	; 0xb0
 800528a:	2100      	movs	r1, #0
 800528c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005290:	2302      	movs	r3, #2
 8005292:	e0d4      	b.n	800543e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005294:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005298:	2100      	movs	r1, #0
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f002 fda6 	bl	8007dec <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	32b0      	adds	r2, #176	; 0xb0
 80052aa:	68f9      	ldr	r1, [r7, #12]
 80052ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	32b0      	adds	r2, #176	; 0xb0
 80052ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	7c1b      	ldrb	r3, [r3, #16]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d138      	bne.n	800533e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80052cc:	4b5e      	ldr	r3, [pc, #376]	; (8005448 <USBD_CDC_Init+0x1e4>)
 80052ce:	7819      	ldrb	r1, [r3, #0]
 80052d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052d4:	2202      	movs	r2, #2
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f002 fbef 	bl	8007aba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80052dc:	4b5a      	ldr	r3, [pc, #360]	; (8005448 <USBD_CDC_Init+0x1e4>)
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	f003 020f 	and.w	r2, r3, #15
 80052e4:	6879      	ldr	r1, [r7, #4]
 80052e6:	4613      	mov	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	440b      	add	r3, r1
 80052f0:	3324      	adds	r3, #36	; 0x24
 80052f2:	2201      	movs	r2, #1
 80052f4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80052f6:	4b55      	ldr	r3, [pc, #340]	; (800544c <USBD_CDC_Init+0x1e8>)
 80052f8:	7819      	ldrb	r1, [r3, #0]
 80052fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052fe:	2202      	movs	r2, #2
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f002 fbda 	bl	8007aba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005306:	4b51      	ldr	r3, [pc, #324]	; (800544c <USBD_CDC_Init+0x1e8>)
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	f003 020f 	and.w	r2, r3, #15
 800530e:	6879      	ldr	r1, [r7, #4]
 8005310:	4613      	mov	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	440b      	add	r3, r1
 800531a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800531e:	2201      	movs	r2, #1
 8005320:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005322:	4b4b      	ldr	r3, [pc, #300]	; (8005450 <USBD_CDC_Init+0x1ec>)
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	f003 020f 	and.w	r2, r3, #15
 800532a:	6879      	ldr	r1, [r7, #4]
 800532c:	4613      	mov	r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4413      	add	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	440b      	add	r3, r1
 8005336:	3326      	adds	r3, #38	; 0x26
 8005338:	2210      	movs	r2, #16
 800533a:	801a      	strh	r2, [r3, #0]
 800533c:	e035      	b.n	80053aa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800533e:	4b42      	ldr	r3, [pc, #264]	; (8005448 <USBD_CDC_Init+0x1e4>)
 8005340:	7819      	ldrb	r1, [r3, #0]
 8005342:	2340      	movs	r3, #64	; 0x40
 8005344:	2202      	movs	r2, #2
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f002 fbb7 	bl	8007aba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800534c:	4b3e      	ldr	r3, [pc, #248]	; (8005448 <USBD_CDC_Init+0x1e4>)
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	f003 020f 	and.w	r2, r3, #15
 8005354:	6879      	ldr	r1, [r7, #4]
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	440b      	add	r3, r1
 8005360:	3324      	adds	r3, #36	; 0x24
 8005362:	2201      	movs	r2, #1
 8005364:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005366:	4b39      	ldr	r3, [pc, #228]	; (800544c <USBD_CDC_Init+0x1e8>)
 8005368:	7819      	ldrb	r1, [r3, #0]
 800536a:	2340      	movs	r3, #64	; 0x40
 800536c:	2202      	movs	r2, #2
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f002 fba3 	bl	8007aba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005374:	4b35      	ldr	r3, [pc, #212]	; (800544c <USBD_CDC_Init+0x1e8>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	f003 020f 	and.w	r2, r3, #15
 800537c:	6879      	ldr	r1, [r7, #4]
 800537e:	4613      	mov	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	440b      	add	r3, r1
 8005388:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800538c:	2201      	movs	r2, #1
 800538e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005390:	4b2f      	ldr	r3, [pc, #188]	; (8005450 <USBD_CDC_Init+0x1ec>)
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	f003 020f 	and.w	r2, r3, #15
 8005398:	6879      	ldr	r1, [r7, #4]
 800539a:	4613      	mov	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	440b      	add	r3, r1
 80053a4:	3326      	adds	r3, #38	; 0x26
 80053a6:	2210      	movs	r2, #16
 80053a8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80053aa:	4b29      	ldr	r3, [pc, #164]	; (8005450 <USBD_CDC_Init+0x1ec>)
 80053ac:	7819      	ldrb	r1, [r3, #0]
 80053ae:	2308      	movs	r3, #8
 80053b0:	2203      	movs	r2, #3
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f002 fb81 	bl	8007aba <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80053b8:	4b25      	ldr	r3, [pc, #148]	; (8005450 <USBD_CDC_Init+0x1ec>)
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	f003 020f 	and.w	r2, r3, #15
 80053c0:	6879      	ldr	r1, [r7, #4]
 80053c2:	4613      	mov	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	440b      	add	r3, r1
 80053cc:	3324      	adds	r3, #36	; 0x24
 80053ce:	2201      	movs	r2, #1
 80053d0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	33b0      	adds	r3, #176	; 0xb0
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005408:	2302      	movs	r3, #2
 800540a:	e018      	b.n	800543e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	7c1b      	ldrb	r3, [r3, #16]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10a      	bne.n	800542a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005414:	4b0d      	ldr	r3, [pc, #52]	; (800544c <USBD_CDC_Init+0x1e8>)
 8005416:	7819      	ldrb	r1, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800541e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f002 fc38 	bl	8007c98 <USBD_LL_PrepareReceive>
 8005428:	e008      	b.n	800543c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800542a:	4b08      	ldr	r3, [pc, #32]	; (800544c <USBD_CDC_Init+0x1e8>)
 800542c:	7819      	ldrb	r1, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005434:	2340      	movs	r3, #64	; 0x40
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f002 fc2e 	bl	8007c98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	20000093 	.word	0x20000093
 800544c:	20000094 	.word	0x20000094
 8005450:	20000095 	.word	0x20000095

08005454 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	460b      	mov	r3, r1
 800545e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005460:	4b3a      	ldr	r3, [pc, #232]	; (800554c <USBD_CDC_DeInit+0xf8>)
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	4619      	mov	r1, r3
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f002 fb4d 	bl	8007b06 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800546c:	4b37      	ldr	r3, [pc, #220]	; (800554c <USBD_CDC_DeInit+0xf8>)
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	f003 020f 	and.w	r2, r3, #15
 8005474:	6879      	ldr	r1, [r7, #4]
 8005476:	4613      	mov	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	440b      	add	r3, r1
 8005480:	3324      	adds	r3, #36	; 0x24
 8005482:	2200      	movs	r2, #0
 8005484:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005486:	4b32      	ldr	r3, [pc, #200]	; (8005550 <USBD_CDC_DeInit+0xfc>)
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	4619      	mov	r1, r3
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f002 fb3a 	bl	8007b06 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005492:	4b2f      	ldr	r3, [pc, #188]	; (8005550 <USBD_CDC_DeInit+0xfc>)
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	f003 020f 	and.w	r2, r3, #15
 800549a:	6879      	ldr	r1, [r7, #4]
 800549c:	4613      	mov	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	440b      	add	r3, r1
 80054a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80054aa:	2200      	movs	r2, #0
 80054ac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80054ae:	4b29      	ldr	r3, [pc, #164]	; (8005554 <USBD_CDC_DeInit+0x100>)
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	4619      	mov	r1, r3
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f002 fb26 	bl	8007b06 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80054ba:	4b26      	ldr	r3, [pc, #152]	; (8005554 <USBD_CDC_DeInit+0x100>)
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	f003 020f 	and.w	r2, r3, #15
 80054c2:	6879      	ldr	r1, [r7, #4]
 80054c4:	4613      	mov	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	440b      	add	r3, r1
 80054ce:	3324      	adds	r3, #36	; 0x24
 80054d0:	2200      	movs	r2, #0
 80054d2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80054d4:	4b1f      	ldr	r3, [pc, #124]	; (8005554 <USBD_CDC_DeInit+0x100>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	f003 020f 	and.w	r2, r3, #15
 80054dc:	6879      	ldr	r1, [r7, #4]
 80054de:	4613      	mov	r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	440b      	add	r3, r1
 80054e8:	3326      	adds	r3, #38	; 0x26
 80054ea:	2200      	movs	r2, #0
 80054ec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	32b0      	adds	r2, #176	; 0xb0
 80054f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d01f      	beq.n	8005540 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	33b0      	adds	r3, #176	; 0xb0
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	32b0      	adds	r2, #176	; 0xb0
 800551e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005522:	4618      	mov	r0, r3
 8005524:	f002 fbfa 	bl	8007d1c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	32b0      	adds	r2, #176	; 0xb0
 8005532:	2100      	movs	r1, #0
 8005534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	20000093 	.word	0x20000093
 8005550:	20000094 	.word	0x20000094
 8005554:	20000095 	.word	0x20000095

08005558 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	32b0      	adds	r2, #176	; 0xb0
 800556c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005570:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005572:	2300      	movs	r3, #0
 8005574:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005576:	2300      	movs	r3, #0
 8005578:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800557a:	2300      	movs	r3, #0
 800557c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005584:	2303      	movs	r3, #3
 8005586:	e0bf      	b.n	8005708 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005590:	2b00      	cmp	r3, #0
 8005592:	d050      	beq.n	8005636 <USBD_CDC_Setup+0xde>
 8005594:	2b20      	cmp	r3, #32
 8005596:	f040 80af 	bne.w	80056f8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	88db      	ldrh	r3, [r3, #6]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d03a      	beq.n	8005618 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	b25b      	sxtb	r3, r3
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	da1b      	bge.n	80055e4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	33b0      	adds	r3, #176	; 0xb0
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80055c2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	88d2      	ldrh	r2, [r2, #6]
 80055c8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	88db      	ldrh	r3, [r3, #6]
 80055ce:	2b07      	cmp	r3, #7
 80055d0:	bf28      	it	cs
 80055d2:	2307      	movcs	r3, #7
 80055d4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	89fa      	ldrh	r2, [r7, #14]
 80055da:	4619      	mov	r1, r3
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f001 fd89 	bl	80070f4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80055e2:	e090      	b.n	8005706 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	785a      	ldrb	r2, [r3, #1]
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	88db      	ldrh	r3, [r3, #6]
 80055f2:	2b3f      	cmp	r3, #63	; 0x3f
 80055f4:	d803      	bhi.n	80055fe <USBD_CDC_Setup+0xa6>
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	88db      	ldrh	r3, [r3, #6]
 80055fa:	b2da      	uxtb	r2, r3
 80055fc:	e000      	b.n	8005600 <USBD_CDC_Setup+0xa8>
 80055fe:	2240      	movs	r2, #64	; 0x40
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005606:	6939      	ldr	r1, [r7, #16]
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800560e:	461a      	mov	r2, r3
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f001 fd9b 	bl	800714c <USBD_CtlPrepareRx>
      break;
 8005616:	e076      	b.n	8005706 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	33b0      	adds	r3, #176	; 0xb0
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	7850      	ldrb	r0, [r2, #1]
 800562e:	2200      	movs	r2, #0
 8005630:	6839      	ldr	r1, [r7, #0]
 8005632:	4798      	blx	r3
      break;
 8005634:	e067      	b.n	8005706 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	785b      	ldrb	r3, [r3, #1]
 800563a:	2b0b      	cmp	r3, #11
 800563c:	d851      	bhi.n	80056e2 <USBD_CDC_Setup+0x18a>
 800563e:	a201      	add	r2, pc, #4	; (adr r2, 8005644 <USBD_CDC_Setup+0xec>)
 8005640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005644:	08005675 	.word	0x08005675
 8005648:	080056f1 	.word	0x080056f1
 800564c:	080056e3 	.word	0x080056e3
 8005650:	080056e3 	.word	0x080056e3
 8005654:	080056e3 	.word	0x080056e3
 8005658:	080056e3 	.word	0x080056e3
 800565c:	080056e3 	.word	0x080056e3
 8005660:	080056e3 	.word	0x080056e3
 8005664:	080056e3 	.word	0x080056e3
 8005668:	080056e3 	.word	0x080056e3
 800566c:	0800569f 	.word	0x0800569f
 8005670:	080056c9 	.word	0x080056c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b03      	cmp	r3, #3
 800567e:	d107      	bne.n	8005690 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005680:	f107 030a 	add.w	r3, r7, #10
 8005684:	2202      	movs	r2, #2
 8005686:	4619      	mov	r1, r3
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f001 fd33 	bl	80070f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800568e:	e032      	b.n	80056f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005690:	6839      	ldr	r1, [r7, #0]
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f001 fcbd 	bl	8007012 <USBD_CtlError>
            ret = USBD_FAIL;
 8005698:	2303      	movs	r3, #3
 800569a:	75fb      	strb	r3, [r7, #23]
          break;
 800569c:	e02b      	b.n	80056f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b03      	cmp	r3, #3
 80056a8:	d107      	bne.n	80056ba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80056aa:	f107 030d 	add.w	r3, r7, #13
 80056ae:	2201      	movs	r2, #1
 80056b0:	4619      	mov	r1, r3
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f001 fd1e 	bl	80070f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80056b8:	e01d      	b.n	80056f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80056ba:	6839      	ldr	r1, [r7, #0]
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f001 fca8 	bl	8007012 <USBD_CtlError>
            ret = USBD_FAIL;
 80056c2:	2303      	movs	r3, #3
 80056c4:	75fb      	strb	r3, [r7, #23]
          break;
 80056c6:	e016      	b.n	80056f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b03      	cmp	r3, #3
 80056d2:	d00f      	beq.n	80056f4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80056d4:	6839      	ldr	r1, [r7, #0]
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f001 fc9b 	bl	8007012 <USBD_CtlError>
            ret = USBD_FAIL;
 80056dc:	2303      	movs	r3, #3
 80056de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80056e0:	e008      	b.n	80056f4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80056e2:	6839      	ldr	r1, [r7, #0]
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f001 fc94 	bl	8007012 <USBD_CtlError>
          ret = USBD_FAIL;
 80056ea:	2303      	movs	r3, #3
 80056ec:	75fb      	strb	r3, [r7, #23]
          break;
 80056ee:	e002      	b.n	80056f6 <USBD_CDC_Setup+0x19e>
          break;
 80056f0:	bf00      	nop
 80056f2:	e008      	b.n	8005706 <USBD_CDC_Setup+0x1ae>
          break;
 80056f4:	bf00      	nop
      }
      break;
 80056f6:	e006      	b.n	8005706 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80056f8:	6839      	ldr	r1, [r7, #0]
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f001 fc89 	bl	8007012 <USBD_CtlError>
      ret = USBD_FAIL;
 8005700:	2303      	movs	r3, #3
 8005702:	75fb      	strb	r3, [r7, #23]
      break;
 8005704:	bf00      	nop
  }

  return (uint8_t)ret;
 8005706:	7dfb      	ldrb	r3, [r7, #23]
}
 8005708:	4618      	mov	r0, r3
 800570a:	3718      	adds	r7, #24
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	460b      	mov	r3, r1
 800571a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005722:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	32b0      	adds	r2, #176	; 0xb0
 800572e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005736:	2303      	movs	r3, #3
 8005738:	e065      	b.n	8005806 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	32b0      	adds	r2, #176	; 0xb0
 8005744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005748:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800574a:	78fb      	ldrb	r3, [r7, #3]
 800574c:	f003 020f 	and.w	r2, r3, #15
 8005750:	6879      	ldr	r1, [r7, #4]
 8005752:	4613      	mov	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	440b      	add	r3, r1
 800575c:	3318      	adds	r3, #24
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d02f      	beq.n	80057c4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005764:	78fb      	ldrb	r3, [r7, #3]
 8005766:	f003 020f 	and.w	r2, r3, #15
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	4613      	mov	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	440b      	add	r3, r1
 8005776:	3318      	adds	r3, #24
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	78fb      	ldrb	r3, [r7, #3]
 800577c:	f003 010f 	and.w	r1, r3, #15
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	460b      	mov	r3, r1
 8005784:	00db      	lsls	r3, r3, #3
 8005786:	440b      	add	r3, r1
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4403      	add	r3, r0
 800578c:	3348      	adds	r3, #72	; 0x48
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	fbb2 f1f3 	udiv	r1, r2, r3
 8005794:	fb01 f303 	mul.w	r3, r1, r3
 8005798:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800579a:	2b00      	cmp	r3, #0
 800579c:	d112      	bne.n	80057c4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800579e:	78fb      	ldrb	r3, [r7, #3]
 80057a0:	f003 020f 	and.w	r2, r3, #15
 80057a4:	6879      	ldr	r1, [r7, #4]
 80057a6:	4613      	mov	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4413      	add	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	440b      	add	r3, r1
 80057b0:	3318      	adds	r3, #24
 80057b2:	2200      	movs	r2, #0
 80057b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80057b6:	78f9      	ldrb	r1, [r7, #3]
 80057b8:	2300      	movs	r3, #0
 80057ba:	2200      	movs	r2, #0
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f002 fa4a 	bl	8007c56 <USBD_LL_Transmit>
 80057c2:	e01f      	b.n	8005804 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	33b0      	adds	r3, #176	; 0xb0
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d010      	beq.n	8005804 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	33b0      	adds	r3, #176	; 0xb0
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005800:	78fa      	ldrb	r2, [r7, #3]
 8005802:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b084      	sub	sp, #16
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
 8005816:	460b      	mov	r3, r1
 8005818:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	32b0      	adds	r2, #176	; 0xb0
 8005824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005828:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	32b0      	adds	r2, #176	; 0xb0
 8005834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d101      	bne.n	8005840 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800583c:	2303      	movs	r3, #3
 800583e:	e01a      	b.n	8005876 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005840:	78fb      	ldrb	r3, [r7, #3]
 8005842:	4619      	mov	r1, r3
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f002 fa48 	bl	8007cda <USBD_LL_GetRxDataSize>
 800584a:	4602      	mov	r2, r0
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	33b0      	adds	r3, #176	; 0xb0
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4413      	add	r3, r2
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005870:	4611      	mov	r1, r2
 8005872:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b084      	sub	sp, #16
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	32b0      	adds	r2, #176	; 0xb0
 8005890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005894:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d101      	bne.n	80058a0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800589c:	2303      	movs	r3, #3
 800589e:	e025      	b.n	80058ec <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	33b0      	adds	r3, #176	; 0xb0
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d01a      	beq.n	80058ea <USBD_CDC_EP0_RxReady+0x6c>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80058ba:	2bff      	cmp	r3, #255	; 0xff
 80058bc:	d015      	beq.n	80058ea <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	33b0      	adds	r3, #176	; 0xb0
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80058d6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80058de:	b292      	uxth	r2, r2
 80058e0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	22ff      	movs	r2, #255	; 0xff
 80058e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80058fc:	2182      	movs	r1, #130	; 0x82
 80058fe:	4818      	ldr	r0, [pc, #96]	; (8005960 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005900:	f000 fd4f 	bl	80063a2 <USBD_GetEpDesc>
 8005904:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005906:	2101      	movs	r1, #1
 8005908:	4815      	ldr	r0, [pc, #84]	; (8005960 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800590a:	f000 fd4a 	bl	80063a2 <USBD_GetEpDesc>
 800590e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005910:	2181      	movs	r1, #129	; 0x81
 8005912:	4813      	ldr	r0, [pc, #76]	; (8005960 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005914:	f000 fd45 	bl	80063a2 <USBD_GetEpDesc>
 8005918:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	2210      	movs	r2, #16
 8005924:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d006      	beq.n	800593a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	2200      	movs	r2, #0
 8005930:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005934:	711a      	strb	r2, [r3, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d006      	beq.n	800594e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005948:	711a      	strb	r2, [r3, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2243      	movs	r2, #67	; 0x43
 8005952:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005954:	4b02      	ldr	r3, [pc, #8]	; (8005960 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005956:	4618      	mov	r0, r3
 8005958:	3718      	adds	r7, #24
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	20000050 	.word	0x20000050

08005964 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800596c:	2182      	movs	r1, #130	; 0x82
 800596e:	4818      	ldr	r0, [pc, #96]	; (80059d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005970:	f000 fd17 	bl	80063a2 <USBD_GetEpDesc>
 8005974:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005976:	2101      	movs	r1, #1
 8005978:	4815      	ldr	r0, [pc, #84]	; (80059d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800597a:	f000 fd12 	bl	80063a2 <USBD_GetEpDesc>
 800597e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005980:	2181      	movs	r1, #129	; 0x81
 8005982:	4813      	ldr	r0, [pc, #76]	; (80059d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005984:	f000 fd0d 	bl	80063a2 <USBD_GetEpDesc>
 8005988:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d002      	beq.n	8005996 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	2210      	movs	r2, #16
 8005994:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d006      	beq.n	80059aa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	2200      	movs	r2, #0
 80059a0:	711a      	strb	r2, [r3, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f042 0202 	orr.w	r2, r2, #2
 80059a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d006      	beq.n	80059be <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	711a      	strb	r2, [r3, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f042 0202 	orr.w	r2, r2, #2
 80059bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2243      	movs	r2, #67	; 0x43
 80059c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80059c4:	4b02      	ldr	r3, [pc, #8]	; (80059d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	20000050 	.word	0x20000050

080059d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80059dc:	2182      	movs	r1, #130	; 0x82
 80059de:	4818      	ldr	r0, [pc, #96]	; (8005a40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80059e0:	f000 fcdf 	bl	80063a2 <USBD_GetEpDesc>
 80059e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80059e6:	2101      	movs	r1, #1
 80059e8:	4815      	ldr	r0, [pc, #84]	; (8005a40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80059ea:	f000 fcda 	bl	80063a2 <USBD_GetEpDesc>
 80059ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80059f0:	2181      	movs	r1, #129	; 0x81
 80059f2:	4813      	ldr	r0, [pc, #76]	; (8005a40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80059f4:	f000 fcd5 	bl	80063a2 <USBD_GetEpDesc>
 80059f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	2210      	movs	r2, #16
 8005a04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d006      	beq.n	8005a1a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a14:	711a      	strb	r2, [r3, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d006      	beq.n	8005a2e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a28:	711a      	strb	r2, [r3, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2243      	movs	r2, #67	; 0x43
 8005a32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005a34:	4b02      	ldr	r3, [pc, #8]	; (8005a40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3718      	adds	r7, #24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	20000050 	.word	0x20000050

08005a44 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	220a      	movs	r2, #10
 8005a50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005a52:	4b03      	ldr	r3, [pc, #12]	; (8005a60 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr
 8005a60:	2000000c 	.word	0x2000000c

08005a64 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d101      	bne.n	8005a78 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e009      	b.n	8005a8c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	33b0      	adds	r3, #176	; 0xb0
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4413      	add	r3, r2
 8005a86:	683a      	ldr	r2, [r7, #0]
 8005a88:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	32b0      	adds	r2, #176	; 0xb0
 8005aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ab2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e008      	b.n	8005ad0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	371c      	adds	r7, #28
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	32b0      	adds	r2, #176	; 0xb0
 8005af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005af4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d101      	bne.n	8005b00 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e004      	b.n	8005b0a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
	...

08005b18 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	32b0      	adds	r2, #176	; 0xb0
 8005b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b2e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005b30:	2301      	movs	r3, #1
 8005b32:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	32b0      	adds	r2, #176	; 0xb0
 8005b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e025      	b.n	8005b96 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d11f      	bne.n	8005b94 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005b5c:	4b10      	ldr	r3, [pc, #64]	; (8005ba0 <USBD_CDC_TransmitPacket+0x88>)
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	f003 020f 	and.w	r2, r3, #15
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4403      	add	r3, r0
 8005b76:	3318      	adds	r3, #24
 8005b78:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005b7a:	4b09      	ldr	r3, [pc, #36]	; (8005ba0 <USBD_CDC_TransmitPacket+0x88>)
 8005b7c:	7819      	ldrb	r1, [r3, #0]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f002 f863 	bl	8007c56 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005b90:	2300      	movs	r3, #0
 8005b92:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	20000093 	.word	0x20000093

08005ba4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	32b0      	adds	r2, #176	; 0xb0
 8005bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	32b0      	adds	r2, #176	; 0xb0
 8005bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e018      	b.n	8005c04 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	7c1b      	ldrb	r3, [r3, #16]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10a      	bne.n	8005bf0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005bda:	4b0c      	ldr	r3, [pc, #48]	; (8005c0c <USBD_CDC_ReceivePacket+0x68>)
 8005bdc:	7819      	ldrb	r1, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005be4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f002 f855 	bl	8007c98 <USBD_LL_PrepareReceive>
 8005bee:	e008      	b.n	8005c02 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005bf0:	4b06      	ldr	r3, [pc, #24]	; (8005c0c <USBD_CDC_ReceivePacket+0x68>)
 8005bf2:	7819      	ldrb	r1, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005bfa:	2340      	movs	r3, #64	; 0x40
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f002 f84b 	bl	8007c98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	20000094 	.word	0x20000094

08005c10 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e01f      	b.n	8005c68 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	79fa      	ldrb	r2, [r7, #7]
 8005c5a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f001 fec5 	bl	80079ec <USBD_LL_Init>
 8005c62:	4603      	mov	r3, r0
 8005c64:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3718      	adds	r7, #24
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e025      	b.n	8005cd4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	32ae      	adds	r2, #174	; 0xae
 8005c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00f      	beq.n	8005cc4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	32ae      	adds	r2, #174	; 0xae
 8005cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb4:	f107 020e 	add.w	r2, r7, #14
 8005cb8:	4610      	mov	r0, r2
 8005cba:	4798      	blx	r3
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005cca:	1c5a      	adds	r2, r3, #1
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f001 fecd 	bl	8007a84 <USBD_LL_Start>
 8005cea:	4603      	mov	r3, r0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3708      	adds	r7, #8
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005cfc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b084      	sub	sp, #16
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	460b      	mov	r3, r1
 8005d14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d009      	beq.n	8005d38 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	78fa      	ldrb	r2, [r7, #3]
 8005d2e:	4611      	mov	r1, r2
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	4798      	blx	r3
 8005d34:	4603      	mov	r3, r0
 8005d36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b084      	sub	sp, #16
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	78fa      	ldrb	r2, [r7, #3]
 8005d5c:	4611      	mov	r1, r2
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	4798      	blx	r3
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b084      	sub	sp, #16
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
 8005d7e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d86:	6839      	ldr	r1, [r7, #0]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f001 f908 	bl	8006f9e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005daa:	f003 031f 	and.w	r3, r3, #31
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d01a      	beq.n	8005de8 <USBD_LL_SetupStage+0x72>
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d822      	bhi.n	8005dfc <USBD_LL_SetupStage+0x86>
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d002      	beq.n	8005dc0 <USBD_LL_SetupStage+0x4a>
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d00a      	beq.n	8005dd4 <USBD_LL_SetupStage+0x5e>
 8005dbe:	e01d      	b.n	8005dfc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 fb5f 	bl	800648c <USBD_StdDevReq>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	73fb      	strb	r3, [r7, #15]
      break;
 8005dd2:	e020      	b.n	8005e16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005dda:	4619      	mov	r1, r3
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 fbc7 	bl	8006570 <USBD_StdItfReq>
 8005de2:	4603      	mov	r3, r0
 8005de4:	73fb      	strb	r3, [r7, #15]
      break;
 8005de6:	e016      	b.n	8005e16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005dee:	4619      	mov	r1, r3
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 fc29 	bl	8006648 <USBD_StdEPReq>
 8005df6:	4603      	mov	r3, r0
 8005df8:	73fb      	strb	r3, [r7, #15]
      break;
 8005dfa:	e00c      	b.n	8005e16 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e02:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	4619      	mov	r1, r3
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f001 fe9a 	bl	8007b44 <USBD_LL_StallEP>
 8005e10:	4603      	mov	r3, r0
 8005e12:	73fb      	strb	r3, [r7, #15]
      break;
 8005e14:	bf00      	nop
  }

  return ret;
 8005e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	460b      	mov	r3, r1
 8005e2a:	607a      	str	r2, [r7, #4]
 8005e2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005e32:	7afb      	ldrb	r3, [r7, #11]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d16e      	bne.n	8005f16 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005e3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e46:	2b03      	cmp	r3, #3
 8005e48:	f040 8098 	bne.w	8005f7c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d913      	bls.n	8005e80 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	689a      	ldr	r2, [r3, #8]
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	1ad2      	subs	r2, r2, r3
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	bf28      	it	cs
 8005e72:	4613      	movcs	r3, r2
 8005e74:	461a      	mov	r2, r3
 8005e76:	6879      	ldr	r1, [r7, #4]
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f001 f984 	bl	8007186 <USBD_CtlContinueRx>
 8005e7e:	e07d      	b.n	8005f7c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e86:	f003 031f 	and.w	r3, r3, #31
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d014      	beq.n	8005eb8 <USBD_LL_DataOutStage+0x98>
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d81d      	bhi.n	8005ece <USBD_LL_DataOutStage+0xae>
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d002      	beq.n	8005e9c <USBD_LL_DataOutStage+0x7c>
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d003      	beq.n	8005ea2 <USBD_LL_DataOutStage+0x82>
 8005e9a:	e018      	b.n	8005ece <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	75bb      	strb	r3, [r7, #22]
            break;
 8005ea0:	e018      	b.n	8005ed4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	4619      	mov	r1, r3
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f000 fa5e 	bl	800636e <USBD_CoreFindIF>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	75bb      	strb	r3, [r7, #22]
            break;
 8005eb6:	e00d      	b.n	8005ed4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f000 fa60 	bl	8006388 <USBD_CoreFindEP>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	75bb      	strb	r3, [r7, #22]
            break;
 8005ecc:	e002      	b.n	8005ed4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	75bb      	strb	r3, [r7, #22]
            break;
 8005ed2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005ed4:	7dbb      	ldrb	r3, [r7, #22]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d119      	bne.n	8005f0e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b03      	cmp	r3, #3
 8005ee4:	d113      	bne.n	8005f0e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005ee6:	7dba      	ldrb	r2, [r7, #22]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	32ae      	adds	r2, #174	; 0xae
 8005eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00b      	beq.n	8005f0e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005ef6:	7dba      	ldrb	r2, [r7, #22]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005efe:	7dba      	ldrb	r2, [r7, #22]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	32ae      	adds	r2, #174	; 0xae
 8005f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f001 f94a 	bl	80071a8 <USBD_CtlSendStatus>
 8005f14:	e032      	b.n	8005f7c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005f16:	7afb      	ldrb	r3, [r7, #11]
 8005f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	4619      	mov	r1, r3
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f000 fa31 	bl	8006388 <USBD_CoreFindEP>
 8005f26:	4603      	mov	r3, r0
 8005f28:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f2a:	7dbb      	ldrb	r3, [r7, #22]
 8005f2c:	2bff      	cmp	r3, #255	; 0xff
 8005f2e:	d025      	beq.n	8005f7c <USBD_LL_DataOutStage+0x15c>
 8005f30:	7dbb      	ldrb	r3, [r7, #22]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d122      	bne.n	8005f7c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b03      	cmp	r3, #3
 8005f40:	d117      	bne.n	8005f72 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005f42:	7dba      	ldrb	r2, [r7, #22]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	32ae      	adds	r2, #174	; 0xae
 8005f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00f      	beq.n	8005f72 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005f52:	7dba      	ldrb	r2, [r7, #22]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005f5a:	7dba      	ldrb	r2, [r7, #22]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	32ae      	adds	r2, #174	; 0xae
 8005f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	7afa      	ldrb	r2, [r7, #11]
 8005f68:	4611      	mov	r1, r2
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	4798      	blx	r3
 8005f6e:	4603      	mov	r3, r0
 8005f70:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005f72:	7dfb      	ldrb	r3, [r7, #23]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005f78:	7dfb      	ldrb	r3, [r7, #23]
 8005f7a:	e000      	b.n	8005f7e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3718      	adds	r7, #24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b086      	sub	sp, #24
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	60f8      	str	r0, [r7, #12]
 8005f8e:	460b      	mov	r3, r1
 8005f90:	607a      	str	r2, [r7, #4]
 8005f92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005f94:	7afb      	ldrb	r3, [r7, #11]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d16f      	bne.n	800607a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	3314      	adds	r3, #20
 8005f9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d15a      	bne.n	8006060 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	689a      	ldr	r2, [r3, #8]
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d914      	bls.n	8005fe0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	689a      	ldr	r2, [r3, #8]
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	1ad2      	subs	r2, r2, r3
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	461a      	mov	r2, r3
 8005fca:	6879      	ldr	r1, [r7, #4]
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f001 f8ac 	bl	800712a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f001 fe5d 	bl	8007c98 <USBD_LL_PrepareReceive>
 8005fde:	e03f      	b.n	8006060 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	68da      	ldr	r2, [r3, #12]
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d11c      	bne.n	8006026 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	685a      	ldr	r2, [r3, #4]
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d316      	bcc.n	8006026 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	685a      	ldr	r2, [r3, #4]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006002:	429a      	cmp	r2, r3
 8006004:	d20f      	bcs.n	8006026 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006006:	2200      	movs	r2, #0
 8006008:	2100      	movs	r1, #0
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f001 f88d 	bl	800712a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006018:	2300      	movs	r3, #0
 800601a:	2200      	movs	r2, #0
 800601c:	2100      	movs	r1, #0
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f001 fe3a 	bl	8007c98 <USBD_LL_PrepareReceive>
 8006024:	e01c      	b.n	8006060 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b03      	cmp	r3, #3
 8006030:	d10f      	bne.n	8006052 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d009      	beq.n	8006052 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006052:	2180      	movs	r1, #128	; 0x80
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f001 fd75 	bl	8007b44 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f001 f8b7 	bl	80071ce <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d03a      	beq.n	80060e0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f7ff fe42 	bl	8005cf4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006078:	e032      	b.n	80060e0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800607a:	7afb      	ldrb	r3, [r7, #11]
 800607c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006080:	b2db      	uxtb	r3, r3
 8006082:	4619      	mov	r1, r3
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 f97f 	bl	8006388 <USBD_CoreFindEP>
 800608a:	4603      	mov	r3, r0
 800608c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800608e:	7dfb      	ldrb	r3, [r7, #23]
 8006090:	2bff      	cmp	r3, #255	; 0xff
 8006092:	d025      	beq.n	80060e0 <USBD_LL_DataInStage+0x15a>
 8006094:	7dfb      	ldrb	r3, [r7, #23]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d122      	bne.n	80060e0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b03      	cmp	r3, #3
 80060a4:	d11c      	bne.n	80060e0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80060a6:	7dfa      	ldrb	r2, [r7, #23]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	32ae      	adds	r2, #174	; 0xae
 80060ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d014      	beq.n	80060e0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80060b6:	7dfa      	ldrb	r2, [r7, #23]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80060be:	7dfa      	ldrb	r2, [r7, #23]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	32ae      	adds	r2, #174	; 0xae
 80060c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	7afa      	ldrb	r2, [r7, #11]
 80060cc:	4611      	mov	r1, r2
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	4798      	blx	r3
 80060d2:	4603      	mov	r3, r0
 80060d4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80060d6:	7dbb      	ldrb	r3, [r7, #22]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d001      	beq.n	80060e0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80060dc:	7dbb      	ldrb	r3, [r7, #22]
 80060de:	e000      	b.n	80060e2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3718      	adds	r7, #24
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b084      	sub	sp, #16
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006122:	2b00      	cmp	r3, #0
 8006124:	d014      	beq.n	8006150 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00e      	beq.n	8006150 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	6852      	ldr	r2, [r2, #4]
 800613e:	b2d2      	uxtb	r2, r2
 8006140:	4611      	mov	r1, r2
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	4798      	blx	r3
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800614c:	2303      	movs	r3, #3
 800614e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006150:	2340      	movs	r3, #64	; 0x40
 8006152:	2200      	movs	r2, #0
 8006154:	2100      	movs	r1, #0
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f001 fcaf 	bl	8007aba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2240      	movs	r2, #64	; 0x40
 8006168:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800616c:	2340      	movs	r3, #64	; 0x40
 800616e:	2200      	movs	r2, #0
 8006170:	2180      	movs	r1, #128	; 0x80
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f001 fca1 	bl	8007aba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2240      	movs	r2, #64	; 0x40
 8006182:	621a      	str	r2, [r3, #32]

  return ret;
 8006184:	7bfb      	ldrb	r3, [r7, #15]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800618e:	b480      	push	{r7}
 8006190:	b083      	sub	sp, #12
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
 8006196:	460b      	mov	r3, r1
 8006198:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	78fa      	ldrb	r2, [r7, #3]
 800619e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b083      	sub	sp, #12
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061bc:	b2da      	uxtb	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2204      	movs	r2, #4
 80061c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80061da:	b480      	push	{r7}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b04      	cmp	r3, #4
 80061ec:	d106      	bne.n	80061fc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b082      	sub	sp, #8
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b03      	cmp	r3, #3
 800621c:	d110      	bne.n	8006240 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00b      	beq.n	8006240 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800622e:	69db      	ldr	r3, [r3, #28]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d005      	beq.n	8006240 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b082      	sub	sp, #8
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	460b      	mov	r3, r1
 8006254:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	32ae      	adds	r2, #174	; 0xae
 8006260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006268:	2303      	movs	r3, #3
 800626a:	e01c      	b.n	80062a6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b03      	cmp	r3, #3
 8006276:	d115      	bne.n	80062a4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	32ae      	adds	r2, #174	; 0xae
 8006282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00b      	beq.n	80062a4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	32ae      	adds	r2, #174	; 0xae
 8006296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	78fa      	ldrb	r2, [r7, #3]
 800629e:	4611      	mov	r1, r2
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b082      	sub	sp, #8
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
 80062b6:	460b      	mov	r3, r1
 80062b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	32ae      	adds	r2, #174	; 0xae
 80062c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d101      	bne.n	80062d0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e01c      	b.n	800630a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b03      	cmp	r3, #3
 80062da:	d115      	bne.n	8006308 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	32ae      	adds	r2, #174	; 0xae
 80062e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00b      	beq.n	8006308 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	32ae      	adds	r2, #174	; 0xae
 80062fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	78fa      	ldrb	r2, [r7, #3]
 8006302:	4611      	mov	r1, r2
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3708      	adds	r7, #8
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006312:	b480      	push	{r7}
 8006314:	b083      	sub	sp, #12
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006330:	2300      	movs	r3, #0
 8006332:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00e      	beq.n	8006364 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	6852      	ldr	r2, [r2, #4]
 8006352:	b2d2      	uxtb	r2, r2
 8006354:	4611      	mov	r1, r2
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	4798      	blx	r3
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006360:	2303      	movs	r3, #3
 8006362:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006364:	7bfb      	ldrb	r3, [r7, #15]
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800636e:	b480      	push	{r7}
 8006370:	b083      	sub	sp, #12
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
 8006376:	460b      	mov	r3, r1
 8006378:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800637a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800637c:	4618      	mov	r0, r3
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	460b      	mov	r3, r1
 8006392:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006394:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006396:	4618      	mov	r0, r3
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b086      	sub	sp, #24
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
 80063aa:	460b      	mov	r3, r1
 80063ac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80063b6:	2300      	movs	r3, #0
 80063b8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	885b      	ldrh	r3, [r3, #2]
 80063be:	b29a      	uxth	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d920      	bls.n	800640c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80063d2:	e013      	b.n	80063fc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80063d4:	f107 030a 	add.w	r3, r7, #10
 80063d8:	4619      	mov	r1, r3
 80063da:	6978      	ldr	r0, [r7, #20]
 80063dc:	f000 f81b 	bl	8006416 <USBD_GetNextDesc>
 80063e0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	785b      	ldrb	r3, [r3, #1]
 80063e6:	2b05      	cmp	r3, #5
 80063e8:	d108      	bne.n	80063fc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	789b      	ldrb	r3, [r3, #2]
 80063f2:	78fa      	ldrb	r2, [r7, #3]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d008      	beq.n	800640a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80063f8:	2300      	movs	r3, #0
 80063fa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	885b      	ldrh	r3, [r3, #2]
 8006400:	b29a      	uxth	r2, r3
 8006402:	897b      	ldrh	r3, [r7, #10]
 8006404:	429a      	cmp	r2, r3
 8006406:	d8e5      	bhi.n	80063d4 <USBD_GetEpDesc+0x32>
 8006408:	e000      	b.n	800640c <USBD_GetEpDesc+0x6a>
          break;
 800640a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800640c:	693b      	ldr	r3, [r7, #16]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3718      	adds	r7, #24
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006416:	b480      	push	{r7}
 8006418:	b085      	sub	sp, #20
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	881a      	ldrh	r2, [r3, #0]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	b29b      	uxth	r3, r3
 800642e:	4413      	add	r3, r2
 8006430:	b29a      	uxth	r2, r3
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	461a      	mov	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4413      	add	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006442:	68fb      	ldr	r3, [r7, #12]
}
 8006444:	4618      	mov	r0, r3
 8006446:	3714      	adds	r7, #20
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006450:	b480      	push	{r7}
 8006452:	b087      	sub	sp, #28
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	3301      	adds	r3, #1
 8006466:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800646e:	8a3b      	ldrh	r3, [r7, #16]
 8006470:	021b      	lsls	r3, r3, #8
 8006472:	b21a      	sxth	r2, r3
 8006474:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006478:	4313      	orrs	r3, r2
 800647a:	b21b      	sxth	r3, r3
 800647c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800647e:	89fb      	ldrh	r3, [r7, #14]
}
 8006480:	4618      	mov	r0, r3
 8006482:	371c      	adds	r7, #28
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006496:	2300      	movs	r3, #0
 8006498:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064a2:	2b40      	cmp	r3, #64	; 0x40
 80064a4:	d005      	beq.n	80064b2 <USBD_StdDevReq+0x26>
 80064a6:	2b40      	cmp	r3, #64	; 0x40
 80064a8:	d857      	bhi.n	800655a <USBD_StdDevReq+0xce>
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00f      	beq.n	80064ce <USBD_StdDevReq+0x42>
 80064ae:	2b20      	cmp	r3, #32
 80064b0:	d153      	bne.n	800655a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	32ae      	adds	r2, #174	; 0xae
 80064bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	6839      	ldr	r1, [r7, #0]
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	4798      	blx	r3
 80064c8:	4603      	mov	r3, r0
 80064ca:	73fb      	strb	r3, [r7, #15]
      break;
 80064cc:	e04a      	b.n	8006564 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	785b      	ldrb	r3, [r3, #1]
 80064d2:	2b09      	cmp	r3, #9
 80064d4:	d83b      	bhi.n	800654e <USBD_StdDevReq+0xc2>
 80064d6:	a201      	add	r2, pc, #4	; (adr r2, 80064dc <USBD_StdDevReq+0x50>)
 80064d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064dc:	08006531 	.word	0x08006531
 80064e0:	08006545 	.word	0x08006545
 80064e4:	0800654f 	.word	0x0800654f
 80064e8:	0800653b 	.word	0x0800653b
 80064ec:	0800654f 	.word	0x0800654f
 80064f0:	0800650f 	.word	0x0800650f
 80064f4:	08006505 	.word	0x08006505
 80064f8:	0800654f 	.word	0x0800654f
 80064fc:	08006527 	.word	0x08006527
 8006500:	08006519 	.word	0x08006519
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fa3c 	bl	8006984 <USBD_GetDescriptor>
          break;
 800650c:	e024      	b.n	8006558 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800650e:	6839      	ldr	r1, [r7, #0]
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 fba1 	bl	8006c58 <USBD_SetAddress>
          break;
 8006516:	e01f      	b.n	8006558 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006518:	6839      	ldr	r1, [r7, #0]
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fbe0 	bl	8006ce0 <USBD_SetConfig>
 8006520:	4603      	mov	r3, r0
 8006522:	73fb      	strb	r3, [r7, #15]
          break;
 8006524:	e018      	b.n	8006558 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006526:	6839      	ldr	r1, [r7, #0]
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 fc83 	bl	8006e34 <USBD_GetConfig>
          break;
 800652e:	e013      	b.n	8006558 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006530:	6839      	ldr	r1, [r7, #0]
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fcb4 	bl	8006ea0 <USBD_GetStatus>
          break;
 8006538:	e00e      	b.n	8006558 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800653a:	6839      	ldr	r1, [r7, #0]
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fce3 	bl	8006f08 <USBD_SetFeature>
          break;
 8006542:	e009      	b.n	8006558 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006544:	6839      	ldr	r1, [r7, #0]
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fd07 	bl	8006f5a <USBD_ClrFeature>
          break;
 800654c:	e004      	b.n	8006558 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800654e:	6839      	ldr	r1, [r7, #0]
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fd5e 	bl	8007012 <USBD_CtlError>
          break;
 8006556:	bf00      	nop
      }
      break;
 8006558:	e004      	b.n	8006564 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800655a:	6839      	ldr	r1, [r7, #0]
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fd58 	bl	8007012 <USBD_CtlError>
      break;
 8006562:	bf00      	nop
  }

  return ret;
 8006564:	7bfb      	ldrb	r3, [r7, #15]
}
 8006566:	4618      	mov	r0, r3
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop

08006570 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800657a:	2300      	movs	r3, #0
 800657c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006586:	2b40      	cmp	r3, #64	; 0x40
 8006588:	d005      	beq.n	8006596 <USBD_StdItfReq+0x26>
 800658a:	2b40      	cmp	r3, #64	; 0x40
 800658c:	d852      	bhi.n	8006634 <USBD_StdItfReq+0xc4>
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <USBD_StdItfReq+0x26>
 8006592:	2b20      	cmp	r3, #32
 8006594:	d14e      	bne.n	8006634 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800659c:	b2db      	uxtb	r3, r3
 800659e:	3b01      	subs	r3, #1
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d840      	bhi.n	8006626 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	889b      	ldrh	r3, [r3, #4]
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d836      	bhi.n	800661c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	889b      	ldrh	r3, [r3, #4]
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	4619      	mov	r1, r3
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7ff fed9 	bl	800636e <USBD_CoreFindIF>
 80065bc:	4603      	mov	r3, r0
 80065be:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065c0:	7bbb      	ldrb	r3, [r7, #14]
 80065c2:	2bff      	cmp	r3, #255	; 0xff
 80065c4:	d01d      	beq.n	8006602 <USBD_StdItfReq+0x92>
 80065c6:	7bbb      	ldrb	r3, [r7, #14]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d11a      	bne.n	8006602 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80065cc:	7bba      	ldrb	r2, [r7, #14]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	32ae      	adds	r2, #174	; 0xae
 80065d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00f      	beq.n	80065fc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80065dc:	7bba      	ldrb	r2, [r7, #14]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80065e4:	7bba      	ldrb	r2, [r7, #14]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	32ae      	adds	r2, #174	; 0xae
 80065ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	6839      	ldr	r1, [r7, #0]
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	4798      	blx	r3
 80065f6:	4603      	mov	r3, r0
 80065f8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80065fa:	e004      	b.n	8006606 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80065fc:	2303      	movs	r3, #3
 80065fe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006600:	e001      	b.n	8006606 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006602:	2303      	movs	r3, #3
 8006604:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	88db      	ldrh	r3, [r3, #6]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d110      	bne.n	8006630 <USBD_StdItfReq+0xc0>
 800660e:	7bfb      	ldrb	r3, [r7, #15]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10d      	bne.n	8006630 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 fdc7 	bl	80071a8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800661a:	e009      	b.n	8006630 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800661c:	6839      	ldr	r1, [r7, #0]
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 fcf7 	bl	8007012 <USBD_CtlError>
          break;
 8006624:	e004      	b.n	8006630 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006626:	6839      	ldr	r1, [r7, #0]
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 fcf2 	bl	8007012 <USBD_CtlError>
          break;
 800662e:	e000      	b.n	8006632 <USBD_StdItfReq+0xc2>
          break;
 8006630:	bf00      	nop
      }
      break;
 8006632:	e004      	b.n	800663e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006634:	6839      	ldr	r1, [r7, #0]
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 fceb 	bl	8007012 <USBD_CtlError>
      break;
 800663c:	bf00      	nop
  }

  return ret;
 800663e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006652:	2300      	movs	r3, #0
 8006654:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	889b      	ldrh	r3, [r3, #4]
 800665a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006664:	2b40      	cmp	r3, #64	; 0x40
 8006666:	d007      	beq.n	8006678 <USBD_StdEPReq+0x30>
 8006668:	2b40      	cmp	r3, #64	; 0x40
 800666a:	f200 817f 	bhi.w	800696c <USBD_StdEPReq+0x324>
 800666e:	2b00      	cmp	r3, #0
 8006670:	d02a      	beq.n	80066c8 <USBD_StdEPReq+0x80>
 8006672:	2b20      	cmp	r3, #32
 8006674:	f040 817a 	bne.w	800696c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006678:	7bbb      	ldrb	r3, [r7, #14]
 800667a:	4619      	mov	r1, r3
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f7ff fe83 	bl	8006388 <USBD_CoreFindEP>
 8006682:	4603      	mov	r3, r0
 8006684:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006686:	7b7b      	ldrb	r3, [r7, #13]
 8006688:	2bff      	cmp	r3, #255	; 0xff
 800668a:	f000 8174 	beq.w	8006976 <USBD_StdEPReq+0x32e>
 800668e:	7b7b      	ldrb	r3, [r7, #13]
 8006690:	2b00      	cmp	r3, #0
 8006692:	f040 8170 	bne.w	8006976 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006696:	7b7a      	ldrb	r2, [r7, #13]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800669e:	7b7a      	ldrb	r2, [r7, #13]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	32ae      	adds	r2, #174	; 0xae
 80066a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f000 8163 	beq.w	8006976 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80066b0:	7b7a      	ldrb	r2, [r7, #13]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	32ae      	adds	r2, #174	; 0xae
 80066b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	6839      	ldr	r1, [r7, #0]
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	4798      	blx	r3
 80066c2:	4603      	mov	r3, r0
 80066c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80066c6:	e156      	b.n	8006976 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	785b      	ldrb	r3, [r3, #1]
 80066cc:	2b03      	cmp	r3, #3
 80066ce:	d008      	beq.n	80066e2 <USBD_StdEPReq+0x9a>
 80066d0:	2b03      	cmp	r3, #3
 80066d2:	f300 8145 	bgt.w	8006960 <USBD_StdEPReq+0x318>
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f000 809b 	beq.w	8006812 <USBD_StdEPReq+0x1ca>
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d03c      	beq.n	800675a <USBD_StdEPReq+0x112>
 80066e0:	e13e      	b.n	8006960 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d002      	beq.n	80066f4 <USBD_StdEPReq+0xac>
 80066ee:	2b03      	cmp	r3, #3
 80066f0:	d016      	beq.n	8006720 <USBD_StdEPReq+0xd8>
 80066f2:	e02c      	b.n	800674e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066f4:	7bbb      	ldrb	r3, [r7, #14]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00d      	beq.n	8006716 <USBD_StdEPReq+0xce>
 80066fa:	7bbb      	ldrb	r3, [r7, #14]
 80066fc:	2b80      	cmp	r3, #128	; 0x80
 80066fe:	d00a      	beq.n	8006716 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006700:	7bbb      	ldrb	r3, [r7, #14]
 8006702:	4619      	mov	r1, r3
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f001 fa1d 	bl	8007b44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800670a:	2180      	movs	r1, #128	; 0x80
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f001 fa19 	bl	8007b44 <USBD_LL_StallEP>
 8006712:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006714:	e020      	b.n	8006758 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006716:	6839      	ldr	r1, [r7, #0]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fc7a 	bl	8007012 <USBD_CtlError>
              break;
 800671e:	e01b      	b.n	8006758 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	885b      	ldrh	r3, [r3, #2]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10e      	bne.n	8006746 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006728:	7bbb      	ldrb	r3, [r7, #14]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00b      	beq.n	8006746 <USBD_StdEPReq+0xfe>
 800672e:	7bbb      	ldrb	r3, [r7, #14]
 8006730:	2b80      	cmp	r3, #128	; 0x80
 8006732:	d008      	beq.n	8006746 <USBD_StdEPReq+0xfe>
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	88db      	ldrh	r3, [r3, #6]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d104      	bne.n	8006746 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800673c:	7bbb      	ldrb	r3, [r7, #14]
 800673e:	4619      	mov	r1, r3
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f001 f9ff 	bl	8007b44 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fd2e 	bl	80071a8 <USBD_CtlSendStatus>

              break;
 800674c:	e004      	b.n	8006758 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800674e:	6839      	ldr	r1, [r7, #0]
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 fc5e 	bl	8007012 <USBD_CtlError>
              break;
 8006756:	bf00      	nop
          }
          break;
 8006758:	e107      	b.n	800696a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b02      	cmp	r3, #2
 8006764:	d002      	beq.n	800676c <USBD_StdEPReq+0x124>
 8006766:	2b03      	cmp	r3, #3
 8006768:	d016      	beq.n	8006798 <USBD_StdEPReq+0x150>
 800676a:	e04b      	b.n	8006804 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800676c:	7bbb      	ldrb	r3, [r7, #14]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00d      	beq.n	800678e <USBD_StdEPReq+0x146>
 8006772:	7bbb      	ldrb	r3, [r7, #14]
 8006774:	2b80      	cmp	r3, #128	; 0x80
 8006776:	d00a      	beq.n	800678e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006778:	7bbb      	ldrb	r3, [r7, #14]
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f001 f9e1 	bl	8007b44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006782:	2180      	movs	r1, #128	; 0x80
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f001 f9dd 	bl	8007b44 <USBD_LL_StallEP>
 800678a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800678c:	e040      	b.n	8006810 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800678e:	6839      	ldr	r1, [r7, #0]
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fc3e 	bl	8007012 <USBD_CtlError>
              break;
 8006796:	e03b      	b.n	8006810 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	885b      	ldrh	r3, [r3, #2]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d136      	bne.n	800680e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80067a0:	7bbb      	ldrb	r3, [r7, #14]
 80067a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d004      	beq.n	80067b4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80067aa:	7bbb      	ldrb	r3, [r7, #14]
 80067ac:	4619      	mov	r1, r3
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f001 f9e7 	bl	8007b82 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 fcf7 	bl	80071a8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80067ba:	7bbb      	ldrb	r3, [r7, #14]
 80067bc:	4619      	mov	r1, r3
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f7ff fde2 	bl	8006388 <USBD_CoreFindEP>
 80067c4:	4603      	mov	r3, r0
 80067c6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067c8:	7b7b      	ldrb	r3, [r7, #13]
 80067ca:	2bff      	cmp	r3, #255	; 0xff
 80067cc:	d01f      	beq.n	800680e <USBD_StdEPReq+0x1c6>
 80067ce:	7b7b      	ldrb	r3, [r7, #13]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d11c      	bne.n	800680e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80067d4:	7b7a      	ldrb	r2, [r7, #13]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80067dc:	7b7a      	ldrb	r2, [r7, #13]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	32ae      	adds	r2, #174	; 0xae
 80067e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d010      	beq.n	800680e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80067ec:	7b7a      	ldrb	r2, [r7, #13]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	32ae      	adds	r2, #174	; 0xae
 80067f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	6839      	ldr	r1, [r7, #0]
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	4798      	blx	r3
 80067fe:	4603      	mov	r3, r0
 8006800:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006802:	e004      	b.n	800680e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006804:	6839      	ldr	r1, [r7, #0]
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fc03 	bl	8007012 <USBD_CtlError>
              break;
 800680c:	e000      	b.n	8006810 <USBD_StdEPReq+0x1c8>
              break;
 800680e:	bf00      	nop
          }
          break;
 8006810:	e0ab      	b.n	800696a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b02      	cmp	r3, #2
 800681c:	d002      	beq.n	8006824 <USBD_StdEPReq+0x1dc>
 800681e:	2b03      	cmp	r3, #3
 8006820:	d032      	beq.n	8006888 <USBD_StdEPReq+0x240>
 8006822:	e097      	b.n	8006954 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006824:	7bbb      	ldrb	r3, [r7, #14]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d007      	beq.n	800683a <USBD_StdEPReq+0x1f2>
 800682a:	7bbb      	ldrb	r3, [r7, #14]
 800682c:	2b80      	cmp	r3, #128	; 0x80
 800682e:	d004      	beq.n	800683a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006830:	6839      	ldr	r1, [r7, #0]
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fbed 	bl	8007012 <USBD_CtlError>
                break;
 8006838:	e091      	b.n	800695e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800683a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800683e:	2b00      	cmp	r3, #0
 8006840:	da0b      	bge.n	800685a <USBD_StdEPReq+0x212>
 8006842:	7bbb      	ldrb	r3, [r7, #14]
 8006844:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006848:	4613      	mov	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4413      	add	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	3310      	adds	r3, #16
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	4413      	add	r3, r2
 8006856:	3304      	adds	r3, #4
 8006858:	e00b      	b.n	8006872 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800685a:	7bbb      	ldrb	r3, [r7, #14]
 800685c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006860:	4613      	mov	r3, r2
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4413      	add	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	4413      	add	r3, r2
 8006870:	3304      	adds	r3, #4
 8006872:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2200      	movs	r2, #0
 8006878:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	2202      	movs	r2, #2
 800687e:	4619      	mov	r1, r3
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fc37 	bl	80070f4 <USBD_CtlSendData>
              break;
 8006886:	e06a      	b.n	800695e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006888:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800688c:	2b00      	cmp	r3, #0
 800688e:	da11      	bge.n	80068b4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006890:	7bbb      	ldrb	r3, [r7, #14]
 8006892:	f003 020f 	and.w	r2, r3, #15
 8006896:	6879      	ldr	r1, [r7, #4]
 8006898:	4613      	mov	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	440b      	add	r3, r1
 80068a2:	3324      	adds	r3, #36	; 0x24
 80068a4:	881b      	ldrh	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d117      	bne.n	80068da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80068aa:	6839      	ldr	r1, [r7, #0]
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fbb0 	bl	8007012 <USBD_CtlError>
                  break;
 80068b2:	e054      	b.n	800695e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80068b4:	7bbb      	ldrb	r3, [r7, #14]
 80068b6:	f003 020f 	and.w	r2, r3, #15
 80068ba:	6879      	ldr	r1, [r7, #4]
 80068bc:	4613      	mov	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	440b      	add	r3, r1
 80068c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80068ca:	881b      	ldrh	r3, [r3, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d104      	bne.n	80068da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80068d0:	6839      	ldr	r1, [r7, #0]
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fb9d 	bl	8007012 <USBD_CtlError>
                  break;
 80068d8:	e041      	b.n	800695e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	da0b      	bge.n	80068fa <USBD_StdEPReq+0x2b2>
 80068e2:	7bbb      	ldrb	r3, [r7, #14]
 80068e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068e8:	4613      	mov	r3, r2
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4413      	add	r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	3310      	adds	r3, #16
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	4413      	add	r3, r2
 80068f6:	3304      	adds	r3, #4
 80068f8:	e00b      	b.n	8006912 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80068fa:	7bbb      	ldrb	r3, [r7, #14]
 80068fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006900:	4613      	mov	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	4413      	add	r3, r2
 8006910:	3304      	adds	r3, #4
 8006912:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006914:	7bbb      	ldrb	r3, [r7, #14]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d002      	beq.n	8006920 <USBD_StdEPReq+0x2d8>
 800691a:	7bbb      	ldrb	r3, [r7, #14]
 800691c:	2b80      	cmp	r3, #128	; 0x80
 800691e:	d103      	bne.n	8006928 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2200      	movs	r2, #0
 8006924:	601a      	str	r2, [r3, #0]
 8006926:	e00e      	b.n	8006946 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006928:	7bbb      	ldrb	r3, [r7, #14]
 800692a:	4619      	mov	r1, r3
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f001 f947 	bl	8007bc0 <USBD_LL_IsStallEP>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d003      	beq.n	8006940 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2201      	movs	r2, #1
 800693c:	601a      	str	r2, [r3, #0]
 800693e:	e002      	b.n	8006946 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	2200      	movs	r2, #0
 8006944:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	2202      	movs	r2, #2
 800694a:	4619      	mov	r1, r3
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 fbd1 	bl	80070f4 <USBD_CtlSendData>
              break;
 8006952:	e004      	b.n	800695e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006954:	6839      	ldr	r1, [r7, #0]
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fb5b 	bl	8007012 <USBD_CtlError>
              break;
 800695c:	bf00      	nop
          }
          break;
 800695e:	e004      	b.n	800696a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006960:	6839      	ldr	r1, [r7, #0]
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fb55 	bl	8007012 <USBD_CtlError>
          break;
 8006968:	bf00      	nop
      }
      break;
 800696a:	e005      	b.n	8006978 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800696c:	6839      	ldr	r1, [r7, #0]
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fb4f 	bl	8007012 <USBD_CtlError>
      break;
 8006974:	e000      	b.n	8006978 <USBD_StdEPReq+0x330>
      break;
 8006976:	bf00      	nop
  }

  return ret;
 8006978:	7bfb      	ldrb	r3, [r7, #15]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
	...

08006984 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800698e:	2300      	movs	r3, #0
 8006990:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006992:	2300      	movs	r3, #0
 8006994:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006996:	2300      	movs	r3, #0
 8006998:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	885b      	ldrh	r3, [r3, #2]
 800699e:	0a1b      	lsrs	r3, r3, #8
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	3b01      	subs	r3, #1
 80069a4:	2b06      	cmp	r3, #6
 80069a6:	f200 8128 	bhi.w	8006bfa <USBD_GetDescriptor+0x276>
 80069aa:	a201      	add	r2, pc, #4	; (adr r2, 80069b0 <USBD_GetDescriptor+0x2c>)
 80069ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b0:	080069cd 	.word	0x080069cd
 80069b4:	080069e5 	.word	0x080069e5
 80069b8:	08006a25 	.word	0x08006a25
 80069bc:	08006bfb 	.word	0x08006bfb
 80069c0:	08006bfb 	.word	0x08006bfb
 80069c4:	08006b9b 	.word	0x08006b9b
 80069c8:	08006bc7 	.word	0x08006bc7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	7c12      	ldrb	r2, [r2, #16]
 80069d8:	f107 0108 	add.w	r1, r7, #8
 80069dc:	4610      	mov	r0, r2
 80069de:	4798      	blx	r3
 80069e0:	60f8      	str	r0, [r7, #12]
      break;
 80069e2:	e112      	b.n	8006c0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	7c1b      	ldrb	r3, [r3, #16]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d10d      	bne.n	8006a08 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f4:	f107 0208 	add.w	r2, r7, #8
 80069f8:	4610      	mov	r0, r2
 80069fa:	4798      	blx	r3
 80069fc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	3301      	adds	r3, #1
 8006a02:	2202      	movs	r2, #2
 8006a04:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006a06:	e100      	b.n	8006c0a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a10:	f107 0208 	add.w	r2, r7, #8
 8006a14:	4610      	mov	r0, r2
 8006a16:	4798      	blx	r3
 8006a18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	2202      	movs	r2, #2
 8006a20:	701a      	strb	r2, [r3, #0]
      break;
 8006a22:	e0f2      	b.n	8006c0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	885b      	ldrh	r3, [r3, #2]
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b05      	cmp	r3, #5
 8006a2c:	f200 80ac 	bhi.w	8006b88 <USBD_GetDescriptor+0x204>
 8006a30:	a201      	add	r2, pc, #4	; (adr r2, 8006a38 <USBD_GetDescriptor+0xb4>)
 8006a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a36:	bf00      	nop
 8006a38:	08006a51 	.word	0x08006a51
 8006a3c:	08006a85 	.word	0x08006a85
 8006a40:	08006ab9 	.word	0x08006ab9
 8006a44:	08006aed 	.word	0x08006aed
 8006a48:	08006b21 	.word	0x08006b21
 8006a4c:	08006b55 	.word	0x08006b55
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00b      	beq.n	8006a74 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	7c12      	ldrb	r2, [r2, #16]
 8006a68:	f107 0108 	add.w	r1, r7, #8
 8006a6c:	4610      	mov	r0, r2
 8006a6e:	4798      	blx	r3
 8006a70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a72:	e091      	b.n	8006b98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a74:	6839      	ldr	r1, [r7, #0]
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 facb 	bl	8007012 <USBD_CtlError>
            err++;
 8006a7c:	7afb      	ldrb	r3, [r7, #11]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	72fb      	strb	r3, [r7, #11]
          break;
 8006a82:	e089      	b.n	8006b98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00b      	beq.n	8006aa8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	7c12      	ldrb	r2, [r2, #16]
 8006a9c:	f107 0108 	add.w	r1, r7, #8
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	4798      	blx	r3
 8006aa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006aa6:	e077      	b.n	8006b98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006aa8:	6839      	ldr	r1, [r7, #0]
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fab1 	bl	8007012 <USBD_CtlError>
            err++;
 8006ab0:	7afb      	ldrb	r3, [r7, #11]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ab6:	e06f      	b.n	8006b98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00b      	beq.n	8006adc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	7c12      	ldrb	r2, [r2, #16]
 8006ad0:	f107 0108 	add.w	r1, r7, #8
 8006ad4:	4610      	mov	r0, r2
 8006ad6:	4798      	blx	r3
 8006ad8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ada:	e05d      	b.n	8006b98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006adc:	6839      	ldr	r1, [r7, #0]
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fa97 	bl	8007012 <USBD_CtlError>
            err++;
 8006ae4:	7afb      	ldrb	r3, [r7, #11]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	72fb      	strb	r3, [r7, #11]
          break;
 8006aea:	e055      	b.n	8006b98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00b      	beq.n	8006b10 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	7c12      	ldrb	r2, [r2, #16]
 8006b04:	f107 0108 	add.w	r1, r7, #8
 8006b08:	4610      	mov	r0, r2
 8006b0a:	4798      	blx	r3
 8006b0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b0e:	e043      	b.n	8006b98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b10:	6839      	ldr	r1, [r7, #0]
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 fa7d 	bl	8007012 <USBD_CtlError>
            err++;
 8006b18:	7afb      	ldrb	r3, [r7, #11]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	72fb      	strb	r3, [r7, #11]
          break;
 8006b1e:	e03b      	b.n	8006b98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b26:	695b      	ldr	r3, [r3, #20]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00b      	beq.n	8006b44 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b32:	695b      	ldr	r3, [r3, #20]
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	7c12      	ldrb	r2, [r2, #16]
 8006b38:	f107 0108 	add.w	r1, r7, #8
 8006b3c:	4610      	mov	r0, r2
 8006b3e:	4798      	blx	r3
 8006b40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b42:	e029      	b.n	8006b98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b44:	6839      	ldr	r1, [r7, #0]
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fa63 	bl	8007012 <USBD_CtlError>
            err++;
 8006b4c:	7afb      	ldrb	r3, [r7, #11]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	72fb      	strb	r3, [r7, #11]
          break;
 8006b52:	e021      	b.n	8006b98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b5a:	699b      	ldr	r3, [r3, #24]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00b      	beq.n	8006b78 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	7c12      	ldrb	r2, [r2, #16]
 8006b6c:	f107 0108 	add.w	r1, r7, #8
 8006b70:	4610      	mov	r0, r2
 8006b72:	4798      	blx	r3
 8006b74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b76:	e00f      	b.n	8006b98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b78:	6839      	ldr	r1, [r7, #0]
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fa49 	bl	8007012 <USBD_CtlError>
            err++;
 8006b80:	7afb      	ldrb	r3, [r7, #11]
 8006b82:	3301      	adds	r3, #1
 8006b84:	72fb      	strb	r3, [r7, #11]
          break;
 8006b86:	e007      	b.n	8006b98 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006b88:	6839      	ldr	r1, [r7, #0]
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fa41 	bl	8007012 <USBD_CtlError>
          err++;
 8006b90:	7afb      	ldrb	r3, [r7, #11]
 8006b92:	3301      	adds	r3, #1
 8006b94:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006b96:	bf00      	nop
      }
      break;
 8006b98:	e037      	b.n	8006c0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	7c1b      	ldrb	r3, [r3, #16]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d109      	bne.n	8006bb6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006baa:	f107 0208 	add.w	r2, r7, #8
 8006bae:	4610      	mov	r0, r2
 8006bb0:	4798      	blx	r3
 8006bb2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006bb4:	e029      	b.n	8006c0a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006bb6:	6839      	ldr	r1, [r7, #0]
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 fa2a 	bl	8007012 <USBD_CtlError>
        err++;
 8006bbe:	7afb      	ldrb	r3, [r7, #11]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	72fb      	strb	r3, [r7, #11]
      break;
 8006bc4:	e021      	b.n	8006c0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	7c1b      	ldrb	r3, [r3, #16]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10d      	bne.n	8006bea <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd6:	f107 0208 	add.w	r2, r7, #8
 8006bda:	4610      	mov	r0, r2
 8006bdc:	4798      	blx	r3
 8006bde:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	3301      	adds	r3, #1
 8006be4:	2207      	movs	r2, #7
 8006be6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006be8:	e00f      	b.n	8006c0a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006bea:	6839      	ldr	r1, [r7, #0]
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 fa10 	bl	8007012 <USBD_CtlError>
        err++;
 8006bf2:	7afb      	ldrb	r3, [r7, #11]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	72fb      	strb	r3, [r7, #11]
      break;
 8006bf8:	e007      	b.n	8006c0a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006bfa:	6839      	ldr	r1, [r7, #0]
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fa08 	bl	8007012 <USBD_CtlError>
      err++;
 8006c02:	7afb      	ldrb	r3, [r7, #11]
 8006c04:	3301      	adds	r3, #1
 8006c06:	72fb      	strb	r3, [r7, #11]
      break;
 8006c08:	bf00      	nop
  }

  if (err != 0U)
 8006c0a:	7afb      	ldrb	r3, [r7, #11]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d11e      	bne.n	8006c4e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	88db      	ldrh	r3, [r3, #6]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d016      	beq.n	8006c46 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006c18:	893b      	ldrh	r3, [r7, #8]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00e      	beq.n	8006c3c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	88da      	ldrh	r2, [r3, #6]
 8006c22:	893b      	ldrh	r3, [r7, #8]
 8006c24:	4293      	cmp	r3, r2
 8006c26:	bf28      	it	cs
 8006c28:	4613      	movcs	r3, r2
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c2e:	893b      	ldrh	r3, [r7, #8]
 8006c30:	461a      	mov	r2, r3
 8006c32:	68f9      	ldr	r1, [r7, #12]
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 fa5d 	bl	80070f4 <USBD_CtlSendData>
 8006c3a:	e009      	b.n	8006c50 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006c3c:	6839      	ldr	r1, [r7, #0]
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f9e7 	bl	8007012 <USBD_CtlError>
 8006c44:	e004      	b.n	8006c50 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 faae 	bl	80071a8 <USBD_CtlSendStatus>
 8006c4c:	e000      	b.n	8006c50 <USBD_GetDescriptor+0x2cc>
    return;
 8006c4e:	bf00      	nop
  }
}
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop

08006c58 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	889b      	ldrh	r3, [r3, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d131      	bne.n	8006cce <USBD_SetAddress+0x76>
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	88db      	ldrh	r3, [r3, #6]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d12d      	bne.n	8006cce <USBD_SetAddress+0x76>
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	885b      	ldrh	r3, [r3, #2]
 8006c76:	2b7f      	cmp	r3, #127	; 0x7f
 8006c78:	d829      	bhi.n	8006cce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	885b      	ldrh	r3, [r3, #2]
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b03      	cmp	r3, #3
 8006c90:	d104      	bne.n	8006c9c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006c92:	6839      	ldr	r1, [r7, #0]
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f9bc 	bl	8007012 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c9a:	e01d      	b.n	8006cd8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	7bfa      	ldrb	r2, [r7, #15]
 8006ca0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006ca4:	7bfb      	ldrb	r3, [r7, #15]
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 ffb5 	bl	8007c18 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fa7a 	bl	80071a8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006cb4:	7bfb      	ldrb	r3, [r7, #15]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d004      	beq.n	8006cc4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2202      	movs	r2, #2
 8006cbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cc2:	e009      	b.n	8006cd8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ccc:	e004      	b.n	8006cd8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006cce:	6839      	ldr	r1, [r7, #0]
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 f99e 	bl	8007012 <USBD_CtlError>
  }
}
 8006cd6:	bf00      	nop
 8006cd8:	bf00      	nop
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cea:	2300      	movs	r3, #0
 8006cec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	885b      	ldrh	r3, [r3, #2]
 8006cf2:	b2da      	uxtb	r2, r3
 8006cf4:	4b4e      	ldr	r3, [pc, #312]	; (8006e30 <USBD_SetConfig+0x150>)
 8006cf6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006cf8:	4b4d      	ldr	r3, [pc, #308]	; (8006e30 <USBD_SetConfig+0x150>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d905      	bls.n	8006d0c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006d00:	6839      	ldr	r1, [r7, #0]
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f985 	bl	8007012 <USBD_CtlError>
    return USBD_FAIL;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e08c      	b.n	8006e26 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d002      	beq.n	8006d1e <USBD_SetConfig+0x3e>
 8006d18:	2b03      	cmp	r3, #3
 8006d1a:	d029      	beq.n	8006d70 <USBD_SetConfig+0x90>
 8006d1c:	e075      	b.n	8006e0a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006d1e:	4b44      	ldr	r3, [pc, #272]	; (8006e30 <USBD_SetConfig+0x150>)
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d020      	beq.n	8006d68 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006d26:	4b42      	ldr	r3, [pc, #264]	; (8006e30 <USBD_SetConfig+0x150>)
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d30:	4b3f      	ldr	r3, [pc, #252]	; (8006e30 <USBD_SetConfig+0x150>)
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	4619      	mov	r1, r3
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7fe ffe7 	bl	8005d0a <USBD_SetClassConfig>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d008      	beq.n	8006d58 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006d46:	6839      	ldr	r1, [r7, #0]
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f962 	bl	8007012 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2202      	movs	r2, #2
 8006d52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006d56:	e065      	b.n	8006e24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fa25 	bl	80071a8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2203      	movs	r2, #3
 8006d62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006d66:	e05d      	b.n	8006e24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 fa1d 	bl	80071a8 <USBD_CtlSendStatus>
      break;
 8006d6e:	e059      	b.n	8006e24 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006d70:	4b2f      	ldr	r3, [pc, #188]	; (8006e30 <USBD_SetConfig+0x150>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d112      	bne.n	8006d9e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006d80:	4b2b      	ldr	r3, [pc, #172]	; (8006e30 <USBD_SetConfig+0x150>)
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	461a      	mov	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d8a:	4b29      	ldr	r3, [pc, #164]	; (8006e30 <USBD_SetConfig+0x150>)
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7fe ffd6 	bl	8005d42 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fa06 	bl	80071a8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006d9c:	e042      	b.n	8006e24 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006d9e:	4b24      	ldr	r3, [pc, #144]	; (8006e30 <USBD_SetConfig+0x150>)
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	461a      	mov	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d02a      	beq.n	8006e02 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	4619      	mov	r1, r3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f7fe ffc4 	bl	8005d42 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006dba:	4b1d      	ldr	r3, [pc, #116]	; (8006e30 <USBD_SetConfig+0x150>)
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006dc4:	4b1a      	ldr	r3, [pc, #104]	; (8006e30 <USBD_SetConfig+0x150>)
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	4619      	mov	r1, r3
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f7fe ff9d 	bl	8005d0a <USBD_SetClassConfig>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006dd4:	7bfb      	ldrb	r3, [r7, #15]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00f      	beq.n	8006dfa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006dda:	6839      	ldr	r1, [r7, #0]
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 f918 	bl	8007012 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	4619      	mov	r1, r3
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f7fe ffa9 	bl	8005d42 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2202      	movs	r2, #2
 8006df4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006df8:	e014      	b.n	8006e24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f9d4 	bl	80071a8 <USBD_CtlSendStatus>
      break;
 8006e00:	e010      	b.n	8006e24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f9d0 	bl	80071a8 <USBD_CtlSendStatus>
      break;
 8006e08:	e00c      	b.n	8006e24 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006e0a:	6839      	ldr	r1, [r7, #0]
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f900 	bl	8007012 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e12:	4b07      	ldr	r3, [pc, #28]	; (8006e30 <USBD_SetConfig+0x150>)
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	4619      	mov	r1, r3
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f7fe ff92 	bl	8005d42 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	73fb      	strb	r3, [r7, #15]
      break;
 8006e22:	bf00      	nop
  }

  return ret;
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	2000013c 	.word	0x2000013c

08006e34 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	88db      	ldrh	r3, [r3, #6]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d004      	beq.n	8006e50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006e46:	6839      	ldr	r1, [r7, #0]
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f8e2 	bl	8007012 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006e4e:	e023      	b.n	8006e98 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	dc02      	bgt.n	8006e62 <USBD_GetConfig+0x2e>
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	dc03      	bgt.n	8006e68 <USBD_GetConfig+0x34>
 8006e60:	e015      	b.n	8006e8e <USBD_GetConfig+0x5a>
 8006e62:	2b03      	cmp	r3, #3
 8006e64:	d00b      	beq.n	8006e7e <USBD_GetConfig+0x4a>
 8006e66:	e012      	b.n	8006e8e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	3308      	adds	r3, #8
 8006e72:	2201      	movs	r2, #1
 8006e74:	4619      	mov	r1, r3
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f93c 	bl	80070f4 <USBD_CtlSendData>
        break;
 8006e7c:	e00c      	b.n	8006e98 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	3304      	adds	r3, #4
 8006e82:	2201      	movs	r2, #1
 8006e84:	4619      	mov	r1, r3
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f934 	bl	80070f4 <USBD_CtlSendData>
        break;
 8006e8c:	e004      	b.n	8006e98 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006e8e:	6839      	ldr	r1, [r7, #0]
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 f8be 	bl	8007012 <USBD_CtlError>
        break;
 8006e96:	bf00      	nop
}
 8006e98:	bf00      	nop
 8006e9a:	3708      	adds	r7, #8
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d81e      	bhi.n	8006ef6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	88db      	ldrh	r3, [r3, #6]
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d004      	beq.n	8006eca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006ec0:	6839      	ldr	r1, [r7, #0]
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f8a5 	bl	8007012 <USBD_CtlError>
        break;
 8006ec8:	e01a      	b.n	8006f00 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d005      	beq.n	8006ee6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	f043 0202 	orr.w	r2, r3, #2
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	330c      	adds	r3, #12
 8006eea:	2202      	movs	r2, #2
 8006eec:	4619      	mov	r1, r3
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f900 	bl	80070f4 <USBD_CtlSendData>
      break;
 8006ef4:	e004      	b.n	8006f00 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006ef6:	6839      	ldr	r1, [r7, #0]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 f88a 	bl	8007012 <USBD_CtlError>
      break;
 8006efe:	bf00      	nop
  }
}
 8006f00:	bf00      	nop
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	885b      	ldrh	r3, [r3, #2]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d107      	bne.n	8006f2a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 f940 	bl	80071a8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006f28:	e013      	b.n	8006f52 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	885b      	ldrh	r3, [r3, #2]
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d10b      	bne.n	8006f4a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	889b      	ldrh	r3, [r3, #4]
 8006f36:	0a1b      	lsrs	r3, r3, #8
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	b2da      	uxtb	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f930 	bl	80071a8 <USBD_CtlSendStatus>
}
 8006f48:	e003      	b.n	8006f52 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006f4a:	6839      	ldr	r1, [r7, #0]
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 f860 	bl	8007012 <USBD_CtlError>
}
 8006f52:	bf00      	nop
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b082      	sub	sp, #8
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
 8006f62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d80b      	bhi.n	8006f8a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	885b      	ldrh	r3, [r3, #2]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d10c      	bne.n	8006f94 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 f910 	bl	80071a8 <USBD_CtlSendStatus>
      }
      break;
 8006f88:	e004      	b.n	8006f94 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006f8a:	6839      	ldr	r1, [r7, #0]
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 f840 	bl	8007012 <USBD_CtlError>
      break;
 8006f92:	e000      	b.n	8006f96 <USBD_ClrFeature+0x3c>
      break;
 8006f94:	bf00      	nop
  }
}
 8006f96:	bf00      	nop
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b084      	sub	sp, #16
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
 8006fa6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	781a      	ldrb	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	781a      	ldrb	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f7ff fa41 	bl	8006450 <SWAPBYTE>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f7ff fa34 	bl	8006450 <SWAPBYTE>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	461a      	mov	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f7ff fa27 	bl	8006450 <SWAPBYTE>
 8007002:	4603      	mov	r3, r0
 8007004:	461a      	mov	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	80da      	strh	r2, [r3, #6]
}
 800700a:	bf00      	nop
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b082      	sub	sp, #8
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
 800701a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800701c:	2180      	movs	r1, #128	; 0x80
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 fd90 	bl	8007b44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007024:	2100      	movs	r1, #0
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fd8c 	bl	8007b44 <USBD_LL_StallEP>
}
 800702c:	bf00      	nop
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007040:	2300      	movs	r3, #0
 8007042:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d036      	beq.n	80070b8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800704e:	6938      	ldr	r0, [r7, #16]
 8007050:	f000 f836 	bl	80070c0 <USBD_GetLen>
 8007054:	4603      	mov	r3, r0
 8007056:	3301      	adds	r3, #1
 8007058:	b29b      	uxth	r3, r3
 800705a:	005b      	lsls	r3, r3, #1
 800705c:	b29a      	uxth	r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007062:	7dfb      	ldrb	r3, [r7, #23]
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	4413      	add	r3, r2
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	7812      	ldrb	r2, [r2, #0]
 800706c:	701a      	strb	r2, [r3, #0]
  idx++;
 800706e:	7dfb      	ldrb	r3, [r7, #23]
 8007070:	3301      	adds	r3, #1
 8007072:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007074:	7dfb      	ldrb	r3, [r7, #23]
 8007076:	68ba      	ldr	r2, [r7, #8]
 8007078:	4413      	add	r3, r2
 800707a:	2203      	movs	r2, #3
 800707c:	701a      	strb	r2, [r3, #0]
  idx++;
 800707e:	7dfb      	ldrb	r3, [r7, #23]
 8007080:	3301      	adds	r3, #1
 8007082:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007084:	e013      	b.n	80070ae <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007086:	7dfb      	ldrb	r3, [r7, #23]
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	4413      	add	r3, r2
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	7812      	ldrb	r2, [r2, #0]
 8007090:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	3301      	adds	r3, #1
 8007096:	613b      	str	r3, [r7, #16]
    idx++;
 8007098:	7dfb      	ldrb	r3, [r7, #23]
 800709a:	3301      	adds	r3, #1
 800709c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800709e:	7dfb      	ldrb	r3, [r7, #23]
 80070a0:	68ba      	ldr	r2, [r7, #8]
 80070a2:	4413      	add	r3, r2
 80070a4:	2200      	movs	r2, #0
 80070a6:	701a      	strb	r2, [r3, #0]
    idx++;
 80070a8:	7dfb      	ldrb	r3, [r7, #23]
 80070aa:	3301      	adds	r3, #1
 80070ac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1e7      	bne.n	8007086 <USBD_GetString+0x52>
 80070b6:	e000      	b.n	80070ba <USBD_GetString+0x86>
    return;
 80070b8:	bf00      	nop
  }
}
 80070ba:	3718      	adds	r7, #24
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80070c8:	2300      	movs	r3, #0
 80070ca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80070d0:	e005      	b.n	80070de <USBD_GetLen+0x1e>
  {
    len++;
 80070d2:	7bfb      	ldrb	r3, [r7, #15]
 80070d4:	3301      	adds	r3, #1
 80070d6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	3301      	adds	r3, #1
 80070dc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1f5      	bne.n	80070d2 <USBD_GetLen+0x12>
  }

  return len;
 80070e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3714      	adds	r7, #20
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2202      	movs	r2, #2
 8007104:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	2100      	movs	r1, #0
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f000 fd9b 	bl	8007c56 <USBD_LL_Transmit>

  return USBD_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b084      	sub	sp, #16
 800712e:	af00      	add	r7, sp, #0
 8007130:	60f8      	str	r0, [r7, #12]
 8007132:	60b9      	str	r1, [r7, #8]
 8007134:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	2100      	movs	r1, #0
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f000 fd8a 	bl	8007c56 <USBD_LL_Transmit>

  return USBD_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2203      	movs	r2, #3
 800715c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	2100      	movs	r1, #0
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f000 fd8e 	bl	8007c98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b084      	sub	sp, #16
 800718a:	af00      	add	r7, sp, #0
 800718c:	60f8      	str	r0, [r7, #12]
 800718e:	60b9      	str	r1, [r7, #8]
 8007190:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	68ba      	ldr	r2, [r7, #8]
 8007196:	2100      	movs	r1, #0
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 fd7d 	bl	8007c98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2204      	movs	r2, #4
 80071b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80071b8:	2300      	movs	r3, #0
 80071ba:	2200      	movs	r2, #0
 80071bc:	2100      	movs	r1, #0
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fd49 	bl	8007c56 <USBD_LL_Transmit>

  return USBD_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b082      	sub	sp, #8
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2205      	movs	r2, #5
 80071da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071de:	2300      	movs	r3, #0
 80071e0:	2200      	movs	r2, #0
 80071e2:	2100      	movs	r1, #0
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fd57 	bl	8007c98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80071f8:	2200      	movs	r2, #0
 80071fa:	4912      	ldr	r1, [pc, #72]	; (8007244 <MX_USB_DEVICE_Init+0x50>)
 80071fc:	4812      	ldr	r0, [pc, #72]	; (8007248 <MX_USB_DEVICE_Init+0x54>)
 80071fe:	f7fe fd07 	bl	8005c10 <USBD_Init>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d001      	beq.n	800720c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007208:	f7f9 ff41 	bl	800108e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800720c:	490f      	ldr	r1, [pc, #60]	; (800724c <MX_USB_DEVICE_Init+0x58>)
 800720e:	480e      	ldr	r0, [pc, #56]	; (8007248 <MX_USB_DEVICE_Init+0x54>)
 8007210:	f7fe fd2e 	bl	8005c70 <USBD_RegisterClass>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d001      	beq.n	800721e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800721a:	f7f9 ff38 	bl	800108e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800721e:	490c      	ldr	r1, [pc, #48]	; (8007250 <MX_USB_DEVICE_Init+0x5c>)
 8007220:	4809      	ldr	r0, [pc, #36]	; (8007248 <MX_USB_DEVICE_Init+0x54>)
 8007222:	f7fe fc1f 	bl	8005a64 <USBD_CDC_RegisterInterface>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d001      	beq.n	8007230 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800722c:	f7f9 ff2f 	bl	800108e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007230:	4805      	ldr	r0, [pc, #20]	; (8007248 <MX_USB_DEVICE_Init+0x54>)
 8007232:	f7fe fd53 	bl	8005cdc <USBD_Start>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d001      	beq.n	8007240 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800723c:	f7f9 ff27 	bl	800108e <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007240:	bf00      	nop
 8007242:	bd80      	pop	{r7, pc}
 8007244:	200000ac 	.word	0x200000ac
 8007248:	20000140 	.word	0x20000140
 800724c:	20000018 	.word	0x20000018
 8007250:	20000098 	.word	0x20000098

08007254 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007258:	2200      	movs	r2, #0
 800725a:	4905      	ldr	r1, [pc, #20]	; (8007270 <CDC_Init_FS+0x1c>)
 800725c:	4805      	ldr	r0, [pc, #20]	; (8007274 <CDC_Init_FS+0x20>)
 800725e:	f7fe fc1b 	bl	8005a98 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007262:	4905      	ldr	r1, [pc, #20]	; (8007278 <CDC_Init_FS+0x24>)
 8007264:	4803      	ldr	r0, [pc, #12]	; (8007274 <CDC_Init_FS+0x20>)
 8007266:	f7fe fc39 	bl	8005adc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800726a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800726c:	4618      	mov	r0, r3
 800726e:	bd80      	pop	{r7, pc}
 8007270:	20000c1c 	.word	0x20000c1c
 8007274:	20000140 	.word	0x20000140
 8007278:	2000041c 	.word	0x2000041c

0800727c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800727c:	b480      	push	{r7}
 800727e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007280:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007282:	4618      	mov	r0, r3
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	4603      	mov	r3, r0
 8007294:	6039      	str	r1, [r7, #0]
 8007296:	71fb      	strb	r3, [r7, #7]
 8007298:	4613      	mov	r3, r2
 800729a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800729c:	79fb      	ldrb	r3, [r7, #7]
 800729e:	2b23      	cmp	r3, #35	; 0x23
 80072a0:	d84a      	bhi.n	8007338 <CDC_Control_FS+0xac>
 80072a2:	a201      	add	r2, pc, #4	; (adr r2, 80072a8 <CDC_Control_FS+0x1c>)
 80072a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a8:	08007339 	.word	0x08007339
 80072ac:	08007339 	.word	0x08007339
 80072b0:	08007339 	.word	0x08007339
 80072b4:	08007339 	.word	0x08007339
 80072b8:	08007339 	.word	0x08007339
 80072bc:	08007339 	.word	0x08007339
 80072c0:	08007339 	.word	0x08007339
 80072c4:	08007339 	.word	0x08007339
 80072c8:	08007339 	.word	0x08007339
 80072cc:	08007339 	.word	0x08007339
 80072d0:	08007339 	.word	0x08007339
 80072d4:	08007339 	.word	0x08007339
 80072d8:	08007339 	.word	0x08007339
 80072dc:	08007339 	.word	0x08007339
 80072e0:	08007339 	.word	0x08007339
 80072e4:	08007339 	.word	0x08007339
 80072e8:	08007339 	.word	0x08007339
 80072ec:	08007339 	.word	0x08007339
 80072f0:	08007339 	.word	0x08007339
 80072f4:	08007339 	.word	0x08007339
 80072f8:	08007339 	.word	0x08007339
 80072fc:	08007339 	.word	0x08007339
 8007300:	08007339 	.word	0x08007339
 8007304:	08007339 	.word	0x08007339
 8007308:	08007339 	.word	0x08007339
 800730c:	08007339 	.word	0x08007339
 8007310:	08007339 	.word	0x08007339
 8007314:	08007339 	.word	0x08007339
 8007318:	08007339 	.word	0x08007339
 800731c:	08007339 	.word	0x08007339
 8007320:	08007339 	.word	0x08007339
 8007324:	08007339 	.word	0x08007339
 8007328:	08007339 	.word	0x08007339
 800732c:	08007339 	.word	0x08007339
 8007330:	08007339 	.word	0x08007339
 8007334:	08007339 	.word	0x08007339
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007338:	bf00      	nop
  }

  return (USBD_OK);
 800733a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800733c:	4618      	mov	r0, r3
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007352:	6879      	ldr	r1, [r7, #4]
 8007354:	482b      	ldr	r0, [pc, #172]	; (8007404 <CDC_Receive_FS+0xbc>)
 8007356:	f7fe fbc1 	bl	8005adc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800735a:	482a      	ldr	r0, [pc, #168]	; (8007404 <CDC_Receive_FS+0xbc>)
 800735c:	f7fe fc22 	bl	8005ba4 <USBD_CDC_ReceivePacket>

  const char* buffer = (const char*)Buf;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	60fb      	str	r3, [r7, #12]

  // get command type (e.g. COPY1, COPY2, etc.)
  if (strncmp(buffer, "COPY1", 5) == 0)
 8007364:	2205      	movs	r2, #5
 8007366:	4928      	ldr	r1, [pc, #160]	; (8007408 <CDC_Receive_FS+0xc0>)
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f000 fd5a 	bl	8007e22 <strncmp>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d108      	bne.n	8007386 <CDC_Receive_FS+0x3e>
	  write_buffer_to_flash(buffer, CLIPBOARD1_METADATA_ADDRESS, CLIPBOARD1_BEGIN_ADDRESS);
 8007374:	4b25      	ldr	r3, [pc, #148]	; (800740c <CDC_Receive_FS+0xc4>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a25      	ldr	r2, [pc, #148]	; (8007410 <CDC_Receive_FS+0xc8>)
 800737a:	6812      	ldr	r2, [r2, #0]
 800737c:	4619      	mov	r1, r3
 800737e:	68f8      	ldr	r0, [r7, #12]
 8007380:	f000 f891 	bl	80074a6 <write_buffer_to_flash>
 8007384:	e031      	b.n	80073ea <CDC_Receive_FS+0xa2>
  else if (strncmp(buffer, "COPY2", 5) == 0)
 8007386:	2205      	movs	r2, #5
 8007388:	4922      	ldr	r1, [pc, #136]	; (8007414 <CDC_Receive_FS+0xcc>)
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f000 fd49 	bl	8007e22 <strncmp>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d108      	bne.n	80073a8 <CDC_Receive_FS+0x60>
	  write_buffer_to_flash(buffer, CLIPBOARD2_METADATA_ADDRESS, CLIPBOARD2_BEGIN_ADDRESS);
 8007396:	4b20      	ldr	r3, [pc, #128]	; (8007418 <CDC_Receive_FS+0xd0>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a20      	ldr	r2, [pc, #128]	; (800741c <CDC_Receive_FS+0xd4>)
 800739c:	6812      	ldr	r2, [r2, #0]
 800739e:	4619      	mov	r1, r3
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f000 f880 	bl	80074a6 <write_buffer_to_flash>
 80073a6:	e020      	b.n	80073ea <CDC_Receive_FS+0xa2>
  else if (strncmp(buffer, "COPY3", 5) == 0)
 80073a8:	2205      	movs	r2, #5
 80073aa:	491d      	ldr	r1, [pc, #116]	; (8007420 <CDC_Receive_FS+0xd8>)
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f000 fd38 	bl	8007e22 <strncmp>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d108      	bne.n	80073ca <CDC_Receive_FS+0x82>
	  write_buffer_to_flash(buffer, CLIPBOARD3_METADATA_ADDRESS, CLIPBOARD3_BEGIN_ADDRESS);
 80073b8:	4b1a      	ldr	r3, [pc, #104]	; (8007424 <CDC_Receive_FS+0xdc>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a1a      	ldr	r2, [pc, #104]	; (8007428 <CDC_Receive_FS+0xe0>)
 80073be:	6812      	ldr	r2, [r2, #0]
 80073c0:	4619      	mov	r1, r3
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f000 f86f 	bl	80074a6 <write_buffer_to_flash>
 80073c8:	e00f      	b.n	80073ea <CDC_Receive_FS+0xa2>
  else if (strncmp(buffer, "COPY4", 5) == 0)
 80073ca:	2205      	movs	r2, #5
 80073cc:	4917      	ldr	r1, [pc, #92]	; (800742c <CDC_Receive_FS+0xe4>)
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f000 fd27 	bl	8007e22 <strncmp>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d107      	bne.n	80073ea <CDC_Receive_FS+0xa2>
	  write_buffer_to_flash(buffer, CLIPBOARD4_METADATA_ADDRESS, CLIPBOARD4_BEGIN_ADDRESS);
 80073da:	4b15      	ldr	r3, [pc, #84]	; (8007430 <CDC_Receive_FS+0xe8>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a15      	ldr	r2, [pc, #84]	; (8007434 <CDC_Receive_FS+0xec>)
 80073e0:	6812      	ldr	r2, [r2, #0]
 80073e2:	4619      	mov	r1, r3
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 f85e 	bl	80074a6 <write_buffer_to_flash>
  // NOTE: if you don't clear the buffer here, an interesting bug occurs.
  // copy "hello"
  // copy "how are you"
  // copy "hey"
  // the buffer will then be "hey are you" unless you clear it each time data is received
  memset(Buf, 0, *Len);
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	461a      	mov	r2, r3
 80073f0:	2100      	movs	r1, #0
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fcfa 	bl	8007dec <memset>

  return (USBD_OK);
 80073f8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	20000140 	.word	0x20000140
 8007408:	080083b4 	.word	0x080083b4
 800740c:	0800841c 	.word	0x0800841c
 8007410:	08008420 	.word	0x08008420
 8007414:	080083bc 	.word	0x080083bc
 8007418:	08008424 	.word	0x08008424
 800741c:	08008428 	.word	0x08008428
 8007420:	080083c4 	.word	0x080083c4
 8007424:	0800842c 	.word	0x0800842c
 8007428:	08008430 	.word	0x08008430
 800742c:	080083cc 	.word	0x080083cc
 8007430:	08008434 	.word	0x08008434
 8007434:	08008438 	.word	0x08008438

08007438 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	460b      	mov	r3, r1
 8007442:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007444:	2300      	movs	r3, #0
 8007446:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007448:	4b0d      	ldr	r3, [pc, #52]	; (8007480 <CDC_Transmit_FS+0x48>)
 800744a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800744e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007456:	2b00      	cmp	r3, #0
 8007458:	d001      	beq.n	800745e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800745a:	2301      	movs	r3, #1
 800745c:	e00b      	b.n	8007476 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800745e:	887b      	ldrh	r3, [r7, #2]
 8007460:	461a      	mov	r2, r3
 8007462:	6879      	ldr	r1, [r7, #4]
 8007464:	4806      	ldr	r0, [pc, #24]	; (8007480 <CDC_Transmit_FS+0x48>)
 8007466:	f7fe fb17 	bl	8005a98 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800746a:	4805      	ldr	r0, [pc, #20]	; (8007480 <CDC_Transmit_FS+0x48>)
 800746c:	f7fe fb54 	bl	8005b18 <USBD_CDC_TransmitPacket>
 8007470:	4603      	mov	r3, r0
 8007472:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007474:	7bfb      	ldrb	r3, [r7, #15]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	20000140 	.word	0x20000140

08007484 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007484:	b480      	push	{r7}
 8007486:	b087      	sub	sp, #28
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	4613      	mov	r3, r2
 8007490:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007492:	2300      	movs	r3, #0
 8007494:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007496:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800749a:	4618      	mov	r0, r3
 800749c:	371c      	adds	r7, #28
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <write_buffer_to_flash>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
static void write_buffer_to_flash(const char* buffer, uint32_t metadata_address, uint32_t begin_address)
{
 80074a6:	b590      	push	{r4, r7, lr}
 80074a8:	b0c5      	sub	sp, #276	; 0x114
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80074b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074b4:	6018      	str	r0, [r3, #0]
 80074b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80074ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074be:	6019      	str	r1, [r3, #0]
 80074c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80074c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80074c8:	601a      	str	r2, [r3, #0]
	char write_data[256] = {0};
 80074ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80074ce:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80074d2:	2200      	movs	r2, #0
 80074d4:	601a      	str	r2, [r3, #0]
 80074d6:	3304      	adds	r3, #4
 80074d8:	22fc      	movs	r2, #252	; 0xfc
 80074da:	2100      	movs	r1, #0
 80074dc:	4618      	mov	r0, r3
 80074de:	f000 fc85 	bl	8007dec <memset>
	clear_flash(begin_address);
 80074e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80074e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80074ea:	6818      	ldr	r0, [r3, #0]
 80074ec:	f7f9 fa6a 	bl	80009c4 <clear_flash>
	strncpy(write_data, &buffer[5], strlen(buffer));
 80074f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80074f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	1d5c      	adds	r4, r3, #5
 80074fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007500:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007504:	6818      	ldr	r0, [r3, #0]
 8007506:	f7f8 fe67 	bl	80001d8 <strlen>
 800750a:	4602      	mov	r2, r0
 800750c:	f107 0310 	add.w	r3, r7, #16
 8007510:	4621      	mov	r1, r4
 8007512:	4618      	mov	r0, r3
 8007514:	f000 fc99 	bl	8007e4a <strncpy>
	write_metadata_to_flash(strlen(write_data), metadata_address);
 8007518:	f107 0310 	add.w	r3, r7, #16
 800751c:	4618      	mov	r0, r3
 800751e:	f7f8 fe5b 	bl	80001d8 <strlen>
 8007522:	4602      	mov	r2, r0
 8007524:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800752c:	6819      	ldr	r1, [r3, #0]
 800752e:	4610      	mov	r0, r2
 8007530:	f7f9 fb74 	bl	8000c1c <write_metadata_to_flash>
	write_string_to_flash(write_data, begin_address);
 8007534:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007538:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800753c:	f107 0210 	add.w	r2, r7, #16
 8007540:	6819      	ldr	r1, [r3, #0]
 8007542:	4610      	mov	r0, r2
 8007544:	f7f9 fb18 	bl	8000b78 <write_string_to_flash>
}
 8007548:	bf00      	nop
 800754a:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800754e:	46bd      	mov	sp, r7
 8007550:	bd90      	pop	{r4, r7, pc}
	...

08007554 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	4603      	mov	r3, r0
 800755c:	6039      	str	r1, [r7, #0]
 800755e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	2212      	movs	r2, #18
 8007564:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007566:	4b03      	ldr	r3, [pc, #12]	; (8007574 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007568:	4618      	mov	r0, r3
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr
 8007574:	200000c8 	.word	0x200000c8

08007578 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	4603      	mov	r3, r0
 8007580:	6039      	str	r1, [r7, #0]
 8007582:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	2204      	movs	r2, #4
 8007588:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800758a:	4b03      	ldr	r3, [pc, #12]	; (8007598 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800758c:	4618      	mov	r0, r3
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr
 8007598:	200000dc 	.word	0x200000dc

0800759c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	4603      	mov	r3, r0
 80075a4:	6039      	str	r1, [r7, #0]
 80075a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80075a8:	79fb      	ldrb	r3, [r7, #7]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d105      	bne.n	80075ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80075ae:	683a      	ldr	r2, [r7, #0]
 80075b0:	4907      	ldr	r1, [pc, #28]	; (80075d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80075b2:	4808      	ldr	r0, [pc, #32]	; (80075d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80075b4:	f7ff fd3e 	bl	8007034 <USBD_GetString>
 80075b8:	e004      	b.n	80075c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	4904      	ldr	r1, [pc, #16]	; (80075d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80075be:	4805      	ldr	r0, [pc, #20]	; (80075d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80075c0:	f7ff fd38 	bl	8007034 <USBD_GetString>
  }
  return USBD_StrDesc;
 80075c4:	4b02      	ldr	r3, [pc, #8]	; (80075d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3708      	adds	r7, #8
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	2000141c 	.word	0x2000141c
 80075d4:	080083d4 	.word	0x080083d4

080075d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	4603      	mov	r3, r0
 80075e0:	6039      	str	r1, [r7, #0]
 80075e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80075e4:	683a      	ldr	r2, [r7, #0]
 80075e6:	4904      	ldr	r1, [pc, #16]	; (80075f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80075e8:	4804      	ldr	r0, [pc, #16]	; (80075fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80075ea:	f7ff fd23 	bl	8007034 <USBD_GetString>
  return USBD_StrDesc;
 80075ee:	4b02      	ldr	r3, [pc, #8]	; (80075f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	2000141c 	.word	0x2000141c
 80075fc:	080083ec 	.word	0x080083ec

08007600 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	4603      	mov	r3, r0
 8007608:	6039      	str	r1, [r7, #0]
 800760a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	221a      	movs	r2, #26
 8007610:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007612:	f000 f843 	bl	800769c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007616:	4b02      	ldr	r3, [pc, #8]	; (8007620 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007618:	4618      	mov	r0, r3
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	200000e0 	.word	0x200000e0

08007624 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	4603      	mov	r3, r0
 800762c:	6039      	str	r1, [r7, #0]
 800762e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007630:	79fb      	ldrb	r3, [r7, #7]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d105      	bne.n	8007642 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007636:	683a      	ldr	r2, [r7, #0]
 8007638:	4907      	ldr	r1, [pc, #28]	; (8007658 <USBD_FS_ConfigStrDescriptor+0x34>)
 800763a:	4808      	ldr	r0, [pc, #32]	; (800765c <USBD_FS_ConfigStrDescriptor+0x38>)
 800763c:	f7ff fcfa 	bl	8007034 <USBD_GetString>
 8007640:	e004      	b.n	800764c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007642:	683a      	ldr	r2, [r7, #0]
 8007644:	4904      	ldr	r1, [pc, #16]	; (8007658 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007646:	4805      	ldr	r0, [pc, #20]	; (800765c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007648:	f7ff fcf4 	bl	8007034 <USBD_GetString>
  }
  return USBD_StrDesc;
 800764c:	4b02      	ldr	r3, [pc, #8]	; (8007658 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800764e:	4618      	mov	r0, r3
 8007650:	3708      	adds	r7, #8
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	2000141c 	.word	0x2000141c
 800765c:	08008400 	.word	0x08008400

08007660 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	4603      	mov	r3, r0
 8007668:	6039      	str	r1, [r7, #0]
 800766a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800766c:	79fb      	ldrb	r3, [r7, #7]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d105      	bne.n	800767e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007672:	683a      	ldr	r2, [r7, #0]
 8007674:	4907      	ldr	r1, [pc, #28]	; (8007694 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007676:	4808      	ldr	r0, [pc, #32]	; (8007698 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007678:	f7ff fcdc 	bl	8007034 <USBD_GetString>
 800767c:	e004      	b.n	8007688 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	4904      	ldr	r1, [pc, #16]	; (8007694 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007682:	4805      	ldr	r0, [pc, #20]	; (8007698 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007684:	f7ff fcd6 	bl	8007034 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007688:	4b02      	ldr	r3, [pc, #8]	; (8007694 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800768a:	4618      	mov	r0, r3
 800768c:	3708      	adds	r7, #8
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	2000141c 	.word	0x2000141c
 8007698:	0800840c 	.word	0x0800840c

0800769c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80076a2:	4b0f      	ldr	r3, [pc, #60]	; (80076e0 <Get_SerialNum+0x44>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80076a8:	4b0e      	ldr	r3, [pc, #56]	; (80076e4 <Get_SerialNum+0x48>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80076ae:	4b0e      	ldr	r3, [pc, #56]	; (80076e8 <Get_SerialNum+0x4c>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4413      	add	r3, r2
 80076ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d009      	beq.n	80076d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80076c2:	2208      	movs	r2, #8
 80076c4:	4909      	ldr	r1, [pc, #36]	; (80076ec <Get_SerialNum+0x50>)
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f000 f814 	bl	80076f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80076cc:	2204      	movs	r2, #4
 80076ce:	4908      	ldr	r1, [pc, #32]	; (80076f0 <Get_SerialNum+0x54>)
 80076d0:	68b8      	ldr	r0, [r7, #8]
 80076d2:	f000 f80f 	bl	80076f4 <IntToUnicode>
  }
}
 80076d6:	bf00      	nop
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	1fff7a10 	.word	0x1fff7a10
 80076e4:	1fff7a14 	.word	0x1fff7a14
 80076e8:	1fff7a18 	.word	0x1fff7a18
 80076ec:	200000e2 	.word	0x200000e2
 80076f0:	200000f2 	.word	0x200000f2

080076f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b087      	sub	sp, #28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	4613      	mov	r3, r2
 8007700:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007702:	2300      	movs	r3, #0
 8007704:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007706:	2300      	movs	r3, #0
 8007708:	75fb      	strb	r3, [r7, #23]
 800770a:	e027      	b.n	800775c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	0f1b      	lsrs	r3, r3, #28
 8007710:	2b09      	cmp	r3, #9
 8007712:	d80b      	bhi.n	800772c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	0f1b      	lsrs	r3, r3, #28
 8007718:	b2da      	uxtb	r2, r3
 800771a:	7dfb      	ldrb	r3, [r7, #23]
 800771c:	005b      	lsls	r3, r3, #1
 800771e:	4619      	mov	r1, r3
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	440b      	add	r3, r1
 8007724:	3230      	adds	r2, #48	; 0x30
 8007726:	b2d2      	uxtb	r2, r2
 8007728:	701a      	strb	r2, [r3, #0]
 800772a:	e00a      	b.n	8007742 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	0f1b      	lsrs	r3, r3, #28
 8007730:	b2da      	uxtb	r2, r3
 8007732:	7dfb      	ldrb	r3, [r7, #23]
 8007734:	005b      	lsls	r3, r3, #1
 8007736:	4619      	mov	r1, r3
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	440b      	add	r3, r1
 800773c:	3237      	adds	r2, #55	; 0x37
 800773e:	b2d2      	uxtb	r2, r2
 8007740:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	011b      	lsls	r3, r3, #4
 8007746:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007748:	7dfb      	ldrb	r3, [r7, #23]
 800774a:	005b      	lsls	r3, r3, #1
 800774c:	3301      	adds	r3, #1
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	4413      	add	r3, r2
 8007752:	2200      	movs	r2, #0
 8007754:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007756:	7dfb      	ldrb	r3, [r7, #23]
 8007758:	3301      	adds	r3, #1
 800775a:	75fb      	strb	r3, [r7, #23]
 800775c:	7dfa      	ldrb	r2, [r7, #23]
 800775e:	79fb      	ldrb	r3, [r7, #7]
 8007760:	429a      	cmp	r2, r3
 8007762:	d3d3      	bcc.n	800770c <IntToUnicode+0x18>
  }
}
 8007764:	bf00      	nop
 8007766:	bf00      	nop
 8007768:	371c      	adds	r7, #28
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
	...

08007774 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b08a      	sub	sp, #40	; 0x28
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800777c:	f107 0314 	add.w	r3, r7, #20
 8007780:	2200      	movs	r2, #0
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	605a      	str	r2, [r3, #4]
 8007786:	609a      	str	r2, [r3, #8]
 8007788:	60da      	str	r2, [r3, #12]
 800778a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007794:	d13a      	bne.n	800780c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007796:	2300      	movs	r3, #0
 8007798:	613b      	str	r3, [r7, #16]
 800779a:	4b1e      	ldr	r3, [pc, #120]	; (8007814 <HAL_PCD_MspInit+0xa0>)
 800779c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779e:	4a1d      	ldr	r2, [pc, #116]	; (8007814 <HAL_PCD_MspInit+0xa0>)
 80077a0:	f043 0301 	orr.w	r3, r3, #1
 80077a4:	6313      	str	r3, [r2, #48]	; 0x30
 80077a6:	4b1b      	ldr	r3, [pc, #108]	; (8007814 <HAL_PCD_MspInit+0xa0>)
 80077a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077aa:	f003 0301 	and.w	r3, r3, #1
 80077ae:	613b      	str	r3, [r7, #16]
 80077b0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80077b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80077b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077b8:	2302      	movs	r3, #2
 80077ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077bc:	2300      	movs	r3, #0
 80077be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077c0:	2303      	movs	r3, #3
 80077c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80077c4:	230a      	movs	r3, #10
 80077c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077c8:	f107 0314 	add.w	r3, r7, #20
 80077cc:	4619      	mov	r1, r3
 80077ce:	4812      	ldr	r0, [pc, #72]	; (8007818 <HAL_PCD_MspInit+0xa4>)
 80077d0:	f7fa f8b0 	bl	8001934 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80077d4:	4b0f      	ldr	r3, [pc, #60]	; (8007814 <HAL_PCD_MspInit+0xa0>)
 80077d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d8:	4a0e      	ldr	r2, [pc, #56]	; (8007814 <HAL_PCD_MspInit+0xa0>)
 80077da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077de:	6353      	str	r3, [r2, #52]	; 0x34
 80077e0:	2300      	movs	r3, #0
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	4b0b      	ldr	r3, [pc, #44]	; (8007814 <HAL_PCD_MspInit+0xa0>)
 80077e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077e8:	4a0a      	ldr	r2, [pc, #40]	; (8007814 <HAL_PCD_MspInit+0xa0>)
 80077ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077ee:	6453      	str	r3, [r2, #68]	; 0x44
 80077f0:	4b08      	ldr	r3, [pc, #32]	; (8007814 <HAL_PCD_MspInit+0xa0>)
 80077f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077f8:	60fb      	str	r3, [r7, #12]
 80077fa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80077fc:	2200      	movs	r2, #0
 80077fe:	2100      	movs	r1, #0
 8007800:	2043      	movs	r0, #67	; 0x43
 8007802:	f7f9 fe52 	bl	80014aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007806:	2043      	movs	r0, #67	; 0x43
 8007808:	f7f9 fe6b 	bl	80014e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800780c:	bf00      	nop
 800780e:	3728      	adds	r7, #40	; 0x28
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	40023800 	.word	0x40023800
 8007818:	40020000 	.word	0x40020000

0800781c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007830:	4619      	mov	r1, r3
 8007832:	4610      	mov	r0, r2
 8007834:	f7fe fa9f 	bl	8005d76 <USBD_LL_SetupStage>
}
 8007838:	bf00      	nop
 800783a:	3708      	adds	r7, #8
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	460b      	mov	r3, r1
 800784a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007852:	78fa      	ldrb	r2, [r7, #3]
 8007854:	6879      	ldr	r1, [r7, #4]
 8007856:	4613      	mov	r3, r2
 8007858:	00db      	lsls	r3, r3, #3
 800785a:	4413      	add	r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	440b      	add	r3, r1
 8007860:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	78fb      	ldrb	r3, [r7, #3]
 8007868:	4619      	mov	r1, r3
 800786a:	f7fe fad9 	bl	8005e20 <USBD_LL_DataOutStage>
}
 800786e:	bf00      	nop
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b082      	sub	sp, #8
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
 800787e:	460b      	mov	r3, r1
 8007880:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007888:	78fa      	ldrb	r2, [r7, #3]
 800788a:	6879      	ldr	r1, [r7, #4]
 800788c:	4613      	mov	r3, r2
 800788e:	00db      	lsls	r3, r3, #3
 8007890:	4413      	add	r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	440b      	add	r3, r1
 8007896:	334c      	adds	r3, #76	; 0x4c
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	78fb      	ldrb	r3, [r7, #3]
 800789c:	4619      	mov	r1, r3
 800789e:	f7fe fb72 	bl	8005f86 <USBD_LL_DataInStage>
}
 80078a2:	bf00      	nop
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b082      	sub	sp, #8
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7fe fca6 	bl	800620a <USBD_LL_SOF>
}
 80078be:	bf00      	nop
 80078c0:	3708      	adds	r7, #8
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b084      	sub	sp, #16
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80078ce:	2301      	movs	r3, #1
 80078d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d001      	beq.n	80078de <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80078da:	f7f9 fbd8 	bl	800108e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078e4:	7bfa      	ldrb	r2, [r7, #15]
 80078e6:	4611      	mov	r1, r2
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7fe fc50 	bl	800618e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7fe fbf8 	bl	80060ea <USBD_LL_Reset>
}
 80078fa:	bf00      	nop
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
	...

08007904 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007912:	4618      	mov	r0, r3
 8007914:	f7fe fc4b 	bl	80061ae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	6812      	ldr	r2, [r2, #0]
 8007926:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800792a:	f043 0301 	orr.w	r3, r3, #1
 800792e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6a1b      	ldr	r3, [r3, #32]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d005      	beq.n	8007944 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007938:	4b04      	ldr	r3, [pc, #16]	; (800794c <HAL_PCD_SuspendCallback+0x48>)
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	4a03      	ldr	r2, [pc, #12]	; (800794c <HAL_PCD_SuspendCallback+0x48>)
 800793e:	f043 0306 	orr.w	r3, r3, #6
 8007942:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007944:	bf00      	nop
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	e000ed00 	.word	0xe000ed00

08007950 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800795e:	4618      	mov	r0, r3
 8007960:	f7fe fc3b 	bl	80061da <USBD_LL_Resume>
}
 8007964:	bf00      	nop
 8007966:	3708      	adds	r7, #8
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	460b      	mov	r3, r1
 8007976:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800797e:	78fa      	ldrb	r2, [r7, #3]
 8007980:	4611      	mov	r1, r2
 8007982:	4618      	mov	r0, r3
 8007984:	f7fe fc93 	bl	80062ae <USBD_LL_IsoOUTIncomplete>
}
 8007988:	bf00      	nop
 800798a:	3708      	adds	r7, #8
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	460b      	mov	r3, r1
 800799a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80079a2:	78fa      	ldrb	r2, [r7, #3]
 80079a4:	4611      	mov	r1, r2
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fe fc4f 	bl	800624a <USBD_LL_IsoINIncomplete>
}
 80079ac:	bf00      	nop
 80079ae:	3708      	adds	r7, #8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7fe fca5 	bl	8006312 <USBD_LL_DevConnected>
}
 80079c8:	bf00      	nop
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80079de:	4618      	mov	r0, r3
 80079e0:	f7fe fca2 	bl	8006328 <USBD_LL_DevDisconnected>
}
 80079e4:	bf00      	nop
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d13c      	bne.n	8007a76 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80079fc:	4a20      	ldr	r2, [pc, #128]	; (8007a80 <USBD_LL_Init+0x94>)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a1e      	ldr	r2, [pc, #120]	; (8007a80 <USBD_LL_Init+0x94>)
 8007a08:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007a0c:	4b1c      	ldr	r3, [pc, #112]	; (8007a80 <USBD_LL_Init+0x94>)
 8007a0e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007a12:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007a14:	4b1a      	ldr	r3, [pc, #104]	; (8007a80 <USBD_LL_Init+0x94>)
 8007a16:	2204      	movs	r2, #4
 8007a18:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007a1a:	4b19      	ldr	r3, [pc, #100]	; (8007a80 <USBD_LL_Init+0x94>)
 8007a1c:	2202      	movs	r2, #2
 8007a1e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007a20:	4b17      	ldr	r3, [pc, #92]	; (8007a80 <USBD_LL_Init+0x94>)
 8007a22:	2200      	movs	r2, #0
 8007a24:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007a26:	4b16      	ldr	r3, [pc, #88]	; (8007a80 <USBD_LL_Init+0x94>)
 8007a28:	2202      	movs	r2, #2
 8007a2a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007a2c:	4b14      	ldr	r3, [pc, #80]	; (8007a80 <USBD_LL_Init+0x94>)
 8007a2e:	2200      	movs	r2, #0
 8007a30:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007a32:	4b13      	ldr	r3, [pc, #76]	; (8007a80 <USBD_LL_Init+0x94>)
 8007a34:	2200      	movs	r2, #0
 8007a36:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007a38:	4b11      	ldr	r3, [pc, #68]	; (8007a80 <USBD_LL_Init+0x94>)
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007a3e:	4b10      	ldr	r3, [pc, #64]	; (8007a80 <USBD_LL_Init+0x94>)
 8007a40:	2200      	movs	r2, #0
 8007a42:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007a44:	4b0e      	ldr	r3, [pc, #56]	; (8007a80 <USBD_LL_Init+0x94>)
 8007a46:	2200      	movs	r2, #0
 8007a48:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007a4a:	480d      	ldr	r0, [pc, #52]	; (8007a80 <USBD_LL_Init+0x94>)
 8007a4c:	f7fa f90e 	bl	8001c6c <HAL_PCD_Init>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d001      	beq.n	8007a5a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007a56:	f7f9 fb1a 	bl	800108e <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007a5a:	2180      	movs	r1, #128	; 0x80
 8007a5c:	4808      	ldr	r0, [pc, #32]	; (8007a80 <USBD_LL_Init+0x94>)
 8007a5e:	f7fb fb66 	bl	800312e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007a62:	2240      	movs	r2, #64	; 0x40
 8007a64:	2100      	movs	r1, #0
 8007a66:	4806      	ldr	r0, [pc, #24]	; (8007a80 <USBD_LL_Init+0x94>)
 8007a68:	f7fb fb1a 	bl	80030a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007a6c:	2280      	movs	r2, #128	; 0x80
 8007a6e:	2101      	movs	r1, #1
 8007a70:	4803      	ldr	r0, [pc, #12]	; (8007a80 <USBD_LL_Init+0x94>)
 8007a72:	f7fb fb15 	bl	80030a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3708      	adds	r7, #8
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	2000161c 	.word	0x2000161c

08007a84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a90:	2300      	movs	r3, #0
 8007a92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7fa fa03 	bl	8001ea6 <HAL_PCD_Start>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007aa4:	7bfb      	ldrb	r3, [r7, #15]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f000 f942 	bl	8007d30 <USBD_Get_USB_Status>
 8007aac:	4603      	mov	r3, r0
 8007aae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ab0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b084      	sub	sp, #16
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	4608      	mov	r0, r1
 8007ac4:	4611      	mov	r1, r2
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	4603      	mov	r3, r0
 8007aca:	70fb      	strb	r3, [r7, #3]
 8007acc:	460b      	mov	r3, r1
 8007ace:	70bb      	strb	r3, [r7, #2]
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007ae2:	78bb      	ldrb	r3, [r7, #2]
 8007ae4:	883a      	ldrh	r2, [r7, #0]
 8007ae6:	78f9      	ldrb	r1, [r7, #3]
 8007ae8:	f7fa fed4 	bl	8002894 <HAL_PCD_EP_Open>
 8007aec:	4603      	mov	r3, r0
 8007aee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007af0:	7bfb      	ldrb	r3, [r7, #15]
 8007af2:	4618      	mov	r0, r3
 8007af4:	f000 f91c 	bl	8007d30 <USBD_Get_USB_Status>
 8007af8:	4603      	mov	r3, r0
 8007afa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007afc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b084      	sub	sp, #16
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
 8007b0e:	460b      	mov	r3, r1
 8007b10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b12:	2300      	movs	r3, #0
 8007b14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b16:	2300      	movs	r3, #0
 8007b18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b20:	78fa      	ldrb	r2, [r7, #3]
 8007b22:	4611      	mov	r1, r2
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7fa ff1d 	bl	8002964 <HAL_PCD_EP_Close>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b2e:	7bfb      	ldrb	r3, [r7, #15]
 8007b30:	4618      	mov	r0, r3
 8007b32:	f000 f8fd 	bl	8007d30 <USBD_Get_USB_Status>
 8007b36:	4603      	mov	r3, r0
 8007b38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b50:	2300      	movs	r3, #0
 8007b52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b54:	2300      	movs	r3, #0
 8007b56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b5e:	78fa      	ldrb	r2, [r7, #3]
 8007b60:	4611      	mov	r1, r2
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7fa fff5 	bl	8002b52 <HAL_PCD_EP_SetStall>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 f8de 	bl	8007d30 <USBD_Get_USB_Status>
 8007b74:	4603      	mov	r3, r0
 8007b76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b78:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b084      	sub	sp, #16
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b92:	2300      	movs	r3, #0
 8007b94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b9c:	78fa      	ldrb	r2, [r7, #3]
 8007b9e:	4611      	mov	r1, r2
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7fb f83a 	bl	8002c1a <HAL_PCD_EP_ClrStall>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007baa:	7bfb      	ldrb	r3, [r7, #15]
 8007bac:	4618      	mov	r0, r3
 8007bae:	f000 f8bf 	bl	8007d30 <USBD_Get_USB_Status>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007bd2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007bd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	da0b      	bge.n	8007bf4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007bdc:	78fb      	ldrb	r3, [r7, #3]
 8007bde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007be2:	68f9      	ldr	r1, [r7, #12]
 8007be4:	4613      	mov	r3, r2
 8007be6:	00db      	lsls	r3, r3, #3
 8007be8:	4413      	add	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	440b      	add	r3, r1
 8007bee:	333e      	adds	r3, #62	; 0x3e
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	e00b      	b.n	8007c0c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007bf4:	78fb      	ldrb	r3, [r7, #3]
 8007bf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bfa:	68f9      	ldr	r1, [r7, #12]
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	00db      	lsls	r3, r3, #3
 8007c00:	4413      	add	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	440b      	add	r3, r1
 8007c06:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007c0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3714      	adds	r7, #20
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	460b      	mov	r3, r1
 8007c22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c24:	2300      	movs	r3, #0
 8007c26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c32:	78fa      	ldrb	r2, [r7, #3]
 8007c34:	4611      	mov	r1, r2
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fa fe07 	bl	800284a <HAL_PCD_SetAddress>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c40:	7bfb      	ldrb	r3, [r7, #15]
 8007c42:	4618      	mov	r0, r3
 8007c44:	f000 f874 	bl	8007d30 <USBD_Get_USB_Status>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b086      	sub	sp, #24
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	60f8      	str	r0, [r7, #12]
 8007c5e:	607a      	str	r2, [r7, #4]
 8007c60:	603b      	str	r3, [r7, #0]
 8007c62:	460b      	mov	r3, r1
 8007c64:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007c74:	7af9      	ldrb	r1, [r7, #11]
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	f7fa ff20 	bl	8002abe <HAL_PCD_EP_Transmit>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c82:	7dfb      	ldrb	r3, [r7, #23]
 8007c84:	4618      	mov	r0, r3
 8007c86:	f000 f853 	bl	8007d30 <USBD_Get_USB_Status>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c8e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3718      	adds	r7, #24
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	607a      	str	r2, [r7, #4]
 8007ca2:	603b      	str	r3, [r7, #0]
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cac:	2300      	movs	r3, #0
 8007cae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007cb6:	7af9      	ldrb	r1, [r7, #11]
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	f7fa fe9c 	bl	80029f8 <HAL_PCD_EP_Receive>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cc4:	7dfb      	ldrb	r3, [r7, #23]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f000 f832 	bl	8007d30 <USBD_Get_USB_Status>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007cd0:	7dbb      	ldrb	r3, [r7, #22]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3718      	adds	r7, #24
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b082      	sub	sp, #8
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007cec:	78fa      	ldrb	r2, [r7, #3]
 8007cee:	4611      	mov	r1, r2
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fa fecc 	bl	8002a8e <HAL_PCD_EP_GetRxCount>
 8007cf6:	4603      	mov	r3, r0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007d08:	4b03      	ldr	r3, [pc, #12]	; (8007d18 <USBD_static_malloc+0x18>)
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	370c      	adds	r7, #12
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr
 8007d16:	bf00      	nop
 8007d18:	20001b28 	.word	0x20001b28

08007d1c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]

}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	4603      	mov	r3, r0
 8007d38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007d3e:	79fb      	ldrb	r3, [r7, #7]
 8007d40:	2b03      	cmp	r3, #3
 8007d42:	d817      	bhi.n	8007d74 <USBD_Get_USB_Status+0x44>
 8007d44:	a201      	add	r2, pc, #4	; (adr r2, 8007d4c <USBD_Get_USB_Status+0x1c>)
 8007d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4a:	bf00      	nop
 8007d4c:	08007d5d 	.word	0x08007d5d
 8007d50:	08007d63 	.word	0x08007d63
 8007d54:	08007d69 	.word	0x08007d69
 8007d58:	08007d6f 	.word	0x08007d6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d60:	e00b      	b.n	8007d7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d62:	2303      	movs	r3, #3
 8007d64:	73fb      	strb	r3, [r7, #15]
    break;
 8007d66:	e008      	b.n	8007d7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d6c:	e005      	b.n	8007d7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	73fb      	strb	r3, [r7, #15]
    break;
 8007d72:	e002      	b.n	8007d7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007d74:	2303      	movs	r3, #3
 8007d76:	73fb      	strb	r3, [r7, #15]
    break;
 8007d78:	bf00      	nop
  }
  return usb_status;
 8007d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3714      	adds	r7, #20
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <__libc_init_array>:
 8007d88:	b570      	push	{r4, r5, r6, lr}
 8007d8a:	4d0d      	ldr	r5, [pc, #52]	; (8007dc0 <__libc_init_array+0x38>)
 8007d8c:	4c0d      	ldr	r4, [pc, #52]	; (8007dc4 <__libc_init_array+0x3c>)
 8007d8e:	1b64      	subs	r4, r4, r5
 8007d90:	10a4      	asrs	r4, r4, #2
 8007d92:	2600      	movs	r6, #0
 8007d94:	42a6      	cmp	r6, r4
 8007d96:	d109      	bne.n	8007dac <__libc_init_array+0x24>
 8007d98:	4d0b      	ldr	r5, [pc, #44]	; (8007dc8 <__libc_init_array+0x40>)
 8007d9a:	4c0c      	ldr	r4, [pc, #48]	; (8007dcc <__libc_init_array+0x44>)
 8007d9c:	f000 f8ec 	bl	8007f78 <_init>
 8007da0:	1b64      	subs	r4, r4, r5
 8007da2:	10a4      	asrs	r4, r4, #2
 8007da4:	2600      	movs	r6, #0
 8007da6:	42a6      	cmp	r6, r4
 8007da8:	d105      	bne.n	8007db6 <__libc_init_array+0x2e>
 8007daa:	bd70      	pop	{r4, r5, r6, pc}
 8007dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8007db0:	4798      	blx	r3
 8007db2:	3601      	adds	r6, #1
 8007db4:	e7ee      	b.n	8007d94 <__libc_init_array+0xc>
 8007db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dba:	4798      	blx	r3
 8007dbc:	3601      	adds	r6, #1
 8007dbe:	e7f2      	b.n	8007da6 <__libc_init_array+0x1e>
 8007dc0:	08008454 	.word	0x08008454
 8007dc4:	08008454 	.word	0x08008454
 8007dc8:	08008454 	.word	0x08008454
 8007dcc:	08008458 	.word	0x08008458

08007dd0 <memcpy>:
 8007dd0:	440a      	add	r2, r1
 8007dd2:	4291      	cmp	r1, r2
 8007dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007dd8:	d100      	bne.n	8007ddc <memcpy+0xc>
 8007dda:	4770      	bx	lr
 8007ddc:	b510      	push	{r4, lr}
 8007dde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007de2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007de6:	4291      	cmp	r1, r2
 8007de8:	d1f9      	bne.n	8007dde <memcpy+0xe>
 8007dea:	bd10      	pop	{r4, pc}

08007dec <memset>:
 8007dec:	4402      	add	r2, r0
 8007dee:	4603      	mov	r3, r0
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d100      	bne.n	8007df6 <memset+0xa>
 8007df4:	4770      	bx	lr
 8007df6:	f803 1b01 	strb.w	r1, [r3], #1
 8007dfa:	e7f9      	b.n	8007df0 <memset+0x4>

08007dfc <strncat>:
 8007dfc:	b530      	push	{r4, r5, lr}
 8007dfe:	4604      	mov	r4, r0
 8007e00:	7825      	ldrb	r5, [r4, #0]
 8007e02:	4623      	mov	r3, r4
 8007e04:	3401      	adds	r4, #1
 8007e06:	2d00      	cmp	r5, #0
 8007e08:	d1fa      	bne.n	8007e00 <strncat+0x4>
 8007e0a:	3a01      	subs	r2, #1
 8007e0c:	d304      	bcc.n	8007e18 <strncat+0x1c>
 8007e0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e12:	f803 4b01 	strb.w	r4, [r3], #1
 8007e16:	b904      	cbnz	r4, 8007e1a <strncat+0x1e>
 8007e18:	bd30      	pop	{r4, r5, pc}
 8007e1a:	2a00      	cmp	r2, #0
 8007e1c:	d1f5      	bne.n	8007e0a <strncat+0xe>
 8007e1e:	701a      	strb	r2, [r3, #0]
 8007e20:	e7f3      	b.n	8007e0a <strncat+0xe>

08007e22 <strncmp>:
 8007e22:	b510      	push	{r4, lr}
 8007e24:	b17a      	cbz	r2, 8007e46 <strncmp+0x24>
 8007e26:	4603      	mov	r3, r0
 8007e28:	3901      	subs	r1, #1
 8007e2a:	1884      	adds	r4, r0, r2
 8007e2c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007e30:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007e34:	4290      	cmp	r0, r2
 8007e36:	d101      	bne.n	8007e3c <strncmp+0x1a>
 8007e38:	42a3      	cmp	r3, r4
 8007e3a:	d101      	bne.n	8007e40 <strncmp+0x1e>
 8007e3c:	1a80      	subs	r0, r0, r2
 8007e3e:	bd10      	pop	{r4, pc}
 8007e40:	2800      	cmp	r0, #0
 8007e42:	d1f3      	bne.n	8007e2c <strncmp+0xa>
 8007e44:	e7fa      	b.n	8007e3c <strncmp+0x1a>
 8007e46:	4610      	mov	r0, r2
 8007e48:	e7f9      	b.n	8007e3e <strncmp+0x1c>

08007e4a <strncpy>:
 8007e4a:	b510      	push	{r4, lr}
 8007e4c:	3901      	subs	r1, #1
 8007e4e:	4603      	mov	r3, r0
 8007e50:	b132      	cbz	r2, 8007e60 <strncpy+0x16>
 8007e52:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007e56:	f803 4b01 	strb.w	r4, [r3], #1
 8007e5a:	3a01      	subs	r2, #1
 8007e5c:	2c00      	cmp	r4, #0
 8007e5e:	d1f7      	bne.n	8007e50 <strncpy+0x6>
 8007e60:	441a      	add	r2, r3
 8007e62:	2100      	movs	r1, #0
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d100      	bne.n	8007e6a <strncpy+0x20>
 8007e68:	bd10      	pop	{r4, pc}
 8007e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8007e6e:	e7f9      	b.n	8007e64 <strncpy+0x1a>

08007e70 <ceil>:
 8007e70:	ec51 0b10 	vmov	r0, r1, d0
 8007e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e78:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007e7c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007e80:	2e13      	cmp	r6, #19
 8007e82:	ee10 5a10 	vmov	r5, s0
 8007e86:	ee10 8a10 	vmov	r8, s0
 8007e8a:	460c      	mov	r4, r1
 8007e8c:	dc30      	bgt.n	8007ef0 <ceil+0x80>
 8007e8e:	2e00      	cmp	r6, #0
 8007e90:	da12      	bge.n	8007eb8 <ceil+0x48>
 8007e92:	a335      	add	r3, pc, #212	; (adr r3, 8007f68 <ceil+0xf8>)
 8007e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e98:	f7f8 f9ac 	bl	80001f4 <__adddf3>
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	f7f8 fbdc 	bl	800065c <__aeabi_dcmpgt>
 8007ea4:	b128      	cbz	r0, 8007eb2 <ceil+0x42>
 8007ea6:	2c00      	cmp	r4, #0
 8007ea8:	db55      	blt.n	8007f56 <ceil+0xe6>
 8007eaa:	432c      	orrs	r4, r5
 8007eac:	d057      	beq.n	8007f5e <ceil+0xee>
 8007eae:	4c30      	ldr	r4, [pc, #192]	; (8007f70 <ceil+0x100>)
 8007eb0:	2500      	movs	r5, #0
 8007eb2:	4621      	mov	r1, r4
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	e025      	b.n	8007f04 <ceil+0x94>
 8007eb8:	4f2e      	ldr	r7, [pc, #184]	; (8007f74 <ceil+0x104>)
 8007eba:	4137      	asrs	r7, r6
 8007ebc:	ea01 0307 	and.w	r3, r1, r7
 8007ec0:	4303      	orrs	r3, r0
 8007ec2:	d01f      	beq.n	8007f04 <ceil+0x94>
 8007ec4:	a328      	add	r3, pc, #160	; (adr r3, 8007f68 <ceil+0xf8>)
 8007ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eca:	f7f8 f993 	bl	80001f4 <__adddf3>
 8007ece:	2200      	movs	r2, #0
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	f7f8 fbc3 	bl	800065c <__aeabi_dcmpgt>
 8007ed6:	2800      	cmp	r0, #0
 8007ed8:	d0eb      	beq.n	8007eb2 <ceil+0x42>
 8007eda:	2c00      	cmp	r4, #0
 8007edc:	bfc2      	ittt	gt
 8007ede:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8007ee2:	fa43 f606 	asrgt.w	r6, r3, r6
 8007ee6:	19a4      	addgt	r4, r4, r6
 8007ee8:	ea24 0407 	bic.w	r4, r4, r7
 8007eec:	2500      	movs	r5, #0
 8007eee:	e7e0      	b.n	8007eb2 <ceil+0x42>
 8007ef0:	2e33      	cmp	r6, #51	; 0x33
 8007ef2:	dd0b      	ble.n	8007f0c <ceil+0x9c>
 8007ef4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007ef8:	d104      	bne.n	8007f04 <ceil+0x94>
 8007efa:	ee10 2a10 	vmov	r2, s0
 8007efe:	460b      	mov	r3, r1
 8007f00:	f7f8 f978 	bl	80001f4 <__adddf3>
 8007f04:	ec41 0b10 	vmov	d0, r0, r1
 8007f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f0c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007f10:	f04f 33ff 	mov.w	r3, #4294967295
 8007f14:	fa23 f707 	lsr.w	r7, r3, r7
 8007f18:	4207      	tst	r7, r0
 8007f1a:	d0f3      	beq.n	8007f04 <ceil+0x94>
 8007f1c:	a312      	add	r3, pc, #72	; (adr r3, 8007f68 <ceil+0xf8>)
 8007f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f22:	f7f8 f967 	bl	80001f4 <__adddf3>
 8007f26:	2200      	movs	r2, #0
 8007f28:	2300      	movs	r3, #0
 8007f2a:	f7f8 fb97 	bl	800065c <__aeabi_dcmpgt>
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	d0bf      	beq.n	8007eb2 <ceil+0x42>
 8007f32:	2c00      	cmp	r4, #0
 8007f34:	dd02      	ble.n	8007f3c <ceil+0xcc>
 8007f36:	2e14      	cmp	r6, #20
 8007f38:	d103      	bne.n	8007f42 <ceil+0xd2>
 8007f3a:	3401      	adds	r4, #1
 8007f3c:	ea25 0507 	bic.w	r5, r5, r7
 8007f40:	e7b7      	b.n	8007eb2 <ceil+0x42>
 8007f42:	2301      	movs	r3, #1
 8007f44:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007f48:	fa03 f606 	lsl.w	r6, r3, r6
 8007f4c:	4435      	add	r5, r6
 8007f4e:	4545      	cmp	r5, r8
 8007f50:	bf38      	it	cc
 8007f52:	18e4      	addcc	r4, r4, r3
 8007f54:	e7f2      	b.n	8007f3c <ceil+0xcc>
 8007f56:	2500      	movs	r5, #0
 8007f58:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007f5c:	e7a9      	b.n	8007eb2 <ceil+0x42>
 8007f5e:	4625      	mov	r5, r4
 8007f60:	e7a7      	b.n	8007eb2 <ceil+0x42>
 8007f62:	bf00      	nop
 8007f64:	f3af 8000 	nop.w
 8007f68:	8800759c 	.word	0x8800759c
 8007f6c:	7e37e43c 	.word	0x7e37e43c
 8007f70:	3ff00000 	.word	0x3ff00000
 8007f74:	000fffff 	.word	0x000fffff

08007f78 <_init>:
 8007f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7a:	bf00      	nop
 8007f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f7e:	bc08      	pop	{r3}
 8007f80:	469e      	mov	lr, r3
 8007f82:	4770      	bx	lr

08007f84 <_fini>:
 8007f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f86:	bf00      	nop
 8007f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f8a:	bc08      	pop	{r3}
 8007f8c:	469e      	mov	lr, r3
 8007f8e:	4770      	bx	lr
